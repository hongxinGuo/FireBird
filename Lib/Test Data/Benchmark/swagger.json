{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Finnhub API",
    "license": {
      "name": "Apache-2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "finnhub.io",
  "basePath": "/api/v1",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "token",
      "in": "query"
    }
  },
  "extraDocs": [
    {
      "section": null,
      "subSection": [
        {
          "navHeader": "Introduction",
          "urlId": "introduction",
          "summary": "API Documentation",
          "description": "<p class=\"lead\">The API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. This is 1 of the most comprehensive financial API available on the market.</p> <p><strong>Base URL</strong>: <code>/api/v1</code></p><p><strong>Swagger schema</strong>: <a target=\"_blank\" href=\"/static/swagger.json\">Download</a></p>"
        },
        {
          "navHeader": "Authentication",
          "urlId": "authentication",
          "summary": "Authentication",
          "description": "<p>All GET request require a token parameter <code>token=apiKey</code> in the URL or a header <code>X-Finnhub-Token : apiKey</code>. You can find your API Key under <a target=\"_blank\" href=\"/dashboard\">Dashboard</a>. If you are logged in, your API key will be automatically used in the examples so you can copy and paste them as is.</p>"
        },
        {
          "navHeader": "Limits",
          "urlId": "rate-limit",
          "summary": "Rate Limits",
          "description": "<p>If your limit is exceeded, you will receive a response with status code <code>429</code>.</p><p>On top of all plan's limit, there is a 30 API calls/ second limit.</p>"
        },
        {
          "navHeader": "Webhook",
          "urlId": "webhook",
          "summary": "Webhook",
          "highUsage": "High Usage",
          "description": "Subscribe to webhook events. You can setup webhook and test it in <a target=\"_blank\" href=\"/dashboard\">Dashboard</a>. Each user can subscribe up to 50 events.",
          "method": [
            "GET,POST"
          ],
          "examples": [
            {
              "url": "/",
              "text": "/webhook:action"
            }
          ],
          "arguments": null,
          "responseAttributes": [
            {
              "name": "event",
              "type": "string",
              "description": "Event type. We support real-time <code>earnings</code> events for US stocks at the moment."
            },
            {
              "name": "data",
              "type": "list",
              "description": "List of events."
            }
          ],
          "sampleCode": {
            "autoGenerated": false,
            "javascript": "",
            "go": "",
            "python": "import requests\n\n# Register new webhook for earnings\nr = requests.post('https://finnhub.io/api/v1/webhook/add?token=<token>', json={'event': 'earnings', 'symbol': 'AAPL'})\nres = r.json()\nprint(res)\n\nwebhook_id = res['id']\n# List webhook\nr = requests.get('https://finnhub.io/api/v1/webhook/list?token=<token>')\nres = r.json()\nprint(res)\n\n#Delete webhook\nr = requests.post('https://finnhub.io/api/v1/webhook/delete?token=<token>', json={'id': webhook_id})\nres = r.json()\nprint(res)\n\n"
          },
          "sampleResponse": ""
        },
        {
          "navHeader": "Excel & Google Spreadsheet",
          "urlId": "excel-plugin-google-spreadsheet",
          "newEndpoint": "New Endpoint",
          "summary": "FinSheet Excel & Google Sheets plugin",
          "description": "<p><a href=\"https://finsheet.io/\" target=\"_blank\">Finsheet</a> is the official spreadsheet's plugin partner using fundamental data and estimates data from Finnhub. If you are looking to complement the stock price data you already got directly from Excel and Google Sheets with some advanced data, <a href=\"https://finsheet.io/\" target=\"_blank\">Finsheet's Excel and Google Sheets plugin</a> offer an affordable way to access global fundamentals and estimates right in your spreadsheet.</p><span><img src=\"https://finsheet.io/static/img/candles.png\"></img></span>"
        }
      ]
    },
    {
      "section": "Open Source",
      "subSection": [
        {
          "navHeader": "Libraries",
          "urlId": "library",
          "summary": "Libraries",
          "description": "<p>We have been incredibly humbled by the support of the open-source community. Beside these incredible projects, here are our own official libraries: </p><table class=\"table table-hover\">\n  <thead>\n    <tr>\n      <th>Language</th>\n      <th>Homepage</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td class=\"text-blue\">Python</th>\n      <td><a href=\"https://github.com/Finnhub-Stock-API/finnhub-python\" target=\"_blank\" rel=\"noopener nofollow\">finnhub-python</a></td>\n    </tr>\n    <tr>\n      <td class=\"text-blue\">Go</th>\n      <td><a href=\"https://github.com/Finnhub-Stock-API/finnhub-go\" target=\"_blank\" rel=\"noopener nofollow\">finnhub-go</a></td>\n    </tr>\n    <tr>\n      <td class=\"text-blue\">Javascript</th>\n      <td><a href=\"https://www.npmjs.com/package/finnhub\" target=\"_blank\" rel=\"noopener nofollow\">Finnhub NPM</a></td>\n    </tr>\n    <tr>\n      <td class=\"text-blue\">Ruby</th>\n      <td><a href=\"https://github.com/Finnhub-Stock-API/finnhub-ruby\" target=\"_blank\" rel=\"noopener nofollow\">Finnhub Ruby</a></td>\n    </tr>\n    <tr>\n      <td class=\"text-blue\">Kotlin</th>\n      <td><a href=\"https://github.com/Finnhub-Stock-API/finnhub-kotlin\" target=\"_blank\" rel=\"noopener nofollow\">Finnhub Kotlin</a></td>\n    </tr>\n    <tr>\n      <td class=\"text-blue\">PHP</th>\n      <td><a href=\"https://packagist.org/packages/finnhub/client\" target=\"_blank\" rel=\"noopener nofollow\">Finnhub PHP</a></td>\n    </tr>\n  </tbody>\n</table>"
        },
        {
          "navHeader": "Open Data",
          "urlId": "open-data",
          "summary": "Open Data",
          "description": "<p>We understand the importance of data for students, researchers,and investors. That's why at Finnhub, we have decided to create multiple Open Datasets for the community which can be downloaded in bulk below:</p><table class=\"table table-hover\">\n  <thead>\n    <tr>\n      <th>Datasets</th>\n      <th>Download</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td class=\"text-blue\">SEC Financials As Reported</th>\n      <td><a href=\"https://www.kaggle.com/finnhub/reported-financials\" target=\"_blank\" rel=\"noopener\">Kaggle</a></td>\n    </tr>\n    <tr>\n      <td class=\"text-blue\">SEC Filings Metadata</th>\n      <td><a href=\"https://www.kaggle.com/finnhub/sec-filings\" target=\"_blank\" rel=\"noopener\">Kaggle</a></td>\n    </tr>\n    <tr>\n      <td class=\"text-blue\">S&P 500 futures tick data</th>\n      <td><a href=\"https://www.kaggle.com/finnhub/sp-500-futures-tick-data-sp\" target=\"_blank\" rel=\"noopener\">Kaggle</a></td>\n    </tr>\n  </tbody>\n</table>"
        }
      ]
    },
    {
      "section": "Websocket",
      "subSection": [
        {
          "navHeader": "Trades",
          "urlId": "websocket-trades",
          "summary": "Trades - Last Price Updates",
          "title": "Websocket - Realtime streaming for US Full SIP, LSE, Forex and Crypto",
          "highUsage": "High Usage",
          "description": "<p>Stream real-time trades for US stocks, forex and crypto. Trades might not be available for some forex and crypto exchanges. In that case, a price update will be sent with volume = 0. A message can contain multiple trades. 1 API key can only open 1 connection at a time. Real-time US market data is provided by IEX. Cross-connect and real-time data for international markets are available for Enterprise clients via our partners. <a href=\"mailto:support@finnhub.io\">Contact us</a> to learn more.</p> <p>The following FX brokers do not support streaming: FXCM, Forex.com. To get latest price for FX, please use the Forex Candles or All Rates endpoint.</p>",
          "method": [
            "Websocket"
          ],
          "examples": [
            {
              "url": "wss://ws.finnhub.io?token=<token>",
              "text": "wss://ws.finnhub.io"
            }
          ],
          "arguments": null,
          "responseAttributes": [
            {
              "name": "type",
              "type": "string",
              "description": "Message type."
            },
            {
              "name": "data",
              "type": "list",
              "description": "List of trades or price updates.",
              "item": {
                "type": "object",
                "definition": "Trade",
                "attributes": [
                  {
                    "name": "s",
                    "type": "string",
                    "description": "Symbol."
                  },
                  {
                    "name": "p",
                    "type": "float",
                    "description": "Last price."
                  },
                  {
                    "name": "t",
                    "type": "int",
                    "description": "UNIX milliseconds timestamp."
                  },
                  {
                    "name": "v",
                    "type": "float",
                    "description": "Volume."
                  },
                  {
                    "name": "c",
                    "type": "list",
                    "description": "List of trade conditions. A comprehensive list of trade conditions code can be found <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1PUxiSWPHSODbaTaoL2Vef6DgU-yFtlRGZf19oBb9Hp0/edit?usp=sharing\">here</a>",
                    "item": {
                      "type": "string"
                    }
                  }
                ]
              }
            }
          ],
          "sampleCode": {
            "autoGenerated": false,
            "javascript": "const socket = new WebSocket('wss://ws.finnhub.io?token=<token>');\n\n// Connection opened -> Subscribe\nsocket.addEventListener('open', function (event) {\n    socket.send(JSON.stringify({'type':'subscribe', 'symbol': 'AAPL'}))\n    socket.send(JSON.stringify({'type':'subscribe', 'symbol': 'BINANCE:BTCUSDT'}))\n    socket.send(JSON.stringify({'type':'subscribe', 'symbol': 'IC MARKETS:1'}))\n});\n\n// Listen for messages\nsocket.addEventListener('message', function (event) {\n    console.log('Message from server ', event.data);\n});\n\n// Unsubscribe\n var unsubscribe = function(symbol) {\n    socket.send(JSON.stringify({'type':'unsubscribe','symbol': symbol}))\n}\n",
            "go": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/gorilla/websocket\"\n)\n\nfunc main() {\n\tw, _, err := websocket.DefaultDialer.Dial(\"wss://ws.finnhub.io?token=<token>\", nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer w.Close()\n\n\tsymbols := []string{\"AAPL\", \"AMZN\", \"BINANCE:BTCUSDT\", \"IC MARKETS:1\"}\n\tfor _, s := range symbols {\n\t\tmsg, _ := json.Marshal(map[string]interface{}{\"type\": \"subscribe\", \"symbol\": s})\n\t\tw.WriteMessage(websocket.TextMessage, msg)\n\t}\n\n\tvar msg interface{}\n\tfor {\n\t\terr := w.ReadJSON(&msg);\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tfmt.Println(\"Message from server \", msg)\n\t}\n}\n",
            "python": "#https://pypi.org/project/websocket_client/\nimport websocket\n\ndef on_message(ws, message):\n    print(message)\n\ndef on_error(ws, error):\n    print(error)\n\ndef on_close(ws):\n    print(\"### closed ###\")\n\ndef on_open(ws):\n    ws.send('{\"type\":\"subscribe\",\"symbol\":\"AAPL\"}')\n    ws.send('{\"type\":\"subscribe\",\"symbol\":\"AMZN\"}')\n    ws.send('{\"type\":\"subscribe\",\"symbol\":\"BINANCE:BTCUSDT\"}')\n    ws.send('{\"type\":\"subscribe\",\"symbol\":\"IC MARKETS:1\"}')\n\nif __name__ == \"__main__\":\n    websocket.enableTrace(True)\n    ws = websocket.WebSocketApp(\"wss://ws.finnhub.io?token=<token>\",\n                              on_message = on_message,\n                              on_error = on_error,\n                              on_close = on_close)\n    ws.on_open = on_open\n    ws.run_forever()"
          },
          "sampleResponse": " {\"data\":[{\"p\":7296.89,\"s\":\"BINANCE:BTCUSDT\",\"t\":1575526691134,\"v\":0.011467}],\"type\":\"trade\"}\n\n"
        },
        {
          "navHeader": "News",
          "title": "Websocket - Realtime News Streaming",
          "urlId": "websocket-news",
          "summary": "News",
          "premium": "Premium Access Required",
          "description": "Stream real-time news for US and Canadian stocks.",
          "method": [
            "Websocket"
          ],
          "examples": [
            {
              "url": "wss://ws.finnhub.io?token=<token>",
              "text": "wss://ws.finnhub.io"
            }
          ],
          "arguments": null,
          "responseAttributes": [
            {
              "name": "type",
              "type": "string",
              "description": "Message type: <code>news</code>."
            },
            {
              "name": "data",
              "type": "list",
              "description": "List of news.",
              "item": {
                "type": "object",
                "definition": "News",
                "attributes": [
                  {
                    "name": "category",
                    "type": "string",
                    "description": "News category."
                  },
                  {
                    "name": "datetime",
                    "type": "timestamp",
                    "description": "Published time in UNIX timestamp."
                  },
                  {
                    "name": "headline",
                    "type": "string",
                    "description": "News headline."
                  },
                  {
                    "name": "urlId",
                    "type": "int",
                    "description": "News ID."
                  },
                  {
                    "name": "image",
                    "type": "string",
                    "description": "Thumbnail image URL."
                  },
                  {
                    "name": "related",
                    "type": "string",
                    "description": "Related stocks and companies mentioned in the article."
                  },
                  {
                    "name": "source",
                    "type": "string",
                    "description": "News source."
                  },
                  {
                    "name": "summary",
                    "type": "string",
                    "description": "News summary."
                  },
                  {
                    "name": "url",
                    "type": "string",
                    "description": "URL of the original article."
                  }
                ]
              }
            }
          ],
          "sampleCode": {
            "autoGenerated": false,
            "javascript": "const socket = new WebSocket('wss://ws.finnhub.io?token=<token>');\n\n// Connection opened -> Subscribe\nsocket.addEventListener('open', function (event) {\n    socket.send(JSON.stringify({'type':'subscribe-news', 'symbol': 'AAPL'}))\n    socket.send(JSON.stringify({'type':'subscribe-news', 'symbol': 'MSFT'}))\n    socket.send(JSON.stringify({'type':'subscribe-news', 'symbol': 'AMZN'}))\n});\n\n// Listen for messages\nsocket.addEventListener('message', function (event) {\n    console.log('Message from server ', event.data);\n});\n\n// Unsubscribe\n var unsubscribe = function(symbol) {\n    socket.send(JSON.stringify({'type':'unsubscribe-news','symbol': symbol}))\n}\n",
            "go": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/gorilla/websocket\"\n)\n\nfunc main() {\n\tw, _, err := websocket.DefaultDialer.Dial(\"wss://ws.finnhub.io?token=<token>\", nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer w.Close()\n\n\tsymbols := []string{\"AAPL\", \"AMZN\", \"MSFT\", \"BYND\"}\n\tfor _, s := range symbols {\n\t\tmsg, _ := json.Marshal(map[string]interface{}{\"type\": \"subscribe-news\", \"symbol\": s})\n\t\tw.WriteMessage(websocket.TextMessage, msg)\n\t}\n\n\tvar msg interface{}\n\tfor {\n\t\terr := w.ReadJSON(&msg);\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tfmt.Println(\"Message from server \", msg)\n\t}\n}\n",
            "python": "#https://pypi.org/project/websocket_client/\nimport websocket\n\ndef on_message(ws, message):\n    print(message)\n\ndef on_error(ws, error):\n    print(error)\n\ndef on_close(ws):\n    print(\"### closed ###\")\n\ndef on_open(ws):\n    ws.send('{\"type\":\"subscribe-news\",\"symbol\":\"AAPL\"}')\n    ws.send('{\"type\":\"subscribe-news\",\"symbol\":\"AMZN\"}')\n    ws.send('{\"type\":\"subscribe-news\",\"symbol\":\"MSFT\"}')\n    ws.send('{\"type\":\"subscribe-news\",\"symbol\":\"BYND\"}')\n\nif __name__ == \"__main__\":\n    websocket.enableTrace(True)\n    ws = websocket.WebSocketApp(\"wss://ws.finnhub.io?token=<token>\",\n                              on_message = on_message,\n                              on_error = on_error,\n                              on_close = on_close)\n    ws.on_open = on_open\n    ws.run_forever()"
          },
          "sampleResponse": " {\"data\":[{\"p\":7296.89,\"s\":\"BINANCE:BTCUSDT\",\"t\":1575526691134,\"v\":0.011467}],\"type\":\"trade\"}\n\n"
        }
      ]
    }
  ],
  "orders": [
    "/search",
    "/stock/symbol",
    "/stock/profile",
    "/stock/profile2",
    "/stock/executive",
    "/news",
    "/company-news",
    "/press-releases",
    "/news-sentiment",
    "/stock/peers",
    "/stock/metric",
    "/stock/ownership",
    "/stock/fund-ownership",
    "/institutional/profile",
    "/institutional/portfolio",
    "/institutional/ownership",
    "/stock/insider-transactions",
    "/stock/insider-sentiment",
    "/stock/financials",
    "/stock/financials-reported",
    "/stock/revenue-breakdown",
    "/stock/filings",
    "/stock/international-filings",
    "/stock/filings-sentiment",
    "/stock/similarity-index",
    "/calendar/ipo",
    "/stock/dividend",
    "/sector/metrics",
    "/stock/price-metric",
    "/ca/symbol-change",
    "/ca/isin-change",
    "/stock/recommendation",
    "/stock/price-target",
    "/stock/upgrade-downgrade",
    "/stock/revenue-estimate",
    "/stock/eps-estimate",
    "/stock/ebitda-estimate",
    "/stock/ebit-estimate",
    "/stock/earnings",
    "/calendar/earnings",
    "/quote",
    "/stock/candle",
    "/stock/tick",
    "/stock/bbo",
    "/stock/bidask",
    "/stock/split",
    "/stock/dividend2",
    "/index/constituents",
    "/index/historical-constituents",
    "/etf/profile",
    "/etf/holdings",
    "/etf/sector",
    "/etf/country",
    "/mutual-fund/profile",
    "/mutual-fund/holdings",
    "/mutual-fund/sector",
    "/mutual-fund/country",
    "/bond/profile",
    "/bond/price",
    "/bond/tick",
    "/bond/yield-curve",
    "/forex/exchange",
    "/forex/symbol",
    "/forex/candle",
    "/forex/rates",
    "/crypto/exchange",
    "/crypto/symbol",
    "/crypto/profile",
    "/crypto/candle",
    "/scan/pattern",
    "/scan/support-resistance",
    "/scan/technical-indicator",
    "/indicator",
    "/stock/transcripts/list",
    "/stock/transcripts",
    "/stock/social-sentiment",
    "/stock/investment-theme",
    "/stock/supply-chain",
    "/stock/esg",
    "/stock/earnings-quality-score",
    "/stock/uspto-patent",
    "/stock/visa-application",
    "/stock/lobbying",
    "/stock/usa-spending",
    "/covid19/us",
    "/fda-advisory-committee-calendar",
    "/country",
    "/calendar/economic",
    "/economic/code",
    "/economic"
  ],
  "sampleCodeTemplate": {
    "python": "import finnhub\nfinnhub_client = finnhub.Client(api_key=\"<token>\")\n\n<MY_CODE>\n",
    "javascript": "const finnhub = require('finnhub');\n\nconst api_key = finnhub.ApiClient.instance.authentications['api_key'];\napi_key.apiKey = \"<token>\"\nconst finnhubClient = new finnhub.DefaultApi()\n\n<MY_CODE>\n",
    "go": "package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    finnhub \"github.com/Finnhub-Stock-API/finnhub-go/v2\"\n)\n\nfunc main() {\n    cfg := finnhub.NewConfiguration()\n    cfg.AddDefaultHeader(\"X-Finnhub-Token\", \"<token>\")\n    finnhubClient := finnhub.NewAPIClient(cfg).DefaultApi\n    \n    <MY_CODE>\n    fmt.Printf(\"%+v\\n\", res)\n}",
    "ruby": "require 'finnhub_ruby'\n\nFinnhubRuby.configure do |config|\n  config.api_key['api_key'] = '<token>'\nend\n\nfinnhub_client = FinnhubRuby::DefaultApi.new\n<MY_CODE>\n",
    "kotlin": "import io.finnhub.api.apis.DefaultApi\nimport io.finnhub.api.infrastructure.ApiClient\n\nApiClient.apiKey[\"token\"] = \"<token>\"\nval apiClient = DefaultApi()\n\n<MY_CODE>\n",
    "php": "<?php\n\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n$config = Finnhub\\Configuration::getDefaultConfiguration()->setApiKey('token', '<token>');\n$client = new Finnhub\\Api\\DefaultApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n<MY_CODE>\n\n?>"
  },
  "paths": {
    "/search": {
      "get": {
        "summary": "Symbol Lookup",
        "description": "Search for best-matching symbols based on your query. You can input anything from symbol, security's name to ISIN and Cusip.",
        "operationId": "symbol-search",
        "navHeader": "Symbol Lookup",
        "urlId": "symbol-search",
        "title": "Global Stocks Search",
        "examples": [
          {
            "url": "/search?q=apple&token=<token>",
            "text": "/search?q=apple"
          },
          {
            "url": "/search?q=US5949181045&token=<token>",
            "text": "/search?q=US5949181045"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": null,
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "description": "Query text can be symbol, name, isin, or cusip.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SymbolLookup"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.symbol_lookup('apple'))",
          "go": "res, _, err := finnhubClient.SymbolSearch(context.Background()).Q(\"AAPL\").Execute()",
          "javascript": "finnhubClient.symbolSearch('AAPL', (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.symbol_search('AAPL'))",
          "kotlin": "println(apiClient.symbolSearch(\"AAPL\"))",
          "php": "print_r($client->symbolSearch(\"AAPL\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"count\": 4,\n  \"result\": [\n    {\n      \"description\": \"APPLE INC\",\n      \"displaySymbol\": \"AAPL\",\n      \"symbol\": \"AAPL\",\n      \"type\": \"Common Stock\"\n    },\n    {\n      \"description\": \"APPLE INC\",\n      \"displaySymbol\": \"AAPL.SW\",\n      \"symbol\": \"AAPL.SW\",\n      \"type\": \"Common Stock\"\n    },\n    {\n      \"description\": \"APPLE INC\",\n      \"displaySymbol\": \"APC.BE\",\n      \"symbol\": \"APC.BE\",\n      \"type\": \"Common Stock\"\n    },\n    {\n      \"description\": \"APPLE INC\",\n      \"displaySymbol\": \"APC.DE\",\n      \"symbol\": \"APC.DE\",\n      \"type\": \"Common Stock\"\n    }\n  ]\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/symbol": {
      "get": {
        "summary": "Stock Symbol",
        "description": "List supported stocks. We use the following symbology to identify stocks on Finnhub <code>Exchange_Ticker.Exchange_Code</code>. A list of supported exchange codes can be found <a href=\"https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp=sharing\" target=\"_blank\">here</a>.",
        "operationId": "stock-symbols",
        "navHeader": "Stock Symbols",
        "urlId": "stock-symbols",
        "title": "Stock Symbols By Exchange",
        "examples": [
          {
            "url": "/stock/symbol?exchange=US&token=<token>",
            "text": "/stock/symbol?exchange=US"
          },
          {
            "url": "/stock/symbol?exchange=US&mic=XNYS&token=<token>",
            "text": "/stock/symbol?exchange=US&mic=XNYS"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": null,
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "exchange",
            "description": "Exchange you want to get the list of symbols from. List of exchange codes can be found <a href=\"https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp=sharing\" target=\"_blank\">here</a>.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "mic",
            "description": "Filter by MIC code.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "securityType",
            "description": "Filter by security type used by OpenFigi standard.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "currency",
            "description": "Filter by currency.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StockSymbol"
              }
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.stock_symbols('US'))",
          "go": "res, _, err := finnhubClient.StockSymbols(context.Background()).Exchange(\"US\").Execute()",
          "javascript": "finnhubClient.stockSymbols(\"US\", (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.stock_symbols('US'))",
          "kotlin": "println(apiClient.stockSymbols(\"US\", \"\", \"\", \"\"))",
          "php": "print_r($client->stockSymbols(\"US\"));",
          "useTemplate": true
        },
        "sampleResponse": "[\n  {\n    \"currency\": \"USD\",\n    \"description\": \"UAN POWER CORP\",\n    \"displaySymbol\": \"UPOW\",\n    \"figi\": \"BBG000BGHYF2\",\n    \"mic\": \"OTCM\",\n    \"symbol\": \"UPOW\",\n    \"type\": \"Common Stock\"\n  },\n  {\n    \"currency\": \"USD\",\n    \"description\": \"APPLE INC\",\n    \"displaySymbol\": \"AAPL\",\n    \"figi\": \"BBG000B9Y5X2\",\n    \"mic\": \"XNGS\",\n    \"symbol\": \"AAPL\",\n    \"type\": \"Common Stock\"\n  },\n  {\n    \"currency\": \"USD\",\n    \"description\": \"EXCO TECHNOLOGIES LTD\",\n    \"displaySymbol\": \"EXCOF\",\n    \"figi\": \"BBG000JHDDS8\",\n    \"mic\": \"OOTC\",\n    \"symbol\": \"EXCOF\",\n    \"type\": \"Common Stock\"\n  }\n]",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/profile": {
      "get": {
        "summary": "Company Profile",
        "description": "Get general information of a company. You can query by symbol, ISIN or CUSIP",
        "operationId": "company-profile",
        "navHeader": "Company Profile",
        "urlId": "company-profile",
        "title": "Global Company Profile",
        "examples": [
          {
            "url": "/stock/profile?symbol=AAPL&token=<token>",
            "text": "/stock/profile?symbol=AAPL"
          },
          {
            "url": "/stock/profile?symbol=IBM&token=<token>",
            "text": "/stock/profile?symbol=IBM"
          },
          {
            "url": "/stock/profile?isin=US5949181045&token=<token>",
            "text": "/stock/profile?isin=US5949181045"
          },
          {
            "url": "/stock/profile?cusip=023135106&token=<token>",
            "text": "/stock/profile?cusip=023135106"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol of the company: AAPL e.g.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "isin",
            "description": "ISIN",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "cusip",
            "description": "CUSIP",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CompanyProfile"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.company_profile(symbol='AAPL'))",
          "go": "res, _, err := finnhubClient.CompanyProfile(context.Background()).Symbol(\"AAPL\").Execute()",
          "javascript": "finnhubClient.companyProfile({'symbol': 'AAPL'}, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.company_profile({symbol: 'AAPL'}))",
          "kotlin": "println(apiClient.companyProfile(symbol = \"AAPL\", isin = null, cusip = null))",
          "php": "print_r($client->companyProfile(\"AAPL\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"address\": \"1 Apple Park Way\",\n  \"city\": \"CUPERTINO\",\n  \"country\": \"US\",\n  \"currency\": \"USD\",\n  \"cusip\": \"\",\n  \"sedol\":\"2046251\",\n  \"description\": \"Apple Inc. is an American multinational technology company headquartered in Cupertino, California, that designs, develops, and sells consumer electronics, computer software, and online services. It is considered one of the Big Four technology companies, alongside Amazon, Google, and Microsoft. The company's hardware products include the iPhone smartphone, the iPad tablet computer, the Mac personal computer, the iPod portable media player, the Apple Watch smartwatch, the Apple TV digital media player, the AirPods wireless earbuds and the HomePod smart speaker. Apple's software includes the macOS, iOS, iPadOS, watchOS, and tvOS operating systems, the iTunes media player, the Safari web browser, the Shazam acoustic fingerprint utility, and the iLife and iWork creativity and productivity suites, as well as professional applications like Final Cut Pro, Logic Pro, and Xcode. Its online services include the iTunes Store, the iOS App Store, Mac App Store, Apple Music, Apple TV+, iMessage, and iCloud. Other services include Apple Store, Genius Bar, AppleCare, Apple Pay, Apple Pay Cash, and Apple Card.\",\n  \"employeeTotal\": \"137000\",\n  \"exchange\": \"NASDAQ/NMS (GLOBAL MARKET)\",\n  \"ggroup\": \"Technology Hardware & Equipment\",\n  \"gind\": \"Technology Hardware, Storage & Peripherals\",\n  \"gsector\": \"Information Technology\",\n  \"gsubind\": \"Technology Hardware, Storage & Peripherals\",\n  \"ipo\": \"1980-12-12\",\n  \"isin\": \"\",\n  \"marketCapitalization\": 1415993,\n  \"naics\": \"Communications Equipment Manufacturing\",\n  \"naicsNationalIndustry\": \"Radio and Television Broadcasting and Wireless Communications Equipment Manufacturing\",\n  \"naicsSector\": \"Manufacturing\",\n  \"naicsSubsector\": \"Computer and Electronic Product Manufacturing\",\n  \"name\": \"Apple Inc\",\n  \"phone\": \"14089961010\",\n  \"shareOutstanding\": 4375.47998046875,\n  \"state\": \"CALIFORNIA\",\n  \"ticker\": \"AAPL\",\n  \"weburl\": \"https://www.apple.com/\",\n  \"logo\": \"https://static.finnhub.io/logo/87cb30d8-80df-11ea-8951-00000000092a.png\",\n  \"finnhubIndustry\":\"Technology\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/profile2": {
      "get": {
        "summary": "Company Profile 2",
        "description": "Get general information of a company. You can query by symbol, ISIN or CUSIP. This is the free version of <a href=\"#company-profile\">Company Profile</a>.",
        "operationId": "company-profile2",
        "navHeader": "Company Profile 2",
        "urlId": "company-profile2",
        "title": "Global Company Profile 2",
        "examples": [
          {
            "url": "/stock/profile2?symbol=AAPL&token=<token>",
            "text": "/stock/profile2?symbol=AAPL"
          },
          {
            "url": "/stock/profile2?isin=US5949181045&token=<token>",
            "text": "/stock/profile2?isin=US5949181045"
          },
          {
            "url": "/stock/profile2?cusip=023135106&token=<token>",
            "text": "/stock/profile2?cusip=023135106"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": null,
        "newEndpoint": "New Endpoint",
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol of the company: AAPL e.g.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "isin",
            "description": "ISIN",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "cusip",
            "description": "CUSIP",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CompanyProfile2"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.company_profile2(symbol='AAPL'))",
          "go": "res, _, err := finnhubClient.CompanyProfile2(context.Background()).Symbol(\"AAPL\").Execute()",
          "javascript": "finnhubClient.companyProfile2({'symbol': 'AAPL'}, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.company_profile2({symbol: 'AAPL'}))",
          "kotlin": "println(apiClient.companyProfile2(symbol = \"AAPL\", isin = null, cusip = null))",
          "php": "print_r($client->companyProfile2(\"AAPL\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"country\": \"US\",\n  \"currency\": \"USD\",\n  \"exchange\": \"NASDAQ/NMS (GLOBAL MARKET)\",\n  \"ipo\": \"1980-12-12\",\n  \"marketCapitalization\": 1415993,\n  \"name\": \"Apple Inc\",\n  \"phone\": \"14089961010\",\n  \"shareOutstanding\": 4375.47998046875,\n  \"ticker\": \"AAPL\",\n  \"weburl\": \"https://www.apple.com/\",\n  \"logo\": \"https://static.finnhub.io/logo/87cb30d8-80df-11ea-8951-00000000092a.png\",\n  \"finnhubIndustry\":\"Technology\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/executive": {
      "get": {
        "summary": "Company Executive",
        "description": "Get a list of company's executives and members of the Board.",
        "operationId": "company-executive",
        "navHeader": "Company Executive",
        "urlId": "company-executive",
        "title": "Global Company Executives & Compensation",
        "examples": [
          {
            "url": "/stock/executive?symbol=AAPL&token=<token>",
            "text": "/stock/executive?symbol=AAPL"
          },
          {
            "url": "/stock/executive?symbol=AMZN&token=<token>",
            "text": "/stock/executive?symbol=AMZN"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol of the company: AAPL.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CompanyExecutive"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.company_executive('AAPL'))",
          "go": "res, _, err := finnhubClient.CompanyExecutive(context.Background()).Symbol(\"AAPL\").Execute()",
          "javascript": "finnhubClient.companyExecutive('AAPL', (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.company_executive('AAPL'))",
          "kotlin": "println(apiClient.companyExecutive(\"AAPL\"))",
          "php": "print_r($client->companyExecutive(\"AAPL\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"executive\": [\n    {\n      \"age\": 56,\n      \"compensation\": 25209637,\n      \"currency\": \"USD\",\n      \"name\": \"Luca Maestri\",\n      \"position\": \"Senior Vice President and Chief Financial Officer\",\n      \"sex\": \"male\",\n      \"since\": \"2014\"\n    },\n    {\n      \"age\": 59,\n      \"compensation\": 11555466,\n      \"currency\": \"USD\",\n      \"name\": \"Mr. Timothy Cook\",\n      \"position\": \"Director and Chief Executive Officer\",\n      \"sex\": \"male\",\n      \"since\": \"2011\"\n    }\n  ]\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/news": {
      "get": {
        "summary": "Market News",
        "description": "Get latest market news.",
        "operationId": "market-news",
        "navHeader": "Market News",
        "urlId": "market-news",
        "title": "Real-time Market News API",
        "examples": [
          {
            "url": "/news?category=general&token=<token>",
            "text": "/news?category=general"
          },
          {
            "url": "/news?category=forex&minId=10&token=<token>",
            "text": "/news?category=forex&minId=10"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": null,
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "category",
            "description": "This parameter can be 1 of the following values <code>general, forex, crypto, merger</code>.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "minId",
            "description": "Use this field to get only news after this ID. Default to 0",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MarketNews"
              }
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.general_news('general', min_id=0))",
          "go": "res, _, err := finnhubClient.MarketNews(context.Background()).Category(\"general\").Execute()",
          "javascript": "finnhubClient.marketNews(\"general\", {}, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.market_news('general', {min_id: 0}))",
          "kotlin": "println(apiClient.marketNews(\"general\", minId = 0))",
          "php": "print_r($client->marketNews(\"forex\", 0));",
          "useTemplate": true
        },
        "sampleResponse": "[\n  {\n    \"category\": \"technology\",\n    \"datetime\": 1596589501,\n    \"headline\": \"Square surges after reporting 64% jump in revenue, more customers using Cash App\",\n    \"id\": 5085164,\n    \"image\": \"https://image.cnbcfm.com/api/v1/image/105569283-1542050972462rts25mct.jpg?v=1542051069\",\n    \"related\": \"\",\n    \"source\": \"CNBC\",\n    \"summary\": \"Shares of Square soared on Tuesday evening after posting better-than-expected quarterly results and strong growth in its consumer payments app.\",\n    \"url\": \"https://www.cnbc.com/2020/08/04/square-sq-earnings-q2-2020.html\"\n  },\n  {\n    \"category\": \"business\",\n    \"datetime\": 1596588232,\n    \"headline\": \"B&G Foods CEO expects pantry demand to hold up post-pandemic\",\n    \"id\": 5085113,\n    \"image\": \"https://image.cnbcfm.com/api/v1/image/106629991-1595532157669-gettyimages-1221952946-362857076_1-5.jpeg?v=1595532242\",\n    \"related\": \"\",\n    \"source\": \"CNBC\",\n    \"summary\": \"\\\"I think post-Covid, people will be working more at home, which means people will be eating more breakfast\\\" and other meals at home, B&G CEO Ken Romanzi said.\",\n    \"url\": \"https://www.cnbc.com/2020/08/04/bg-foods-ceo-expects-pantry-demand-to-hold-up-post-pandemic.html\"\n  },\n  {\n    \"category\": \"top news\",\n    \"datetime\": 1596584406,\n    \"headline\": \"Anthony Levandowski gets 18 months in prison for stealing Google self-driving car files\",\n    \"id\": 5084850,\n    \"image\": \"https://image.cnbcfm.com/api/v1/image/106648265-1596584130509-UBER-LEVANDOWSKI.JPG?v=1596584247\",\n    \"related\": \"\",\n    \"source\": \"CNBC\",\n    \"summary\": \"A U.S. judge on Tuesday sentenced former Google engineer Anthony Levandowski to 18 months in prison for stealing a trade secret from Google related to self-driving cars months before becoming the head of Uber Technologies Inc's rival unit.\",\n    \"url\": \"https://www.cnbc.com/2020/08/04/anthony-levandowski-gets-18-months-in-prison-for-stealing-google-self-driving-car-files.html\"\n  }\n  }]",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/company-news": {
      "get": {
        "summary": "Company News",
        "description": "List latest company news by symbol. This endpoint is only available for North American companies.",
        "operationId": "company-news",
        "navHeader": "Company News",
        "urlId": "company-news",
        "title": "Real-time Global Company News API",
        "examples": [
          {
            "url": "/company-news?symbol=AAPL&from=2021-09-01&to=2021-09-09&token=<token>",
            "text": "/company-news?symbol=AAPL&from=2021-09-01&to=2021-09-09"
          }
        ],
        "widget": null,
        "freeTier": "1 year of historical news and new updates",
        "premium": null,
        "newEndpoint": null,
        "highUsage": "High Usage",
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Company symbol.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "from",
            "description": "From date <code>YYYY-MM-DD</code>.",
            "required": true,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "to",
            "description": "To date <code>YYYY-MM-DD</code>.",
            "required": true,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompanyNews"
              }
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.company_news('AAPL', _from=\"2020-06-01\", to=\"2020-06-10\"))",
          "go": "res, _, err := finnhubClient.CompanyNews(context.Background()).Symbol(\"AAPL\").From(\"2020-05-01\").To(\"2020-05-01\").Execute()",
          "javascript": "finnhubClient.companyNews(\"AAPL\", \"2020-01-01\", \"2020-05-01\", (error, data, response) => {\n\tconsole.log(data)\n});",
          "ruby": "puts(finnhub_client.company_news('AAPL', \"2020-06-01\", \"2020-06-10\"))",
          "kotlin": "println(apiClient.companyNews(\"AAPL\", from = \"2020-06-01\", to = \"2020-06-10\"))",
          "php": "print_r($client->companyNews(\"AAPL\", \"2020-06-01\", \"2020-06-10\"));",
          "useTemplate": true
        },
        "sampleResponse": "[\n  {\n    \"category\": \"company news\",\n    \"datetime\": 1569550360,\n    \"headline\": \"More sops needed to boost electronic manufacturing: Top govt official More sops needed to boost electronic manufacturing: Top govt official.  More sops needed to boost electronic manufacturing: Top govt official More sops needed to boost electronic manufacturing: Top govt official\",\n    \"id\": 25286,\n    \"image\": \"https://img.etimg.com/thumb/msid-71321314,width-1070,height-580,imgsize-481831,overlay-economictimes/photo.jpg\",\n    \"related\": \"AAPL\",\n    \"source\": \"The Economic Times India\",\n    \"summary\": \"NEW DELHI | CHENNAI: India may have to offer electronic manufacturers additional sops such as cheap credit and incentives for export along with infrastructure support in order to boost production and help the sector compete with China, Vietnam and Thailand, according to a top government official.These incentives, over and above the proposed reduction of corporate tax to 15% for new manufacturing units, are vital for India to successfully attract companies looking to relocate manufacturing facilities.\u201cWhile the tax announcements made last week send a very good signal, in order to help attract investments, we will need additional initiatives,\u201d the official told ET, pointing out that Indian electronic manufacturers incur 8-10% higher costs compared with other Asian countries.Sops that are similar to the incentives for export under the existing Merchandise Exports from India Scheme (MEIS) are what the industry requires, the person said.MEIS gives tax credit in the range of 2-5%. An interest subvention scheme for cheaper loans and a credit guarantee scheme for plant and machinery are some other possible measures that will help the industry, the official added.\u201cThis should be 2.0 (second) version of the electronic manufacturing cluster (EMC) scheme, which is aimed at creating an ecosystem with an anchor company plus its suppliers to operate in the same area,\u201d he said.Last week, finance minister Nirmala Sitharaman announced a series of measures to boost economic growth including a scheme allowing any new manufacturing company incorporated on or after October 1, to pay income tax at 15% provided the company does not avail of any other exemption or incentives.\",\n    \"url\": \"https://economictimes.indiatimes.com/industry/cons-products/electronics/more-sops-needed-to-boost-electronic-manufacturing-top-govt-official/articleshow/71321308.cms\"\n  },\n  {\n    \"category\": \"company news\",\n    \"datetime\": 1569528720,\n    \"headline\": \"How to disable comments on your YouTube videos in 2 different ways\",\n    \"id\": 25287,\n    \"image\": \"https://amp.businessinsider.com/images/5d8d16182e22af6ab66c09e9-1536-768.jpg\",\n    \"related\": \"AAPL\",\n    \"source\": \"Business Insider\",\n    \"summary\": \"You can disable comments on your own YouTube video if you don't want people to comment on it. It's easy to disable comments on YouTube by adjusting the settings for one of your videos in the beta or classic version of YouTube Studio. Visit Business Insider's homepage for more stories . The comments section has a somewhat complicated reputation for creators, especially for those making videos on YouTube . While it can be useful to get the unfiltered opinions of your YouTube viewers and possibly forge a closer connection with them, it can also open you up to quite a bit of negativity. So it makes sense that there may be times when you want to turn off the feature entirely. Just keep in mind that the action itself can spark conversation. If you decide that you don't want to let people leave comments on your YouTube video, here's how to turn off the feature, using either the classic or beta version of the creator studio: How to disable comments on YouTube in YouTube Studio (beta) 1. Go to youtube.com and log into your account, if necessary. 2.\",\n    \"url\": \"https://www.businessinsider.com/how-to-disable-comments-on-youtube\"\n  },\n  {\n    \"category\": \"company news\",\n    \"datetime\": 1569526180,\n    \"headline\": \"Apple iPhone 11 Pro Teardowns Look Encouraging for STMicro and Sony\",\n    \"id\": 25341,\n    \"image\": \"http://s.thestreet.com/files/tsc/v2008/photos/contrib/uploads/ba140938-d409-11e9-822b-fda891ce1fc1.png\",\n    \"related\": \"AAPL\",\n    \"source\": \"TheStreet\",\n    \"summary\": \"STMicroelectronics and Sony each appear to be supplying four chips for Apple's latest flagship iPhones. Many other historical iPhone suppliers also make appearances in the latest teardowns\u2026.STM\",\n    \"url\": \"https://realmoney.thestreet.com/investing/technology/iphone-11-pro-teardowns-look-encouraging-for-stmicro-sony-15105767\"\n  },\n]",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/press-releases": {
      "get": {
        "summary": "Major Press Releases",
        "description": "<p>Get latest major press releases of a company. This data can be used to highlight the most significant events comprised of mostly press releases sourced from the exchanges, BusinessWire, AccessWire, GlobeNewswire, Newsfile, and PRNewswire.</p><p>Full-text press releases data is available for Enterprise clients. <a href=\"mailto:support@finnhub.io\">Contact Us</a> to learn more.</p>",
        "operationId": "press-releases",
        "navHeader": "Press Releases",
        "urlId": "press-releases",
        "title": "Real-time Press Releases API",
        "examples": [
          {
            "url": "/press-releases?symbol=AAPL&token=<token>",
            "text": "/press-releases?symbol=AAPL"
          },
          {
            "url": "/press-releases?symbol=IBM&from=2019-11-01&to=2020-02-15&token=<token>",
            "text": "/press-releases?symbol=IBM&from=2019-11-01&to=2020-02-15"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Company symbol.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "from",
            "description": "From time: 2020-01-01.",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "to",
            "description": "To time: 2020-01-05.",
            "required": false,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/PressRelease"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.press_releases('AAPL'))",
          "go": "res, _, err := finnhubClient.PressReleases(context.Background()).Symbol(\"AAPL\").Execute()",
          "javascript": "finnhubClient.pressReleases(\"AAPL\", {}, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.press_releases('AAPL', {from: \"2020-01-01\", to: \"2020-12-31\"}))\n",
          "kotlin": "println(apiClient.pressReleases(\"AAPL\", from = \"2020-01-01\", to = \"2020-12-31\"))",
          "php": "print_r($client->pressReleases(\"AAPL\", \"2020-01-01\", \"2020-12-31\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"majorDevelopment\": [\n    {\n      \"symbol\": \"AAPL\",\n      \"datetime\": \"2020-08-04 17:06:32\",\n      \"headline\": \"27-inch iMac Gets a Major Update\",\n      \"description\": \"CUPERTINO, Calif.--(BUSINESS WIRE)-- Apple today announced a major update to its 27-inch iMac\u00ae. By far the most powerful and capable iMac ever, it features faster Intel processors up to 10 cores, double the memory capacity, next-generation AMD graphics, superfast SSDs across the line with four times the storage capacity, a new nano-texture glass option for an even more stunning Retina\u00ae 5K display, a 1080p FaceTime\u00ae HD camera, higher fidelity speakers, and studio-quality mics. For the consumer using their iMac all day, every day, to the aspiring creative looking for inspiration, to the serious pro pushing the limits of their creativity, the new 27-inch iMac delivers the ultimate desktop experience that is now better in every way.\"\n    },\n    {\n      \"symbol\": \"AAPL\",\n      \"datetime\": \"2020-03-28 09:41:23\",\n      \"headline\": \"Apple Central World Opens Friday in Thailand\",\n      \"description\": \"BANGKOK--(BUSINESS WIRE)-- Apple\u00ae today previewed Apple Central World, its second and largest retail location in Thailand. Nestled in the heart of Ratchaprasong, Bangkok\u2019s iconic intersection, the store provides a completely new and accessible destination within the lively city. Apple Central World\u2019s distinctive architecture is brought to life with the first-ever all-glass design, housed under a cantilevered Tree Canopy roof. Once inside, customers can travel between two levels via a spiral staircase that wraps around a timber core, or riding a unique cylindrical elevator clad in mirror-polished stainless steel. Guests can enter from the ground or upper level, which provides a direct connection to the Skytrain and the city\u2019s largest shopping center. The outdoor plaza offers a place for the community to gather, with benches and large Terminalia trees surrounding the space.\"\n    }\n  ],\n   \"symbol\": \"AAPL\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/news-sentiment": {
      "get": {
        "summary": "News Sentiment",
        "description": "Get company's news sentiment and statistics. This endpoint is only available for US companies.",
        "operationId": "news-sentiment",
        "navHeader": "News Sentiment",
        "urlId": "news-sentiment",
        "title": "News Sentiment",
        "examples": [
          {
            "url": "/news-sentiment?symbol=V&token=<token>",
            "text": "/news-sentiment?symbol=V"
          },
          {
            "url": "/news-sentiment?symbol=AAPL&token=<token>",
            "text": "/news-sentiment?symbol=AAPL"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Company symbol.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/NewsSentiment"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.news_sentiment('AAPL'))",
          "go": "res, _, err := finnhubClient.NewsSentiment(context.Background()).Symbol(\"AAPL\").Execute()",
          "javascript": "finnhubClient.newsSentiment('AAPL', (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.news_sentiment('AAPL'))",
          "kotlin": "println(apiClient.newsSentiment(\"AAPL\"))",
          "php": "print_r($client->newsSentiment(\"AAPL\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"buzz\": {\n    \"articlesInLastWeek\": 20,\n    \"buzz\": 0.8888,\n    \"weeklyAverage\": 22.5\n  },\n  \"companyNewsScore\": 0.9166,\n  \"sectorAverageBullishPercent\": 0.6482,\n  \"sectorAverageNewsScore\": 0.5191,\n  \"sentiment\": {\n    \"bearishPercent\": 0,\n    \"bullishPercent\": 1\n  },\n  \"symbol\": \"V\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/peers": {
      "get": {
        "summary": "Peers",
        "description": "Get company peers. Return a list of peers operating in the same country and sector/industry.",
        "operationId": "company-peers",
        "navHeader": "Peers",
        "urlId": "company-peers",
        "title": "Company Peers",
        "examples": [
          {
            "url": "/stock/peers?symbol=AAPL&token=<token>",
            "text": "/stock/peers?symbol=AAPL"
          },
          {
            "url": "/stock/peers?symbol=F&grouping=industry&token=<token>",
            "text": "/stock/peers?symbol=F&grouping=industry"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": null,
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol of the company: AAPL.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "grouping",
            "description": "Specify the grouping criteria for choosing peers.Supporter values: <code>sector</code>, <code>industry</code>, <code>subIndustry</code>. Default to <code>subIndustry</code>.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.company_peers('AAPL'))",
          "go": "res, _, err := finnhubClient.CompanyPeers(context.Background()).Symbol(\"AAPL\").Execute()",
          "javascript": "finnhubClient.companyPeers('AAPL', (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.companyPeers('AAPL'))",
          "kotlin": "println(apiClient.companyPeers(\"AAPL\"))",
          "php": "print_r($client->companyPeers(\"AAPL\"));",
          "useTemplate": true
        },
        "sampleResponse": "[\n  \"AAPL\",\n  \"EMC\",\n  \"HPQ\",\n  \"DELL\",\n  \"WDC\",\n  \"HPE\",\n  \"NTAP\",\n  \"CPQ\",\n  \"SNDK\",\n  \"SEG\"\n]",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/metric": {
      "get": {
        "summary": "Basic Financials",
        "description": "Get company basic financials such as margin, P/E ratio, 52-week high/low etc.",
        "operationId": "company-basic-financials",
        "navHeader": "Basic Financials",
        "urlId": "company-basic-financials",
        "title": "Global Company Basic Financials | P/E, EPS, Market cap, Shares Outstanding",
        "examples": [
          {
            "url": "/stock/metric?symbol=AAPL&metric=all&token=<token>",
            "text": "/stock/metric?symbol=AAPL&metric=all"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": null,
        "newEndpoint": null,
        "highUsage": "High Usage",
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol of the company: AAPL.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "metric",
            "description": "Metric type. Can be 1 of the following values <code>all</code>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BasicFinancials"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.company_basic_financials('AAPL', 'all'))",
          "go": "res, _, err := finnhubClient.CompanyBasicFinancials(context.Background()).Symbol(\"MSFT\").Metric(\"all\").Execute()",
          "javascript": "finnhubClient.companyBasicFinancials(\"AAPL\", \"all\", (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.company_basic_financials('AAPL', 'all'))",
          "kotlin": "println(apiClient.companyBasicFinancials(\"AAPL\", \"all\"))",
          "php": "print_r($client->companyBasicFinancials(\"AAPL\", \"all\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n   \"series\": {\n    \"annual\": {\n      \"currentRatio\": [\n        {\n          \"period\": \"2019-09-28\",\n          \"v\": 1.5401\n        },\n        {\n          \"period\": \"2018-09-29\",\n          \"v\": 1.1329\n        }\n      ],\n      \"salesPerShare\": [\n        {\n          \"period\": \"2019-09-28\",\n          \"v\": 55.9645\n        },\n        {\n          \"period\": \"2018-09-29\",\n          \"v\": 53.1178\n        }\n      ],\n      \"netMargin\": [\n        {\n          \"period\": \"2019-09-28\",\n          \"v\": 0.2124\n        },\n        {\n          \"period\": \"2018-09-29\",\n          \"v\": 0.2241\n        }\n      ]\n    }\n  },\n  \"metric\": {\n    \"10DayAverageTradingVolume\": 32.50147,\n    \"52WeekHigh\": 310.43,\n    \"52WeekLow\": 149.22,\n    \"52WeekLowDate\": \"2019-01-14\",\n    \"52WeekPriceReturnDaily\": 101.96334,\n    \"beta\": 1.2989,\n  },\n  \"metricType\": \"all\",\n  \"symbol\": \"AAPL\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/price-metric": {
      "get": {
        "summary": "Price Metrics",
        "description": "Get company price performance statistics such as 52-week high/low, YTD return and much more.",
        "operationId": "price-metrics",
        "navHeader": "Price Metrics",
        "urlId": "price-metrics",
        "title": "Price statistics API | 52-week high/low , YTD return, average volume.",
        "examples": [
          {
            "url": "/stock/price-metric?symbol=AAPL&token=<token>",
            "text": "/stock/price-metric?symbol=AAPL"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol of the company: AAPL.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/PriceMetrics"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.price_metrics('AAPL'))",
          "go": "res, _, err := finnhubClient.PriceMetrics(context.Background()).Symbol(\"MSFT\").Execute()",
          "javascript": "finnhubClient.priceMetrics(\"AAPL\", (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.price_metrics('AAPL'))",
          "kotlin": "println(apiClient.priceMetrics(\"AAPL\"))",
          "php": "print_r($client->priceMetrics(\"AAPL\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"data\": {\n    \"100DayEMA\": 295.7694,\n    \"100DaySMA\": 319.2297,\n    \"10DayAverageTradingVolume\": 53717320,\n    \"10DayEMA\": 247.4641,\n    \"10DaySMA\": 247.372,\n    \"14DayRSI\": 34.0517,\n    \"1MonthHigh\": 314.67,\n    \"1MonthHighDate\": \"2022-08-16\",\n    \"50DayEMA\": 277.482,\n    \"50DaySMA\": 288.313,\n    \"52WeekHigh\": 414.5,\n    \"52WeekHighDate\": \"2021-11-04\",\n    \"52WeekLow\": 206.86,\n    \"52WeekLowDate\": \"2022-05-24\",\n    \"5DayEMA\": 245.8814,\n    \"ytdPriceReturn\": 10.1819\n  },\n  \"symbol\": \"TSLA\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/ca/symbol-change": {
      "get": {
        "summary": "Symbol Change",
        "description": "Get a list of symbol changes for US-listed, EU-listed, NSE and ASX securities. Limit to 2000 events at a time.",
        "operationId": "symbol-change",
        "navHeader": "Symbol Change",
        "urlId": "symbol-change",
        "title": "Symbol Change API | Ticker Change calendar.",
        "examples": [
          {
            "url": "/ca/symbol-change?from=2022-09-01&to=2022-10-30&token=<token>",
            "text": "/ca/symbol-change?from=2022-09-01&to=2022-10-30"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "description": "From date <code>YYYY-MM-DD</code>.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "to",
            "description": "To date <code>YYYY-MM-DD</code>.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SymbolChange"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.symbol_change(_from=\"2022-10-01\", to=\"2022-10-11\"))",
          "go": "res, _, err := finnhubClient.SymbolChange(context.Background()).From(\"2022-10-01\").To(\"2022-10-11\").Execute()",
          "javascript": "finnhubClient.symbolChange({\"from\": \"2022-10-01\", \"to\": \"2022-10-11\"}, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.symbol_change({from: \"2020-01-01\", to: \"2020-06-11\"}))\n",
          "kotlin": "println(\n            apiClient.symbolChange(\n                from = \"2022-10-01\",\n                to = \"2020-10-11\")\n        )",
          "php": "print_r($client->symbolChange(\"2020-01-01\", \"2020-06-11\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"data\": [\n    {\n      \"atDate\": \"2022-10-05\",\n      \"newSymbol\": \"MEN.L\",\n      \"oldSymbol\": \"PPC.L\"\n    }\n  ],\n  \"fromDate\": \"2022-10-01\",\n  \"toDate\": \"2022-10-30\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/ca/isin-change": {
      "get": {
        "summary": "ISIN Change",
        "description": "Get a list of ISIN changes for EU-listed securities. Limit to 2000 events at a time.",
        "operationId": "isin-change",
        "navHeader": "ISIN Change",
        "urlId": "isin-change",
        "title": "ISIN Change API.",
        "examples": [
          {
            "url": "/ca/isin-change?from=2022-09-01&to=2022-10-30&token=<token>",
            "text": "/ca/isin-change?from=2022-09-01&to=2022-10-30"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "description": "From date <code>YYYY-MM-DD</code>.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "to",
            "description": "To date <code>YYYY-MM-DD</code>.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IsinChange"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.isin_change(_from=\"2022-10-01\", to=\"2022-10-11\"))",
          "go": "res, _, err := finnhubClient.IsinChange(context.Background()).From(\"2022-10-01\").To(\"2022-10-11\").Execute()",
          "javascript": "finnhubClient.isinChange({\"from\": \"2022-10-01\", \"to\": \"2022-10-11\"}, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.isin_change({from: \"2020-01-01\", to: \"2020-06-11\"}))\n",
          "kotlin": "println(\n            apiClient.isinChange(\n                from = \"2022-10-01\",\n                to = \"2020-10-11\")\n        )",
          "php": "print_r($client->isinChange(\"2020-01-01\", \"2020-06-11\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"data\": [\n    {\n      \"atDate\": \"2021-08-30\",\n      \"newIsin\": \"DE000A3E5CP0\",\n      \"oldIsin\": \"DE0007239402\"\n    }\n  ],\n  \"fromDate\": \"2021-08-07\",\n  \"toDate\": \"2021-10-07\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/institutional/profile": {
      "get": {
        "summary": "Institutional Profile",
        "description": "Get a list of well-known institutional investors. Currently support 60+ profiles.",
        "operationId": "institutional-profile",
        "navHeader": "Institutional Profile",
        "urlId": "institutional-profile",
        "title": "Institutional Profile API.",
        "examples": [
          {
            "url": "/institutional/profile?token=<token>",
            "text": "/institutional/profile"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cik",
            "description": "Filter by CIK. Leave blank to get the full list.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/InstitutionalProfile"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.institutional_profile()",
          "go": "res, _, err := finnhubClient.InstitutionalProfile(context.Background()).Execute()",
          "javascript": "finnhubClient.institutionalProfile({\"cik\": \"\"}, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.institutional_profile({cik: \"\"}))\n",
          "kotlin": "println(apiClient.institutionalProfile())",
          "php": "print_r($client->institutionalProfile());",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"cik\": \"1067983\",\n  \"data\": [\n    {\n      \"cik\": \"1067983\",\n      \"firmType\": \"Institutional Investment Manager\",\n      \"manager\": \"Warren Buffett\",\n      \"philosophy\": \"Value investing is the hallmark of Warren Buffett's investment approach. By choosing stocks whose share price is below their intrinsic or book value, value investors can increase their returns. This suggests that the stock will increase in value going forward and that the market is now undervaluing it. Only enterprises that Buffett is familiar with are chosen for investment by Berkshire, and a safety margin is always required.\",\n      \"profile\": \"Warren Edward Buffett (born August 30, 1930) is an American business magnate, investor, and philanthropist. He is currently the chairman and CEO of Berkshire Hathaway. He is one of the most successful investors in the world and has a net worth of over $103 billion as of August 2022, making him the world's seventh-wealthiest person. Buffett has been the chairman and largest shareholder of Berkshire Hathaway since 1970. He has been referred to as the \\\"Oracle\\\" or \\\"Sage\\\" of Omaha by global media. He is noted for his adherence to value investing, and his personal frugality despite his immense wealth. Buffett is a philanthropist, having pledged to give away 99 percent of his fortune to philanthropic causes, primarily via the Bill \\u0026 Melinda Gates Foundation. He founded The Giving Pledge in 2010 with Bill Gates, whereby billionaires pledge to give away at least half of their fortunes.\",\n      \"profileImg\": \"https://static4.finnhub.io/file/publicdatany5/guru_profile_pic/1067983.jpg\"\n    }\n  ]\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/institutional/portfolio": {
      "get": {
        "summary": "Institutional Portfolio",
        "description": "Get the holdings/portfolio data of institutional investors from 13-F filings. Limit to 1 year of data at a time. You can get a list of supported CIK <a href=\"/api/v1/institutional/list?token=\" target=\"_blank\">here</a>.",
        "operationId": "institutional-portfolio",
        "navHeader": "Institutional Portfolio",
        "urlId": "institutional-portfolio-13f",
        "title": "Institutional Holdings 13-F API.",
        "examples": [
          {
            "url": "/institutional/portfolio?cik=1000097&from=2022-05-01&to=2022-09-01&token=<token>",
            "text": "/institutional/portfolio?cik=1000097&from=2022-05-01&to=2022-09-01"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cik",
            "description": "Fund's CIK.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "from",
            "description": "From date <code>YYYY-MM-DD</code>.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "to",
            "description": "To date <code>YYYY-MM-DD</code>.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/InstitutionalPortfolio"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.institutional_portfolio(cik=\"1000097\", _from=\"2022-10-01\", to=\"2022-10-11\"))",
          "go": "res, _, err := finnhubClient.InstitutionalPortfolio(context.Background()).Cik(\"1000097\").From(\"2022-10-01\").To(\"2022-10-11\").Execute()",
          "javascript": "finnhubClient.institutionalPortfolio(\"1000097\", \"2022-10-01\",\"2022-10-11\", (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.institutional_portfolio(\"1000097\", \"2022-10-01\",\"2022-10-11\"))\n",
          "kotlin": "println( apiClient.institutionalPortfolio(\"1000097\", from = \"2022-10-01\", to = \"2020-10-11\"))",
          "php": "print_r($client->institutionalPortfolio(\"1000097\",\"2020-01-01\", \"2020-06-11\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"cik\": \"1000097\",\n  \"data\": [\n    {\n      \"filingDate\": \"2022-06-30\",\n      \"portfolio\": [\n        {\n          \"change\": -41600,\n          \"name\": \"ABBOTT LABS\",\n          \"noVoting\": 0,\n          \"percentage\": 0,\n          \"putCall\": \"\",\n          \"share\": 0,\n          \"sharedVoting\": 0,\n          \"soleVoting\": 41600,\n          \"symbol\": \"ABT\",\n          \"value\": 0\n        },\n        {\n          \"change\": -275000,\n          \"name\": \"ADICET BIO INC\",\n          \"noVoting\": 0,\n          \"percentage\": 0,\n          \"putCall\": \"\",\n          \"share\": 0,\n          \"sharedVoting\": 0,\n          \"soleVoting\": 275000,\n          \"symbol\": \"ACET\",\n          \"value\": 0\n        }\n      ],\n      \"reportDate\": \"2022-06-30\"\n    }\n  ],\n  \"name\": \"KINGDON CAPITAL MANAGEMENT, L.L.C.\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/institutional/ownership": {
      "get": {
        "summary": "Institutional Ownership",
        "description": "Get a list institutional investors' positions for a particular stock overtime. Data from 13-F filings. Limit to 1 year of data at a time.",
        "operationId": "institutional-ownership",
        "navHeader": "Institutional Ownership",
        "urlId": "institutional-ownership",
        "title": "Institutional Ownership.",
        "examples": [
          {
            "url": "/institutional/ownership?symbol=TSLA&from=2022-09-01&to=2022-10-30&token=<token>",
            "text": "/institutional/ownership?symbol=TSLA&from=2022-09-01&to=2022-10-30"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Filter by symbol.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "cusip",
            "description": "Filter by CUSIP.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "from",
            "description": "From date <code>YYYY-MM-DD</code>.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "to",
            "description": "To date <code>YYYY-MM-DD</code>.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/InstitutionalOwnership"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.institutional_ownership(symbol=\"TSLA\", cusip=\"\", _from=\"2022-10-01\", to=\"2022-10-11\"))",
          "go": "res, _, err := finnhubClient.InstitutionalOwnership(context.Background()).Symbol(\"TSLA\").From(\"2022-10-01\").To(\"2022-10-11\").Execute()",
          "javascript": "finnhubClient.institutionalOwnership(\"TSLA\", \"\", \"2022-10-01\",\"2022-10-11\", (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.institutional_ownership(\"TSLA\", \"\", \"2022-10-01\",\"2022-10-11\"))\n",
          "kotlin": "println( apiClient.institutionalOwnership(\"TSLA\", \"\", from = \"2022-10-01\", to = \"2022-10-11\"))",
          "php": "print_r($client->institutionalOwnership(\"TSLA\", \"\",\"2022-01-01\", \"2022-06-11\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"cusip\": \"023135106\",\n  \"data\": [\n    {\n      \"ownership\": [\n        {\n          \"change\": null,\n          \"cik\": \"1000097\",\n          \"name\": \"KINGDON CAPITAL MANAGEMENT, L.L.C.\",\n          \"noVoting\": 0,\n          \"percentage\": 6.23893,\n          \"putCall\": \"\",\n          \"share\": 11250,\n          \"sharedVoting\": 0,\n          \"soleVoting\": 11250,\n          \"value\": 36674000\n        }\n      ],\n      \"reportDate\": \"2022-03-31\"\n    }\n  ],\n  \"symbol\": \"AMZN\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/ownership": {
      "get": {
        "summary": "Ownership",
        "description": "Get a full list of shareholders of a company in descending order of the number of shares held. Data is sourced from <code>13F form</code>, <code>Schedule 13D</code> and <code>13G</code> for US market, <code>UK Share Register</code> for UK market, <code>SEDI</code> for Canadian market and equivalent filings for other international markets.",
        "operationId": "ownership",
        "navHeader": "Ownership",
        "urlId": "ownership",
        "title": "Company Ownership",
        "examples": [
          {
            "url": "/stock/ownership?symbol=AAPL&limit=20&token=<token>",
            "text": "/stock/ownership?symbol=AAPL&limit=20"
          },
          {
            "url": "/stock/ownership?symbol=IBM&token=<token>",
            "text": "/stock/ownership?symbol=IBM"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol of the company: AAPL.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit number of results. Leave empty to get the full list.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Ownership"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.ownership('AAPL', limit=5))",
          "go": "res, _, err := finnhubClient.Ownership(context.Background()).Symbol(\"AAPL\").Execute()",
          "javascript": "let optsLimit = {'limit': 10};\nfinnhubClient.ownership(\"AAPL\", optsLimit, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.ownership('AAPL', {limit: 5}))",
          "kotlin": "println(apiClient.ownership(\"AAPL\", limit = 5))",
          "php": "print_r($client->ownership(\"AAPL\", 5));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"ownership\": [\n    {\n      \"name\": \"The Vanguard Group, Inc.\",\n      \"share\": 329323420,\n      \"change\": -1809077,\n      \"filingDate\": \"2019-12-31\"\n    },\n    {\n      \"name\": \"BRK.A | Berkshire Hathaway Inc.\",\n      \"share\": 245155570,\n      \"change\": -3683113,\n      \"filingDate\": \"2019-12-31\"\n    },\n    {\n      \"name\": \"BlackRock Institutional Trust Co NA\",\n      \"share\": 187354850,\n      \"change\": -2500563,\n      \"filingDate\": \"2020-03-31\"\n    }\n  ],\n  \"symbol\": \"AAPL\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/fund-ownership": {
      "get": {
        "summary": "Fund Ownership",
        "description": "Get a full list fund and institutional investors of a company in descending order of the number of shares held. Data is sourced from <code>13F form</code>, <code>Schedule 13D</code> and <code>13G</code> for US market, <code>UK Share Register</code> for UK market, <code>SEDI</code> for Canadian market and equivalent filings for other international markets.",
        "operationId": "fund-ownership",
        "navHeader": "Fund Ownership",
        "urlId": "fund-ownership",
        "title": "Fund Ownership",
        "examples": [
          {
            "url": "/stock/fund-ownership?symbol=TSLA&limit=20&token=<token>",
            "text": "/stock/fund-ownership?symbol=TSLA&limit=20"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol of the company: AAPL.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit number of results. Leave empty to get the full list.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/FundOwnership"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.fund_ownership('AAPL', limit=5))",
          "go": "res, _, err := finnhubClient.FundOwnership(context.Background()).Symbol(\"AAPL\").Execute()",
          "javascript": "let optsLimit = {'limit': 10};\nfinnhubClient.fundOwnership(\"AAPL\", optsLimit, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.fund_ownership('AAPL', {limit: 5}))",
          "kotlin": "println(apiClient.fundOwnership(\"AAPL\", limit = 5))",
          "php": "print_r($client->fundOwnership(\"AMZN\", 5));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"ownership\": [\n    {\n      \"name\": \"AGTHX | American Funds Growth Fund of America\",\n      \"share\": 5145353,\n      \"change\": 57427,\n      \"filingDate\": \"2020-03-31\",\n      \"portfolioPercent\": 1.88\n    },\n    {\n      \"name\": \"Vanguard Total Stock Market Index Fund\",\n      \"share\": 4227464,\n      \"change\": 73406,\n      \"filingDate\": \"2020-03-31\",\n      \"portfolioPercent\": 0.45\n    },\n    {\n      \"name\": \"ANWPX | American Funds New Perspective\",\n      \"share\": 3377612,\n      \"change\": 0,\n      \"filingDate\": \"2020-03-31\",\n      \"portfolioPercent\": 2.64\n    }\n  ],\n  \"symbol\": \"TSLA\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/insider-transactions": {
      "get": {
        "summary": "Insider Transactions",
        "description": "Company insider transactions data sourced from <code>Form 3,4,5</code>, SEDI and relevant companies' filings. This endpoint covers US, Canada, Australia, and selected EU companies. Limit to 100 transactions per API call.",
        "operationId": "insider-transactions",
        "navHeader": "Insider Transactions",
        "urlId": "insider-transactions",
        "title": "Insider Transactions",
        "examples": [
          {
            "url": "/stock/insider-transactions?symbol=TSLA&token=<token>",
            "text": "/stock/insider-transactions?symbol=TSLA&limit=20"
          },
          {
            "url": "/stock/insider-transactions?symbol=AC.TO&token=<token>",
            "text": "/stock/insider-transactions?symbol=AC.TO"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": null,
        "newEndpoint": "New Endpoint",
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol of the company: AAPL. Leave this param blank to get the latest transactions.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "from",
            "description": "From date: 2020-03-15.",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "to",
            "description": "To date: 2020-03-16.",
            "required": false,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/InsiderTransactions"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.stock_insider_transactions('AAPL', '2021-01-01', '2021-03-01'))",
          "go": "res, _, err := finnhubClient.InsiderTransactions(context.Background()).Symbol(\"AAPL\").From(\"2021-01-01\").To(\"2021-07-30\").Execute()",
          "javascript": "finnhubClient.insiderTransactions('AAPL', (error, data, response) => {\n  console.log(data);\n});",
          "ruby": "puts(finnhub_client.insider_transactions('AAPL'))",
          "kotlin": "println(apiClient.insiderTransactions(\"AAPL\", \"2021-01-01\", \"2021-07-07\"))",
          "php": "print_r($client->insiderTransactions(\"AAPL\", \"2021-01-01\", \"2021-03-01\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"data\": [\n    {\n      \"name\": \"Kirkhorn Zachary\",\n      \"share\": 57234,\n      \"change\": -1250,\n      \"filingDate\": \"2021-03-19\",\n      \"transactionDate\": \"2021-03-17\",\n      \"transactionCode\": \"S\",\n      \"transactionPrice\": 655.81\n    },\n    {\n      \"name\": \"Baglino Andrew D\",\n      \"share\": 20614,\n      \"change\": 1000,\n      \"filingDate\": \"2021-03-31\",\n      \"transactionDate\": \"2021-03-29\",\n      \"transactionCode\": \"M\",\n      \"transactionPrice\": 41.57\n    },\n    {\n      \"name\": \"Baglino Andrew D\",\n      \"share\": 19114,\n      \"change\": -1500,\n      \"filingDate\": \"2021-03-31\",\n      \"transactionDate\": \"2021-03-29\",\n      \"transactionCode\": \"S\",\n      \"transactionPrice\": 615.75\n    }\n  ],\n  \"symbol\": \"TSLA\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/insider-sentiment": {
      "get": {
        "summary": "Insider Sentiment",
        "description": "Get insider sentiment data for US companies calculated using method discussed <a href=\"https://medium.com/@stock-api/finnhub-insiders-sentiment-analysis-cc43f9f64b3a\" target=\"_blank\">here</a>. The MSPR ranges from -100 for the most negative to 100 for the most positive which can signal price changes in the coming 30-90 days.",
        "operationId": "insider-sentiment",
        "navHeader": "Insider Sentiment",
        "urlId": "insider-sentiment",
        "title": "Insider Sentiment API",
        "examples": [
          {
            "url": "/stock/insider-sentiment?symbol=TSLA&from=2015-01-01&to=2022-03-01&token=<token>",
            "text": "/stock/insider-sentiment?symbol=TSLA&from=2015-01-01&to=2022-03-01"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": null,
        "newEndpoint": "New Endpoint",
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol of the company: AAPL.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "from",
            "description": "From date: 2020-03-15.",
            "required": true,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "to",
            "description": "To date: 2020-03-16.",
            "required": true,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/InsiderSentiments"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.stock_insider_sentiment('AAPL', '2021-01-01', '2022-03-01'))",
          "go": "res, _, err := finnhubClient.InsiderSentiment(context.Background()).Symbol(\"AAPL\").From(\"2021-01-01\").To(\"2022-07-30\").Execute()",
          "javascript": "finnhubClient.insiderSentiment('AAPL', '2015-01-01', '2022-03-01', (error, data, response) => {\n  console.log(data);\n});",
          "ruby": "puts(finnhub_client.insider_sentiment('AAPL', '2015-01-01', '2022-03-01'))",
          "kotlin": "println(apiClient.insiderSentiment(\"AAPL\", \"2021-01-01\", \"2022-07-07\"))",
          "php": "print_r($client->insiderSentiment(\"AAPL\", \"2021-01-01\", \"2022-03-01\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"data\":[\n    {\n      \"symbol\":\"TSLA\",\n      \"year\":2021,\n      \"month\":3,\n      \"change\":5540,\n      \"mspr\":12.209097\n    },\n    {\n      \"symbol\":\"TSLA\",\n      \"year\":2022,\n      \"month\":1,\n      \"change\":-1250,\n      \"mspr\":-5.6179776\n    },\n    {\n      \"symbol\":\"TSLA\",\n      \"year\":2022,\n      \"month\":2,\n      \"change\":-1250,\n      \"mspr\":-2.1459227\n    },\n    {\n      \"symbol\":\"TSLA\",\n      \"year\":2022,\n      \"month\":3,\n      \"change\":5870,\n      \"mspr\":8.960191\n    }\n  ],\n  \"symbol\":\"TSLA\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/financials": {
      "get": {
        "summary": "Financial Statements",
        "description": "<p>Get standardized balance sheet, income statement and cash flow for global companies going back 30+ years. Data is sourced from original filings most of which made available through <a href=\"#filings\">SEC Filings</a> and <a href=\"#international-filings\">International Filings</a> endpoints.</p><p><i>Wondering why our standardized data is different from Bloomberg, Reuters, Factset, S&P or Yahoo Finance ? Check out our <a href=\"/faq\">FAQ page</a> to learn more</i></p>",
        "operationId": "financials",
        "navHeader": "Financials",
        "urlId": "financials",
        "title": "Global Company Financial Statements",
        "examples": [
          {
            "url": "/stock/financials?symbol=AAPL&statement=bs&freq=annual&token=<token>",
            "text": "/stock/financials?symbol=AAPL&statement=bs&freq=annual"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol of the company: AAPL.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "statement",
            "description": "Statement can take 1 of these values <code>bs, ic, cf</code> for Balance Sheet, Income Statement, Cash Flow respectively.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "freq",
            "description": "Frequency can take 1 of these values <code>annual, quarterly, ttm, ytd</code>.  TTM (Trailing Twelve Months) option is available for Income Statement and Cash Flow. YTD (Year To Date) option is only available for Cash Flow.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/FinancialStatements"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.financials('AAPL', 'bs', 'annual'))",
          "go": "res, _, err := finnhubClient.Financials(context.Background()).Symbol(\"AAPL\").Statement(\"bs\").Freq(\"annual\").Execute()",
          "javascript": "finnhubClient.financials(\"AAPL\", \"ic\", \"annual\", (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.financials('AAPL', 'bs', 'annual'))",
          "kotlin": "println(apiClient.financials(\"AAPL\", \"bs\", \"annual\"))",
          "php": "print_r($client->financials(\"AAPL\", \"bs\", \"annual\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"financials\": [\n    {\n      \"costOfGoodsSold\": 161782,\n      \"ebit\": 63930,\n      \"grossIncome\": 98392,\n      \"interestExpense\": 3576,\n      \"netIncome\": 55256,\n      \"netIncomeAfterTaxes\": 55256,\n      \"period\": \"2019-09-28\",\n      \"pretaxIncome\": 65737,\n      \"provisionforIncomeTaxes\": 10481,\n      \"researchDevelopment\": 16217,\n      \"revenue\": 260174,\n      \"sgaExpense\": 18245,\n      \"totalOperatingExpense\": 34462,\n      \"year\": 2019\n    }\n  ],\n  \"symbol\": \"AAPL\"\n}    ",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/financials-reported": {
      "get": {
        "summary": "Financials As Reported",
        "description": "Get financials as reported. This data is available for bulk download on <a href=\"https://www.kaggle.com/finnhub/reported-financials\" target=\"_blank\">Kaggle SEC Financials database</a>.",
        "operationId": "financials-reported",
        "navHeader": "Financials As Reported",
        "urlId": "financials-reported",
        "title": "Financials As Reported | Stock API",
        "examples": [
          {
            "url": "/stock/financials-reported?symbol=AAPL&token=<token>",
            "text": "/stock/financials-reported?symbol=AAPL"
          },
          {
            "url": "/stock/financials-reported?cik=320193&freq=quarterly&token=<token>",
            "text": "/stock/financials-reported?cik=320193&freq=quarterly"
          },
          {
            "url": "/stock/financials-reported?accessNumber=0000320193-20-000052&token=<token>",
            "text": "/stock/financials-reported?accessNumber=0000320193-20-000052"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": null,
        "newEndpoint": "New Endpoint",
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "cik",
            "description": "CIK.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accessNumber",
            "description": "Access number of a specific report you want to retrieve financials from.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "freq",
            "description": "Frequency. Can be either <code>annual</code> or <code>quarterly</code>. Default to <code>annual</code>.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "from",
            "description": "From date <code>YYYY-MM-DD</code>. Filter for endDate.",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "to",
            "description": "To date <code>YYYY-MM-DD</code>. Filter for endDate.",
            "required": false,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/FinancialsAsReported"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.financials_reported(symbol='AAPL', freq='annual'))",
          "go": "res, _, err := finnhubClient.FinancialsReported(context.Background()).Symbol(\"AAPL\").Execute()",
          "javascript": "finnhubClient.financialsReported({\"symbol\": \"AAPL\"}, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.financials_reported({symbol: 'AAPL', freq: 'annual'}))",
          "kotlin": "println(apiClient.financialsReported(symbol = \"AAPL\", freq = \"annual\", accessNumber = null, cik = null))",
          "php": "print_r($client->financialsReported($symbol = \"AAPL\", $freq = \"annual\"));\n",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"cik\": \"320193\",\n  \"data\": [\n    {\n      \"accessNumber\": \"0000320193-19-000119\",\n      \"symbol\": \"AAPL\",\n      \"cik\": \"320193\",\n      \"year\": 2019,\n      \"quarter\": 0,\n      \"form\": \"10-K\",\n      \"startDate\": \"2018-09-30 00:00:00\",\n      \"endDate\": \"2019-09-28 00:00:00\",\n      \"filedDate\": \"2019-10-31 00:00:00\",\n      \"acceptedDate\": \"2019-10-30 18:12:36\",\n      \"report\": {\n        \"bs\": {\n          \"Assets\": 338516000000,\n          \"Liabilities\": 248028000000,\n          \"InventoryNet\": 4106000000,\n          ...\n        },\n        \"cf\": {\n          \"NetIncomeLoss\": 55256000000,\n          \"InterestPaidNet\": 3423000000,\n          ...\n        },\n        \"ic\": {\n          \"GrossProfit\": 98392000000,\n          \"NetIncomeLoss\": 55256000000,\n          \"OperatingExpenses\": 34462000000,\n           ...\n        }\n      }\n    }\n  ],\n  \"symbol\": \"AAPL\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/revenue-breakdown": {
      "get": {
        "summary": "Revenue Breakdown",
        "description": "Get revenue breakdown by product. This dataset is only available for US companies which disclose their revenue breakdown in the annual or quarterly reports.",
        "operationId": "revenue-breakdown",
        "navHeader": "Revenue Breakdown",
        "urlId": "revenue-breakdown",
        "title": "Revenue Breakdown | Revenue Segment",
        "examples": [
          {
            "url": "/stock/revenue-breakdown?symbol=AAPL&token=<token>",
            "text": "/stock/revenue-breakdown?symbol=AAPL"
          },
          {
            "url": "/stock/revenue-breakdown?cik=320193&token=<token>",
            "text": "/stock/revenue-breakdown?cik=320193"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "cik",
            "description": "CIK.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RevenueBreakdown"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.stock_revenue_breakdown('AAPL'))",
          "go": "res, _, err := finnhubClient.RevenueBreakdown(context.Background()).Symbol(\"AAPL\").Execute()",
          "javascript": "finnhubClient.revenueBreakdown({'symbol': 'AAPL'}, (error, data, response) => {\n  console.log(data);\n});",
          "ruby": "puts(finnhub_client.revenue_breakdown({symbol:'AAPL'}))\n",
          "kotlin": "println(apiClient.revenueBreakdown(\"AAPL\", \"\"))",
          "php": "print_r($client->revenueBreakdown(\"AAPL\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"cik\": \"320193\",\n  \"data\": [\n    {\n      \"accessNumber\": \"0000320193-21-000010\",\n      \"breakdown\": {\n        \"unit\": \"usd\",\n        \"value\": 111439000000,\n        \"concept\": \"us-gaap:RevenueFromContractWithCustomerExcludingAssessedTax\",\n        \"endDate\": \"2020-12-26\",\n        \"startDate\": \"2020-09-27\",\n        \"revenueBreakdown\": [\n          {\n            \"axis\": \"srt:ProductOrServiceAxis\",\n            \"data\": [\n              {\n                \"unit\": \"usd\",\n                \"label\": \"Products\",\n                \"value\": 95678000000,\n                \"member\": \"us-gaap:ProductMember\",\n                \"percentage\": 85.85683647556061\n              },\n              {\n                \"unit\": \"usd\",\n                \"label\": \"Services\",\n                \"value\": 15761000000,\n                \"member\": \"us-gaap:ServiceMember\",\n                \"percentage\": 14.14316352443938\n              },\n              {\n                \"unit\": \"usd\",\n                \"label\": \"Services\",\n                \"value\": 15761000000,\n                \"member\": \"us-gaap:ServiceMember\",\n                \"percentage\": 14.14316352443938\n              },\n              {\n                \"unit\": \"usd\",\n                \"label\": \"iPhone\",\n                \"value\": 65597000000,\n                \"member\": \"aapl:IPhoneMember\",\n                \"percentage\": 58.86359353547681\n              },\n              {\n                \"unit\": \"usd\",\n                \"label\": \"Mac\",\n                \"value\": 8675000000,\n                \"member\": \"aapl:MacMember\",\n                \"percentage\": 7.784527858290185\n              },\n              {\n                \"unit\": \"usd\",\n                \"label\": \"iPad\",\n                \"value\": 8435000000,\n                \"member\": \"aapl:IPadMember\",\n                \"percentage\": 7.569163398810111\n              },\n              {\n                \"unit\": \"usd\",\n                \"label\": \"Wearables, Home and Accessories\",\n                \"value\": 12971000000,\n                \"member\": \"aapl:WearablesHomeandAccessoriesMember\",\n                \"percentage\": 11.639551682983516\n              }\n            ],\n            \"label\": \"Product and Service [Axis]\"\n          },\n        ]\n      }\n    }\n  ],\n  \"symbol\": \"AAPL\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/filings": {
      "get": {
        "summary": "SEC Filings",
        "description": "List company's filing. Limit to 250 documents at a time. This data is available for bulk download on <a href=\"https://www.kaggle.com/finnhub/sec-filings\" target=\"_blank\">Kaggle SEC Filings database</a>.",
        "operationId": "filings",
        "navHeader": "SEC Filings",
        "urlId": "filings",
        "title": "Real-time SEC Filings API",
        "examples": [
          {
            "url": "/stock/filings?symbol=AAPL&token=<token>",
            "text": "/stock/filings?symbol=AAPL"
          },
          {
            "url": "/stock/filings?cik=320193&token=<token>",
            "text": "/stock/filings?cik=320193"
          },
          {
            "url": "/stock/filings?accessNumber=0000320193-20-000052&token=<token>",
            "text": "/stock/filings?accessNumber=0000320193-20-000052"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": null,
        "newEndpoint": "New Endpoint",
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol. Leave <code>symbol</code>,<code>cik</code> and <code>accessNumber</code> empty to list latest filings.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "cik",
            "description": "CIK.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "accessNumber",
            "description": "Access number of a specific report you want to retrieve data from.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "form",
            "description": "Filter by form. You can use this value <code>NT 10-K</code> to find non-timely filings for a company.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "from",
            "description": "From date: 2020-03-15.",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "to",
            "description": "To date: 2020-03-16.",
            "required": false,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Filing"
              }
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.filings(symbol='AAPL', _from=\"2020-01-01\", to=\"2020-06-11\"))",
          "go": "res, _, err := finnhubClient.Filings(context.Background()).Symbol(\"AAPL\").Execute()",
          "javascript": "finnhubClient.filings({\"symbol\": \"AAPL\"}, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.filings({symbol: 'AAPL', from: \"2020-01-01\", to: \"2020-06-11\"}))\n",
          "kotlin": "println(\n            apiClient.filings(\n                symbol = \"AAPL\",\n                from = \"2020-01-01\",\n                to = \"2020-06-11\",\n                accessNumber = null,\n                cik = null,\n                form = null\n            )\n        )",
          "php": "print_r($client->filings(\"AAPL\", \"2020-01-01\", \"2020-06-11\"));",
          "useTemplate": true
        },
        "sampleResponse": "[\n  {\n    \"accessNumber\": \"0001193125-20-050884\",\n    \"symbol\": \"AAPL\",\n    \"cik\": \"320193\",\n    \"form\": \"8-K\",\n    \"filedDate\": \"2020-02-27 00:00:00\",\n    \"acceptedDate\": \"2020-02-27 06:14:21\",\n    \"reportUrl\": \"https://www.sec.gov/ix?doc=/Archives/edgar/data/320193/000119312520050884/d865740d8k.htm\",\n    \"filingUrl\": \"https://www.sec.gov/Archives/edgar/data/320193/000119312520050884/0001193125-20-050884-index.html\"\n  },\n  {\n    \"accessNumber\": \"0001193125-20-039203\",\n    \"symbol\": \"AAPL\",\n    \"cik\": \"320193\",\n    \"form\": \"8-K\",\n    \"filedDate\": \"2020-02-18 00:00:00\",\n    \"acceptedDate\": \"2020-02-18 06:24:57\",\n    \"reportUrl\": \"https://www.sec.gov/ix?doc=/Archives/edgar/data/320193/000119312520039203/d845033d8k.htm\",\n    \"filingUrl\": \"https://www.sec.gov/Archives/edgar/data/320193/000119312520039203/0001193125-20-039203-index.html\"\n  },\n  ...\n]",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/international-filings": {
      "get": {
        "summary": "International Filings",
        "description": "List filings for international companies. Limit to 250 documents at a time. These are the documents we use to source our fundamental data. Only support SEDAR and UK Companies House for normal usage. Enterprise clients who need access to the full filings for global markets should contact us for the access.",
        "operationId": "international-filings",
        "navHeader": "International Filings",
        "urlId": "international-filings",
        "title": "Global Company Filings",
        "examples": [
          {
            "url": "/stock/international-filings?symbol=RY.TO&token=<token>",
            "text": "/stock/international-filings?symbol=RY.TO"
          },
          {
            "url": "/stock/international-filings?country=CA&token=<token>",
            "text": "/stock/international-filings?country=CA"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Access approved on a case by case basis",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol. Leave empty to list latest filings.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "country",
            "description": "Filter by country using country's 2-letter code.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InternationalFiling"
              }
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.international_filings('AC.TO'))",
          "go": "res, _, err := finnhubClient.InternationalFilings(context.Background()).Symbol(\"AC.TO\").Execute()",
          "javascript": "finnhubClient.internationalFilings({\"symbol\": \"AC.TO\"}, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.international_filings({symbol: 'AC.TO'}))",
          "kotlin": "println(apiClient.internationalFilings(\"AC.TO\", \"\"))",
          "php": "print_r($client->internationalFilings(\"AC.TO\"));",
          "useTemplate": true
        },
        "sampleResponse": "[\n  {\n    \"symbol\": \"MINDTREE.NS\",\n    \"companyName\": \"MindTree Limited\",\n    \"filedDate\": \"2015-03-31 20:27:00\",\n    \"category\": \"Resignation of Director\",\n    \"title\": \"MindTree Limited has informed the Exchange that Mr. David B Yoffie has resigned as Independent Director of the company. The Board of Directors have accepted his resignation effective March 30, 2015.\",\n    \"description\": \"\",\n    \"url\": \"https://finnhub.io/international-filings?id=523566\",\n    \"language\": \"en\",\n    \"country\": \"IN\"\n  },\n  {\n    \"symbol\": \"INOXLEISUR.NS\",\n    \"companyName\": \"INOX Leisure Limited\",\n    \"filedDate\": \"2015-03-31 20:24:00\",\n    \"category\": \"Updates\",\n    \"title\": \"INOX Leisure Limited has informed the Exchange regarding Commencement of Commercial Operations of Multiplex Cinema Theatre situated at E-wing, Osia Commercial Arcade, SGPDA Market Complex, Margao, Goa 403601.\",\n    \"description\": \"\",\n    \"url\": \"https://finnhub.io/international-filings?id=52152\",\n    \"language\": \"en\",\n    \"country\": \"IN\"\n  }\n]",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/filings-sentiment": {
      "get": {
        "summary": "SEC Sentiment Analysis",
        "description": "Get sentiment analysis of 10-K and 10-Q filings from SEC. An abnormal increase in the number of positive/negative words in filings can signal a significant change in the company's stock price in the upcoming 4 quarters. We make use of <a href= \"https://sraf.nd.edu/textual-analysis/resources/\" target=\"_blank\">Loughran and McDonald Sentiment Word Lists</a> to calculate the sentiment for each filing.",
        "operationId": "filings-sentiment",
        "navHeader": "SEC Sentiment Analysis",
        "urlId": "filings-sentiment",
        "title": "Sec Filings Sentiment Analysis",
        "examples": [
          {
            "url": "/stock/filings-sentiment?accessNumber=0000320193-20-000052&token=<token>",
            "text": "/stock/filings-sentiment?accessNumber=0000320193-20-000052"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "accessNumber",
            "description": "Access number of a specific report you want to retrieve data from.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SECSentimentAnalysis"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.sec_sentiment_analysis('0000320193-20-000052'))",
          "go": "res, _, err := finnhubClient.FilingsSentiment(context.Background()).AccessNumber(\"0000320193-20-000052\").Execute()",
          "javascript": "finnhubClient.filingsSentiment('0000320193-20-000052', (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.filings_sentiment('0000320193-20-000052', {}))",
          "kotlin": "println(apiClient.filingsSentiment(\"0000320193-20-000052\"))",
          "php": "print_r($client->filingsSentiment(\"0000320193-20-000052\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"cik\": \"320193\",\n  \"symbol\": \"AAPL\",\n  \"accessNumber\": \"0000320193-20-000052\",\n  \"sentiment\": {\n    \"negative\": 1.2698412698412698,\n    \"polarity\": -0.1147540479911535,\n    \"positive\": 0.5042016806722689,\n    \"litigious\": 0.2427637721755369,\n    \"modal-weak\": 0.392156862745098,\n    \"uncertainty\": 1.1391223155929038,\n    \"constraining\": 0.5975723622782446,\n    \"modal-strong\": 0.14939309056956115,\n    \"modal-moderate\": 0.11204481792717086\n  }\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/similarity-index": {
      "get": {
        "summary": "Similarity Index",
        "description": "<p>Calculate the textual difference between a company's 10-K / 10-Q reports and the same type of report in the previous year using Cosine Similarity. For example, this endpoint compares 2019's 10-K with 2018's 10-K. Companies breaking from its routines in disclosure of financial condition and risk analysis section can signal a significant change in the company's stock price in the upcoming 4 quarters.</p>",
        "operationId": "similarity-index",
        "navHeader": "Similarity Index",
        "urlId": "similarity-index",
        "title": "SEC Filings - Similarity Index Analysis",
        "examples": [
          {
            "url": "/stock/similarity-index?symbol=AAPL&freq=annual&token=<token>",
            "text": "/stock/similarity-index?symbol=AAPL&freq=annual"
          },
          {
            "url": "/stock/similarity-index?cik=320193&freq=quarterly&token=<token>",
            "text": "/stock/similarity-index?cik=320193&freq=quarterly"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol. Required if cik is empty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "cik",
            "description": "CIK. Required if symbol is empty",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "freq",
            "description": "<code>annual</code> or <code>quarterly</code>. Default to <code>annual</code>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SimilarityIndex"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.sec_similarity_index('AAPL'))",
          "go": "res, _, err := finnhubClient.SimilarityIndex(context.Background()).Symbol(\"AAPL\").Execute()",
          "javascript": "finnhubClient.similarityIndex({\"symbol\": \"AAPL\"}, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.similarity_index({symbol: 'AAPL'}))",
          "kotlin": "println(apiClient.similarityIndex(\"AAPL\", \"\", \"annual\"))",
          "php": "print_r($client->similarityIndex(\"AAPL\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"cik\": \"320193\",\n  \"similarity\": [\n    {\n      \"cik\": \"320193\",\n      \"accessNumber\": \"0000320193-19-000119\",\n      \"item1\": 0.8833750347608914,\n      \"item2\": 0,\n      \"item1a\": 0.994836154829746,\n      \"item7\": 0.897030072745,\n      \"item7a\": 0.9843052590436008,\n      \"form\": \"10-K\",\n      \"reportUrl\": \"https://www.sec.gov/ix?doc=/Archives/edgar/data/320193/000032019319000119/a10-k20199282019.htm\",\n      \"filingUrl\": \"https://www.sec.gov/Archives/edgar/data/320193/000032019319000119/0000320193-19-000119-index.html\",\n      \"filedDate\": \"2019-10-31 00:00:00\",\n      \"acceptedDate\": \"2019-10-30 18:12:36\"\n    },\n    {\n      \"cik\": \"320193\",\n      \"accessNumber\": \"0000320193-18-000145\",\n      \"item1\": 0.9737784696339462,\n      \"item2\": 0,\n      \"item1a\": 0.9931651573630014,\n      \"item7\": 0.9441063774798184,\n      \"item7a\": 0.9856181212005336,\n      \"form\": \"10-K\",\n      \"reportUrl\": \"https://www.sec.gov/Archives/edgar/data/320193/000032019318000145/a10-k20189292018.htm\",\n      \"filingUrl\": \"https://www.sec.gov/Archives/edgar/data/320193/000032019318000145/0000320193-18-000145-index.html\",\n      \"filedDate\": \"2018-11-05 00:00:00\",\n      \"acceptedDate\": \"2018-11-05 08:01:40\"\n    }\n  ],\n  \"symbol\": \"AAPL\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/calendar/ipo": {
      "get": {
        "summary": "IPO Calendar",
        "description": "Get recent and upcoming IPO.",
        "operationId": "ipo-calendar",
        "navHeader": "IPO Calendar",
        "urlId": "ipo-calendar",
        "title": "IPO Calendar API",
        "examples": [
          {
            "url": "/calendar/ipo?from=2020-01-01&to=2020-04-30&token=<token>",
            "text": "/calendar/ipo?from=2020-01-01&to=2020-04-30"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": null,
        "newEndpoint": "New Endpoint",
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "description": "From date: 2020-03-15.",
            "required": true,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "to",
            "description": "To date: 2020-03-16.",
            "required": true,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IPOCalendar"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.ipo_calendar(_from=\"2020-05-01\", to=\"2020-06-01\"))",
          "go": "res, _, err := finnhubClient.IpoCalendar(context.Background()).From(\"2021-01-01\").To(\"2021-06-30\").Execute()",
          "javascript": "finnhubClient.ipoCalendar(\"2020-01-01\", \"2020-06-15\", (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.ipo_calendar(\"2020-05-01\", \"2020-06-01\"))",
          "kotlin": "println(apiClient.ipoCalendar(from = \"2020-05-01\", to = \"2020-06-01\"))",
          "php": "print_r($client->ipoCalendar(\"2020-05-01\", \"2020-06-01\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"ipoCalendar\": [\n    {\n      \"date\": \"2020-04-03\",\n      \"exchange\": \"NASDAQ Global\",\n      \"name\": \"ZENTALIS PHARMACEUTICALS, LLC\",\n      \"numberOfShares\": 7650000,\n      \"price\": \"16.00-18.00\",\n      \"status\": \"expected\",\n      \"symbol\": \"ZNTL\",\n      \"totalSharesValue\": 158355000\n    },\n    {\n      \"date\": \"2020-04-01\",\n      \"exchange\": \"NASDAQ Global\",\n      \"name\": \"WIMI HOLOGRAM CLOUD INC.\",\n      \"numberOfShares\": 5000000,\n      \"price\": \"5.50-7.50\",\n      \"status\": \"expected\",\n      \"symbol\": \"WIMI\",\n      \"totalSharesValue\": 43125000\n    },\n  ]\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/sector/metrics": {
      "get": {
        "summary": "Sector Metrics",
        "description": "Get ratios for different sectors and regions/indices.",
        "operationId": "sector-metric",
        "navHeader": "Sector Metrics",
        "urlId": "sector-metrics",
        "title": "Get ratios for different sectors and regions/indices (S&P500, Nasdaq 100).",
        "examples": [
          {
            "url": "/sector/metrics?region=NA&token=<token>",
            "text": "/sector/metrics?region=NA"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "region",
            "description": "Region. A list of supported values for this field can be found <a href=\"https://docs.google.com/spreadsheets/d/1afedyv7yWJ-z7pMjaAZK-f6ENY3mI3EBCk95QffpoHw/edit?usp=sharing\" target=\"_blank\">here</a>.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SectorMetric"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.sector_metric('NA'))",
          "go": "res, _, err := finnhubClient.SectorMetric(context.Background()).Region(\"NA\").Execute()",
          "javascript": "finnhubClient.sectorMetric(\"NA\", (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.sector_metric('NA'))",
          "kotlin": "println(apiClient.sectorMetric(\"NA\"))",
          "php": "print_r($client->sectorMetric(\"NA\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"data\": [\n    {\n      \"metrics\": {\n        \"assetTurnoverAnnual\": {\n          \"a\": 0.7245,\n          \"m\": 0.5426\n        },\n        \"assetTurnoverTTM\": {\n          \"a\": 0.7254,\n          \"m\": 0.5463\n        },\n      },\n      \"sector\": \"Communication Services\"\n    },\n    {\n      \"metrics\": {\n        \"currentDividendYieldTTM\": {\n          \"a\": 30.9763,\n          \"m\": 2.09\n        },\n        \"currentEv/freeCashFlowAnnual\": {\n          \"a\": 286.4793,\n          \"m\": 19.8488\n        },\n      },\n      \"sector\": \"Consumer Discretionary\"\n    }\n  ],\n  \"region\": \"Asia_Ocenia\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/dividend": {
      "get": {
        "summary": "Dividends",
        "description": "Get dividends data for common stocks going back 30 years.",
        "operationId": "stock-dividends",
        "navHeader": "Dividends",
        "urlId": "stock-dividends",
        "title": "Global Stocks Dividends API",
        "examples": [
          {
            "url": "/stock/dividend?symbol=AAPL&from=2019-02-01&to=2020-02-01&token=<token>",
            "text": "/stock/dividend?symbol=AAPL&from=2019-02-01&to=2020-02-01"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Fundamentals",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "from",
            "description": "YYYY-MM-DD.",
            "required": true,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "to",
            "description": "YYYY-MM-DD.",
            "required": true,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Dividends"
              }
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.stock_dividends('KO', _from='2019-01-01', to='2020-01-01'))",
          "go": "res, _, err := finnhubClient.StockDividends(context.Background()).Symbol(\"KO\").From(\"2019-01-01\").To(\"2021-01-01\").Execute()",
          "javascript": "finnhubClient.stockDividends(\"KO\", \"2019-01-01\", \"2020-06-30\", (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.stock_dividends('KO', '2019-01-01', '2020-01-01'))",
          "kotlin": "println(apiClient.stockDividends(\"KO\", from = \"2019-01-01\", to = \"2020-01-01\"))",
          "php": "print_r($client->stockDividends(\"KO\", \"2019-01-01\", \"2020-01-01\"));",
          "useTemplate": true
        },
        "sampleResponse": "[\n  {\n    \"symbol\": \"AAPL\",\n    \"date\": \"2019-11-07\",\n    \"amount\": 0.77,\n    \"adjustedAmount\": 0.77,\n    \"payDate\": \"2019-11-14\",\n    \"recordDate\": \"2019-11-11\",\n    \"declarationDate\": \"2019-10-30\",\n    \"currency\": \"USD\"\n  },\n  {\n    \"symbol\": \"AAPL\",\n    \"date\": \"2019-08-09\",\n    \"amount\": 0.77,\n    \"adjustedAmount\": 0.77,\n    \"payDate\": \"2019-08-15\",\n    \"recordDate\": \"2019-08-12\",\n    \"declarationDate\": \"2019-07-30\",\n    \"currency\": \"USD\"\n  },\n  {\n    \"symbol\": \"AAPL\",\n    \"date\": \"2019-05-10\",\n    \"amount\": 0.77,\n    \"adjustedAmount\": 0.77,\n    \"payDate\": \"2019-05-16\",\n    \"recordDate\": \"2019-05-13\",\n    \"declarationDate\": \"2019-05-01\",\n    \"currency\": \"USD\"\n  },\n  {\n    \"symbol\": \"AAPL\",\n    \"date\": \"2019-02-08\",\n    \"amount\": 0.73,\n    \"adjustedAmount\": 0.77,\n    \"payDate\": \"2019-02-14\",\n    \"recordDate\": \"2019-02-11\",\n    \"declarationDate\": \"2019-01-29\",\n    \"currency\": \"USD\"\n  }\n]",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/recommendation": {
      "get": {
        "summary": "Recommendation Trends",
        "description": "Get latest analyst recommendation trends for a company.",
        "operationId": "recommendation-trends",
        "navHeader": "Recommendation Trends",
        "urlId": "recommendation-trends",
        "title": "Analysts Recommendation Trends",
        "examples": [
          {
            "url": "/stock/recommendation?symbol=AAPL&token=<token>",
            "text": "/stock/recommendation?symbol=AAPL"
          },
          {
            "url": "/stock/recommendation?symbol=TSLA&token=<token>",
            "text": "/stock/recommendation?symbol=TSLA"
          }
        ],
        "widget": {
          "url": "https://widget.finnhub.io/widgets/recommendation?symbol=AAPL"
        },
        "freeTier": null,
        "premium": null,
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Estimates",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol of the company: AAPL.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RecommendationTrend"
              }
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.recommendation_trends('AAPL'))",
          "go": "res, _, err := finnhubClient.RecommendationTrends(context.Background()).Symbol(\"AAPL\").Execute()",
          "javascript": "finnhubClient.recommendationTrends('AAPL', (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.recommendation_trends('AAPL'))",
          "kotlin": "println(apiClient.recommendationTrends(\"AAPL\"))",
          "php": "print_r($client->recommendationTrends(\"AAPL\"));",
          "useTemplate": true
        },
        "sampleResponse": "[\n  {\n    \"buy\": 24,\n    \"hold\": 7,\n    \"period\": \"2020-03-01\",\n    \"sell\": 0,\n    \"strongBuy\": 13,\n    \"strongSell\": 0,\n    \"symbol\": \"AAPL\"\n  },\n  {\n    \"buy\": 17,\n    \"hold\": 13,\n    \"period\": \"2020-02-01\",\n    \"sell\": 5,\n    \"strongBuy\": 13,\n    \"strongSell\": 0,\n    \"symbol\": \"AAPL\"\n  }\n]",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/price-target": {
      "get": {
        "summary": "Price Target",
        "description": "Get latest price target consensus.",
        "operationId": "price-target",
        "navHeader": "Price Target",
        "urlId": "price-target",
        "title": "Stocks Price Target",
        "examples": [
          {
            "url": "/stock/price-target?symbol=NFLX&token=<token>",
            "text": "/stock/price-target?symbol=NFLX"
          },
          {
            "url": "/stock/price-target?symbol=DIS&token=<token>",
            "text": "/stock/price-target?symbol=DIS"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium required.",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Estimates",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol of the company: AAPL.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/PriceTarget"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.price_target('AAPL'))",
          "go": "res, _, err := finnhubClient.PriceTarget(context.Background()).Symbol(\"AAPL\").Execute()",
          "javascript": "finnhubClient.priceTarget('AAPL', (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.price_target('AAPL'))",
          "kotlin": "println(apiClient.priceTarget(\"AAPL\"))",
          "php": "print_r($client->priceTarget(\"AAPL\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"lastUpdated\": \"2019-06-03 00:00:00\",\n  \"symbol\": \"NFLX\",\n  \"targetHigh\": 500,\n  \"targetLow\": 166,\n  \"targetMean\": 387.03,\n  \"targetMedian\": 417.5\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/upgrade-downgrade": {
      "get": {
        "summary": "Stock Upgrade/Downgrade",
        "description": "Get latest stock upgrade and downgrade.",
        "operationId": "upgrade-downgrade",
        "navHeader": "Upgrade Downgrade",
        "urlId": "upgrade-downgrade",
        "title": "Real-time Stocks Upgrade/Downgrade",
        "examples": [
          {
            "url": "/stock/upgrade-downgrade?symbol=AAPL&token=<token>",
            "text": "/stock/upgrade-downgrade?symbol=AAPL"
          },
          {
            "url": "/stock/upgrade-downgrade?symbol=BYND&token=<token>",
            "text": "/stock/upgrade-downgrade?symbol=BYND"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Estimates",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol of the company: AAPL. If left blank, the API will return latest stock upgrades/downgrades.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "from",
            "description": "From date: 2000-03-15.",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "to",
            "description": "To date: 2020-03-16.",
            "required": false,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UpgradeDowngrade"
              }
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.upgrade_downgrade(symbol='AAPL', _from='2020-01-01', to='2020-06-30'))",
          "go": "res, _, err := finnhubClient.UpgradeDowngrade(context.Background()).Symbol(\"AAPL\").Execute()",
          "javascript": "finnhubClient.upgradeDowngrade({\"symbol\": \"AAPL\"}, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.upgrade_downgrade({symbol: 'AAPL', from: '2020-01-01', to: '2020-06-30'}))",
          "kotlin": "println(apiClient.upgradeDowngrade(symbol = \"AAPL\", from = \"2020-01-01\", to = \"2020-06-30\"))",
          "php": "print_r($client->upgradeDowngrade(\"AAPL\", \"2020-01-01\", \"2020-06-30\"));",
          "useTemplate": true
        },
        "sampleResponse": "[\n  {\n    \"symbol\": \"BYND\",\n    \"gradeTime\": 1567728000,\n    \"company\": \"DA Davidson\",\n    \"fromGrade\": \"\",\n    \"toGrade\": \"Underperform\",\n    \"action\": \"init\"\n  },\n  {\n    \"symbol\": \"BYND\",\n    \"gradeTime\": 1566259200,\n    \"company\": \"JP Morgan\",\n    \"fromGrade\": \"Neutral\",\n    \"toGrade\": \"Overweight\",\n    \"action\": \"up\"\n  },\n  {\n    \"symbol\": \"BYND\",\n    \"gradeTime\": 1564704000,\n    \"company\": \"Bank of America\",\n    \"fromGrade\": \"\",\n    \"toGrade\": \"Neutral\",\n    \"action\": \"reit\"\n  }\n]",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/revenue-estimate": {
      "get": {
        "summary": "Revenue Estimates",
        "description": "Get company's revenue estimates.",
        "operationId": "company-revenue-estimates",
        "navHeader": "Revenue Estimates",
        "urlId": "company-revenue-estimates",
        "title": "Global Company Revenue Estimates",
        "examples": [
          {
            "url": "/stock/revenue-estimate?symbol=AAPL&token=<token>",
            "text": "/stock/revenue-estimate?symbol=AAPL"
          },
          {
            "url": "/stock/revenue-estimate?symbol=TSLA&freq=annual&token=<token>",
            "text": "/stock/revenue-estimate?symbol=TSLA&freq=annual"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Estimates",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol of the company: AAPL.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "freq",
            "description": "Can take 1 of the following values: <code>annual, quarterly</code>. Default to <code>quarterly</code>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/RevenueEstimates"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.company_revenue_estimates('TSLA', freq='quarterly'))",
          "go": "res, _, err := finnhubClient.CompanyRevenueEstimates(context.Background()).Symbol(\"AAPL\").Execute()",
          "javascript": "finnhubClient.companyRevenueEstimates(\"AAPL\", {}, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.company_revenue_estimates('TSLA', {freq: 'quarterly'}))",
          "kotlin": "println(apiClient.companyRevenueEstimates(\"TSLA\", freq = \"quarterly\"))",
          "php": "print_r($client->companyRevenueEstimates(\"TSLA\", \"quarterly\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"data\": [\n    {\n      \"numberAnalysts\": 31,\n      \"period\": \"2020-06-30\",\n      \"revenueAvg\": 58800500000,\n      \"revenueHigh\": 64060000000,\n      \"revenueLow\": 54072000000\n    },\n    {\n      \"numberAnalysts\": 31,\n      \"period\": \"2020-03-31\",\n      \"revenueAvg\": 61287300000,\n      \"revenueHigh\": 66557000000,\n      \"revenueLow\": 54871000000\n    }\n  ],\n  \"freq\": \"quarterly\",\n  \"symbol\": \"AAPL\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/ebitda-estimate": {
      "get": {
        "summary": "EBITDA Estimates",
        "description": "Get company's ebitda estimates.",
        "operationId": "company-ebitda-estimates",
        "navHeader": "EBITDA Estimates",
        "urlId": "company-ebitda-estimates",
        "title": "Global Company Ebitda Estimates",
        "examples": [
          {
            "url": "/stock/ebitda-estimate?symbol=AAPL&token=<token>",
            "text": "/stock/ebitda-estimate?symbol=AAPL"
          },
          {
            "url": "/stock/ebitda-estimate?symbol=TSLA&freq=annual&token=<token>",
            "text": "/stock/ebitda-estimate?symbol=TSLA&freq=annual"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Estimates",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol of the company: AAPL.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "freq",
            "description": "Can take 1 of the following values: <code>annual, quarterly</code>. Default to <code>quarterly</code>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/EbitdaEstimates"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.company_ebitda_estimates('TSLA', freq='quarterly'))",
          "go": "res, _, err := finnhubClient.CompanyEbitdaEstimates(context.Background()).Symbol(\"AAPL\").Execute()",
          "javascript": "finnhubClient.companyEbitdaEstimates(\"AAPL\", {}, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.company_ebitda_estimates('TSLA', {freq: 'quarterly'}))",
          "kotlin": "println(apiClient.companyEbitdaEstimates(\"TSLA\", freq = \"quarterly\"))",
          "php": "print_r($client->companyEbitdaEstimates(\"TSLA\", \"quarterly\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"data\": [\n    {\n      \"numberAnalysts\": 31,\n      \"period\": \"2020-06-30\",\n      \"ebitdaAvg\": 58800500000,\n      \"ebitdaHigh\": 64060000000,\n      \"ebitdaLow\": 54072000000\n    },\n    {\n      \"numberAnalysts\": 31,\n      \"period\": \"2020-03-31\",\n      \"ebitdaAvg\": 61287300000,\n      \"ebitdaHigh\": 66557000000,\n      \"ebitdaLow\": 54871000000\n    }\n  ],\n  \"freq\": \"quarterly\",\n  \"symbol\": \"AAPL\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/ebit-estimate": {
      "get": {
        "summary": "EBIT Estimates",
        "description": "Get company's ebit estimates.",
        "operationId": "company-ebit-estimates",
        "navHeader": "EBIT Estimates",
        "urlId": "company-ebit-estimates",
        "title": "Global Company Ebit Estimates",
        "examples": [
          {
            "url": "/stock/ebit-estimate?symbol=AAPL&token=<token>",
            "text": "/stock/ebit-estimate?symbol=AAPL"
          },
          {
            "url": "/stock/ebit-estimate?symbol=TSLA&freq=annual&token=<token>",
            "text": "/stock/ebit-estimate?symbol=TSLA&freq=annual"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Estimates",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol of the company: AAPL.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "freq",
            "description": "Can take 1 of the following values: <code>annual, quarterly</code>. Default to <code>quarterly</code>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/EbitEstimates"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.company_ebit_estimates('TSLA', freq='quarterly'))",
          "go": "res, _, err := finnhubClient.CompanyEbitEstimates(context.Background()).Symbol(\"AAPL\").Execute()",
          "javascript": "finnhubClient.companyEbitEstimates(\"AAPL\", {}, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.company_ebit_estimates('TSLA', {freq: 'quarterly'}))",
          "kotlin": "println(apiClient.companyEbitEstimates(\"TSLA\", freq = \"quarterly\"))",
          "php": "print_r($client->companyEbitEstimates(\"TSLA\", \"quarterly\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"data\": [\n    {\n      \"numberAnalysts\": 31,\n      \"period\": \"2020-06-30\",\n      \"ebitAvg\": 58800500000,\n      \"ebitHigh\": 64060000000,\n      \"ebitLow\": 54072000000\n    },\n    {\n      \"numberAnalysts\": 31,\n      \"period\": \"2020-03-31\",\n      \"ebitAvg\": 61287300000,\n      \"ebitHigh\": 66557000000,\n      \"ebitLow\": 54871000000\n    }\n  ],\n  \"freq\": \"quarterly\",\n  \"symbol\": \"AAPL\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/eps-estimate": {
      "get": {
        "summary": "Earnings Estimates",
        "description": "Get company's EPS estimates.",
        "operationId": "company-eps-estimates",
        "navHeader": "EPS Estimates",
        "urlId": "company-eps-estimates",
        "title": "Global Company EPS Estimates",
        "examples": [
          {
            "url": "/stock/eps-estimate?symbol=AAPL&token=<token>",
            "text": "/stock/eps-estimate?symbol=AAPL"
          },
          {
            "url": "/stock/eps-estimate?symbol=AMZN&freq=annual&token=<token>",
            "text": "/stock/eps-estimate?symbol=AMZN&freq=annual"
          }
        ],
        "widget": {
          "url": "https://widget.finnhub.io/widgets/eps-estimate?symbol=AAPL"
        },
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Estimates",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol of the company: AAPL.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "freq",
            "description": "Can take 1 of the following values: <code>annual, quarterly</code>. Default to <code>quarterly</code>",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/EarningsEstimates"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.company_eps_estimates('AAPL', freq='quarterly'))",
          "go": "res, _, err := finnhubClient.CompanyEpsEstimates(context.Background()).Symbol(\"AAPL\").Execute()",
          "javascript": "finnhubClient.companyEpsEstimates(\"AAPL\", {}, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.company_eps_estimates('AAPL', {freq: 'quarterly'}))",
          "kotlin": "println(apiClient.companyEpsEstimates(\"AAPL\", freq = \"quarterly\"))",
          "php": "print_r($client->companyEpsEstimates(\"AAPL\", \"quarterly\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"data\": [\n    {\n      \"epsAvg\": 2.65,\n      \"epsHigh\": 2.98,\n      \"epsLow\": 2.05,\n      \"numberAnalysts\": 35,\n      \"period\": \"2020-06-30\"\n    },\n    {\n      \"epsAvg\": 2.52,\n      \"epsHigh\": 3.02,\n      \"epsLow\": 2.21,\n      \"numberAnalysts\": 34,\n      \"period\": \"2020-03-31\"\n    }\n  ],\n  \"freq\": \"quarterly\",\n  \"symbol\": \"AAPL\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/earnings": {
      "get": {
        "summary": "Earnings Surprises",
        "description": "Get company historical quarterly earnings surprise going back to 2000.",
        "operationId": "company-earnings",
        "navHeader": "EPS Surprises",
        "urlId": "company-earnings",
        "title": "Global Company EPS Surprises",
        "examples": [
          {
            "url": "/stock/earnings?symbol=AAPL&token=<token>",
            "text": "/stock/earnings?symbol=AAPL"
          },
          {
            "url": "/stock/earnings?symbol=TSLA&token=<token>",
            "text": "/stock/earnings?symbol=TSLA"
          }
        ],
        "widget": {
          "url": "https://widget.finnhub.io/widgets/historical-eps?symbol=AAPL"
        },
        "freeTier": "Last 4 quarters",
        "premium": null,
        "newEndpoint": null,
        "highUsage": "High Usage",
        "tags": [
          "Default"
        ],
        "section": "Stock Estimates",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol of the company: AAPL.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit number of period returned. Leave blank to get the full history.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EarningResult"
              }
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.company_earnings('TSLA', limit=5))",
          "go": "res, _, err := finnhubClient.CompanyEarnings(context.Background()).Symbol(\"AAPL\").Execute()",
          "javascript": "finnhubClient.companyEarnings(\"AAPL\", {'limit': 10}, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.company_earnings('TSLA', {limit: 5}))",
          "kotlin": "println(apiClient.companyEarnings(\"TSLA\", limit = 5))",
          "php": "print_r($client->companyEarnings(\"TSLA\", 5));",
          "useTemplate": true
        },
        "sampleResponse": "[\n  {\n    \"actual\": 2.56,\n    \"estimate\": 2.38,\n    \"period\": \"2019-03-31\",\n    \"symbol\": \"AAPL\"\n  },\n  {\n    \"actual\": 4.21,\n    \"estimate\": 4.15,\n    \"period\": \"2018-12-31\",\n    \"symbol\": \"AAPL\"\n  },\n  {\n    \"actual\": 2.88,\n    \"estimate\": 2.75,\n    \"period\": \"2018-09-30\",\n    \"symbol\": \"AAPL\"\n  },\n  {\n    \"actual\": 2.32,\n    \"estimate\": 2.11,\n    \"period\": \"2018-06-30\",\n    \"symbol\": \"AAPL\"\n  }\n]",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/calendar/earnings": {
      "get": {
        "summary": "Earnings Calendar",
        "description": "Get historical and coming earnings release. EPS and Revenue in this endpoint are non-GAAP, which means they are adjusted to exclude some one-time or unusual items. This is the same data investors usually react to and talked about on the media. Estimates are sourced from both sell-side and buy-side analysts.",
        "operationId": "earnings-calendar",
        "navHeader": "Earnings Calendar",
        "urlId": "earnings-calendar",
        "title": "Earnings Calendar API | Finnhub Stock API",
        "examples": [
          {
            "url": "/calendar/earnings?from=2022-02-01&to=2022-02-10&token=<token>",
            "text": "/calendar/earnings?from=2022-02-01&to=2022-02-10"
          },
          {
            "url": "/calendar/earnings?from=2021-03-01&to=2021-03-09&symbol=AAPL&token=<token>",
            "text": "/calendar/earnings?from=2021-03-01&to=2021-03-09&symbol=AAPL"
          }
        ],
        "widget": null,
        "freeTier": "1 month of historical earnings and new updates",
        "premium": null,
        "newEndpoint": "New Endpoint",
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Estimates",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "description": "From date: 2020-03-15.",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "to",
            "description": "To date: 2020-03-16.",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "symbol",
            "description": "Filter by symbol: AAPL.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "international",
            "description": "Set to <code>true</code> to include international markets. Default value is <code>false</code>",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/EarningsCalendar"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.earnings_calendar(_from=\"2021-06-10\", to=\"2021-06-30\", symbol=\"\", international=False))",
          "go": "res, _, err := finnhubClient.EarningsCalendar(context.Background()).From(\"2021-07-01\").To(\"2021-07-30\").Execute()",
          "javascript": "finnhubClient.earningsCalendar({\"from\": \"2021-06-01\", \"to\": \"2021-06-30\"}, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.earnings_calendar({from: \"2021-06-10\", to: \"2021-06-30\", symbol: \"\", international: false}))",
          "kotlin": "println(apiClient.earningsCalendar(from = \"2020-06-10\", to = \"2020-06-30\", symbol = \"\", international = false))",
          "php": "print_r($client->earningsCalendar(\"2020-06-10\", \"2020-06-30\", null, false));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"earningsCalendar\": [\n    {\n      \"date\": \"2020-01-28\",\n      \"epsActual\": 4.99,\n      \"epsEstimate\": 4.5474,\n      \"hour\": \"amc\",\n      \"quarter\": 1,\n      \"revenueActual\": 91819000000,\n      \"revenueEstimate\": 88496400810,\n      \"symbol\": \"AAPL\",\n      \"year\": 2020\n    },\n    {\n      \"date\": \"2019-10-30\",\n      \"epsActual\": 3.03,\n      \"epsEstimate\": 2.8393,\n      \"hour\": \"amc\",\n      \"quarter\": 4,\n      \"revenueActual\": 64040000000,\n      \"revenueEstimate\": 62985161760,\n      \"symbol\": \"AAPL\",\n      \"year\": 2019\n    }\n   ]\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/quote": {
      "get": {
        "summary": "Quote",
        "description": "<p>Get real-time quote data for US stocks. Constant polling is not recommended. Use websocket if you need real-time updates.</p><p>Real-time stock prices for international markets are supported for Enterprise clients via our partner's feed. <a href=\"mailto:support@finnhub.io\">Contact Us</a> to learn more.</p>",
        "operationId": "quote",
        "navHeader": "Quote",
        "urlId": "quote",
        "title": "Global Stocks, Forex, Crypto price",
        "examples": [
          {
            "url": "/quote?symbol=AAPL&token=<token>",
            "text": "/quote?symbol=AAPL"
          },
          {
            "url": "/quote?symbol=MSFT&token=<token>",
            "text": "/quote?symbol=MSFT"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": null,
        "newEndpoint": null,
        "highUsage": "High Usage",
        "tags": [
          "Default"
        ],
        "section": "Stock Price",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Quote"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.quote('AAPL'))",
          "go": "res, _, err := finnhubClient.Quote(context.Background()).Symbol(\"AAPL\").Execute()",
          "javascript": "finnhubClient.quote(\"AAPL\", (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.quote('AAPL'))",
          "kotlin": "println(apiClient.quote(\"AAPL\"))",
          "php": "print_r($client->quote(\"AAPL\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"c\": 261.74,\n  \"h\": 263.31,\n  \"l\": 260.68,\n  \"o\": 261.07,\n  \"pc\": 259.45,\n  \"t\": 1582641000 \n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/candle": {
      "get": {
        "summary": "Stock Candles",
        "description": "<p>Get candlestick data (OHLCV) for stocks.</p><p>Daily data will be adjusted for Splits. Intraday data will remain unadjusted.</p>",
        "operationId": "stock-candles",
        "navHeader": "Candles (OHLCV)",
        "urlId": "stock-candles",
        "title": "Global Stocks OHLCV data | Real-time , Delayed, End-of-day",
        "examples": [
          {
            "url": "/stock/candle?symbol=AAPL&resolution=1&from=1631022248&to=1631627048&token=<token>",
            "text": "/stock/candle?symbol=AAPL&resolution=1&from=1631022248&to=1631627048"
          },
          {
            "url": "/stock/candle?symbol=IBM&resolution=D&from=1572651390&to=1575243390&token=<token>",
            "text": "/stock/candle?symbol=IBM&resolution=D&from=1572651390&to=1575243390"
          }
        ],
        "widget": {
          "url": "https://widget.finnhub.io/widgets/stocks/chart?symbol=AAPL&watermarkColor=%231db954&backgroundColor=%23222222&textColor=white"
        },
        "freeTier": "1 year of historical data and new updates",
        "premium": null,
        "newEndpoint": null,
        "highUsage": "High Usage",
        "tags": [
          "Default"
        ],
        "section": "Stock Price",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "resolution",
            "description": "Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "from",
            "description": "UNIX timestamp. Interval initial value.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "to",
            "description": "UNIX timestamp. Interval end value.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/StockCandles"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.stock_candles('AAPL', 'D', 1590988249, 1591852249))",
          "go": "res, _, err := finnhubClient.StockCandles(context.Background()).Symbol(\"AAPL\").Resolution(\"D\").From(1590988249).To(1591852249).Execute()",
          "javascript": "finnhubClient.stockCandles(\"AAPL\", \"D\", 1590988249, 1591852249, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.stock_candles('AAPL', 'D', 1590988249, 1591852249))",
          "kotlin": "println(apiClient.stockCandles(\"AAPL\", \"D\", 1590988249, 1591852249))",
          "php": "print_r($client->stockCandles(\"AAPL\", \"D\", 1590988249, 1591852249));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"c\": [\n    217.68,\n    221.03,\n    219.89\n  ],\n  \"h\": [\n    222.49,\n    221.5,\n    220.94\n  ],\n  \"l\": [\n    217.19,\n    217.1402,\n    218.83\n  ],\n  \"o\": [\n    221.03,\n    218.55,\n    220\n  ],\n  \"s\": \"ok\",\n  \"t\": [\n    1569297600,\n    1569384000,\n    1569470400\n  ],\n  \"v\": [\n    33463820,\n    24018876,\n    20730608\n  ]\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/tick": {
      "get": {
        "summary": "Tick Data",
        "description": "<p>Get historical tick data for global exchanges. You can send the request directly to our tick server at <a href=\"https://tick.finnhub.io/\">https://tick.finnhub.io/</a> with the same path and parameters or get redirected there if you call our main server.</p><p>For US market, you can visit our bulk download page in the Dashboard <a target=\"_blank\" href=\"/dashboard/download\",>here</a> to speed up the download process.</p><table class=\"table table-hover\">\n  <thead>\n    <tr>\n      <th>Exchange</th>\n      <th>Segment</th>\n      <th>Delay</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td class=\"text-blue\">US CTA/UTP</th>\n      <td>Full SIP</td>\n      <td>15 minute</td>\n    </tr>\n    <tr>\n      <td class=\"text-blue\">TSX</th>\n      <td><ul><li>TSX</li><li>TSX Venture</li><li>Index</li></ul></td>\n      <td>End-of-day</td>\n    </tr>\n    <tr>\n      <td class=\"text-blue\">LSE</th>\n      <td><ul><li>London Stock Exchange (L)</li><li>LSE International (L)</li><li>LSE European (L)</li></ul></td>\n      <td>15 minute</td>\n    </tr>\n    <tr>\n      <td class=\"text-blue\">Euronext</th>\n      <td><ul> <li>Euronext Paris (PA)</li> <li>Euronext Amsterdam (AS)</li> <li>Euronext Lisbon (LS)</li> <li>Euronext Brussels (BR)</li> <li>Euronext Oslo (OL)</li> <li>Euronext London (LN)</li> <li>Euronext Dublin (IR)</li> <li>Index</li> <li>Warrant</li></ul></td>\n      <td>End-of-day</td>\n    </tr>\n    <tr>\n      <td class=\"text-blue\">Deutsche B\u00f6rse</th>\n      <td><ul> <li>Frankfurt (F)</li> <li>Xetra (DE)</li> <li>Duesseldorf (DU)</li> <li>Hamburg (HM)</li> <li>Berlin (BE)</li> <li>Hanover (HA)</li> <li>Stoxx (SX)</li> <li>TradeGate (TG)</li> <li>Zertifikate (SC)</li> <li>Index</li> <li>Warrant</li></ul></td>\n      <td>End-of-day</td>\n    </tr>\n  </tbody>\n</table>",
        "operationId": "stock-tick",
        "navHeader": "Tick/Trade Data",
        "urlId": "stock-tick",
        "title": "Global Stocks Tick Data",
        "examples": [
          {
            "url": "/stock/tick?symbol=AAPL&date=2021-03-09&limit=500&skip=0&format=json&token=<token>",
            "text": "/stock/tick?symbol=AAPL&date=2021-03-09&limit=500&skip=0&format=json"
          },
          {
            "url": "/stock/tick?symbol=AC.TO&date=2021-03-09&limit=500&skip=0&format=json&token=<token>",
            "text": "/stock/tick?symbol=AC.TO&date=2021-03-09&limit=500&skip=0&format=json"
          },
          {
            "url": "/stock/tick?symbol=BARC.L&date=2021-03-09&limit=500&skip=0&format=json&token=<token>",
            "text": "/stock/tick?symbol=BARC.L&date=2021-03-09&limit=500&skip=0&format=json"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Price",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "date",
            "description": "Date: 2020-04-02.",
            "required": true,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit number of ticks returned. Maximum value: <code>25000</code>",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of ticks to skip. Use this parameter to loop through the entire data.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TickData"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.stock_tick('AAPL', '2020-03-25', 500, 0))",
          "go": "res, _, err := finnhubClient.StockTick(context.Background()).Symbol(\"AAPL\").Date(\"2021-07-23\").Limit(50).Skip(0).Execute()",
          "javascript": "finnhubClient.stockTick(\"AAPL\", \"2020-03-25\", 500, 0, (error, data, response) => {\n  console.log(data);\n});",
          "ruby": "puts(finnhub_client.stock_tick('AAPL', '2020-03-25', 500, 0))",
          "kotlin": "println(apiClient.stockTick(\"AAPL\", \"2020-03-25\", 500, 0))",
          "php": "print_r($client->stockTick(\"AAPL\", \"2020-03-25\", 500, 0));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"p\": [\n    255,\n    255,\n    255\n  ],\n  \"s\": \"AAPL\",\n  \"skip\": 0,\n  \"t\": [\n    1585108800073,\n    1585108800315,\n    1585108800381\n  ],\n  \"v\": [\n    2513,\n    24,\n    1\n  ],\n  \"x\": [\n    \"P\",\n    \"P\",\n    \"P\"\n  ],\n  \"count\": 3,\n  \"c\":[[\"1\",\"24\"],[\"1\",\"24\",\"12\"],[\"1\",\"24\",\"12\"]]\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/bbo": {
      "get": {
        "summary": "Historical NBBO",
        "description": "<p>Get historical best bid and offer for US stocks, LSE, TSX, Euronext and Deutsche Borse.</p><p>For US market, this endpoint only serves historical NBBO from the beginning of 2020. To download more historical data, please visit our bulk download page in the Dashboard <a target=\"_blank\" href=\"/dashboard/download\",>here</a>.</p>",
        "operationId": "stock-nbbo",
        "navHeader": "Historical NBBO",
        "urlId": "stock-nbbo",
        "title": "Historical NBBO - Best bid/offer",
        "examples": [
          {
            "url": "/stock/bbo?symbol=AAPL&date=2021-03-09&limit=500&skip=0&format=json&token=<token>",
            "text": "/stock/bbo?symbol=AAPL&date=2021-03-09&limit=500&skip=0&format=json"
          },
          {
            "url": "/stock/bbo?symbol=AC.TO&date=2021-03-09&limit=500&skip=0&format=json&token=<token>",
            "text": "/stock/bbo?symbol=AC.TO&date=2021-03-09&limit=500&skip=0&format=json"
          },
          {
            "url": "/stock/bbo?symbol=BARC.L&date=2021-03-09&limit=500&skip=0&format=json&token=<token>",
            "text": "/stock/bbo?symbol=BARC.L&date=2021-03-09&limit=500&skip=0&format=json"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Price",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "date",
            "description": "Date: 2020-04-02.",
            "required": true,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit number of ticks returned. Maximum value: <code>25000</code>",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of ticks to skip. Use this parameter to loop through the entire data.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/HistoricalNBBO"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.stock_nbbo('AAPL', '2020-03-25', 500, 0))",
          "go": "res, _, err := finnhubClient.StockNbbo(context.Background()).Symbol(\"AAPL\").Date(\"2021-07-23\").Limit(50).Skip(0).Execute()",
          "javascript": "finnhubClient.stockNbbo(\"AAPL\", \"2020-03-25\", 500, 0, (error, data, response) => {\n  console.log(data);\n});",
          "ruby": "puts(finnhub_client.stock_nbbo('NFLX', '2020-03-25', 50, 0))",
          "kotlin": "println(apiClient.stockNbbo(\"AAPL\", \"2020-03-25\", 500, 0))",
          "php": "print_r($client->stockNbbo(\"AAPL\", \"2020-03-25\", 500, 0));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"a\": [\n    137,\n    133.2,\n    126.08\n  ],\n  \"av\": [\n    1,\n    2,\n    1\n  ],\n  \"ax\": [\n    \"P\",\n    \"P\",\n    \"P\"\n  ],\n  \"b\": [\n    116.5,\n    116.5,\n    116.5\n  ],\n  \"bv\": [\n    1,\n    1,\n    1\n  ],\n  \"bx\": [\n    \"P\",\n    \"P\",\n    \"P\"\n  ],\n  \"c\": [\n    [\n      \"1\"\n    ],\n    [\n      \"1\"\n    ],\n    [\n      \"1\"\n    ]\n  ],\n  \"count\": 3,\n  \"s\": \"AAPL\",\n  \"skip\": 5,\n  \"t\": [\n    1615280400047,\n    1615280400047,\n    1615280400047\n  ],\n  \"total\": 2739880\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/bidask": {
      "get": {
        "summary": "Last Bid-Ask",
        "description": "Get last bid/ask data for US stocks.",
        "operationId": "stock-bidask",
        "navHeader": "Last Bid-Ask",
        "urlId": "stock-bidask",
        "title": "Last Bid & Ask",
        "examples": [
          {
            "url": "/stock/bidask?symbol=AAPL&token=<token>",
            "text": "/stock/bidask?symbol=AAPL"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Price",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/LastBid-Ask"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.last_bid_ask('AAPL'))",
          "go": "res, _, err := finnhubClient.StockBidask(context.Background()).Symbol(\"AAPL\").Execute()",
          "javascript": "finnhubClient.stockBidask(\"AAPL\", (error, data, response) => {\n  console.log(data);\n});",
          "ruby": "puts(finnhub_client.stock_bidask('AAPL'))",
          "kotlin": "println(apiClient.stockBidask(\"AAPL\"))",
          "php": "print_r($client->stockBidask(\"AAPL\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"a\": 338.65,\n  \"av\": 2,\n  \"b\": 338.61,\n  \"bv\": 2,\n  \"t\": 1591995678874\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/split": {
      "get": {
        "summary": "Splits",
        "description": "Get splits data for stocks.",
        "operationId": "stock-splits",
        "navHeader": "Splits",
        "urlId": "stock-splits",
        "title": "Global Stocks Splits API",
        "examples": [
          {
            "url": "/stock/split?symbol=AAPL&from=2015-02-01&to=2021-03-09&token=<token>",
            "text": "/stock/split?symbol=AAPL&from=2015-02-01&to=2021-03-09"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium required.",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Price",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "from",
            "description": "YYYY-MM-DD.",
            "required": true,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "to",
            "description": "YYYY-MM-DD.",
            "required": true,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Split"
              }
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.stock_splits('AAPL', _from='2000-01-01', to='2020-01-01'))",
          "go": "res, _, err := finnhubClient.StockSplits(context.Background()).Symbol(\"AAPL\").From(\"2000-01-01\").To(\"2020-06-15\").Execute()",
          "javascript": "finnhubClient.stockSplits(\"AAPL\", \"2000-01-01\", \"2020-06-15\", (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.stock_splits('AAPL', '2000-01-01', '2020-01-01'))",
          "kotlin": "println(apiClient.stockSplits(symbol = \"AAPL\", from = \"2000-01-01\", to = \"2020-01-01\"))",
          "php": "print_r($client->stockSplits(\"AAPL\", \"2000-01-01\", \"2020-01-01\"));",
          "useTemplate": true
        },
        "sampleResponse": "[\n  {\n    \"symbol\": \"AAPL\",\n    \"date\": \"2014-06-09\",\n    \"fromFactor\": 1,\n    \"toFactor\": 7\n  }\n]",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/dividend2": {
      "get": {
        "summary": "Dividends 2 (Basic)",
        "description": "Get global dividends data.",
        "operationId": "stock-basic-dividends",
        "navHeader": "Dividends 2",
        "urlId": "stock-basic-dividends",
        "title": "Basic Dividends",
        "examples": [
          {
            "url": "/stock/dividend2?symbol=AAPL&token=<token>",
            "text": "/stock/dividend2?symbol=AAPL"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium required.",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Stock Price",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Dividends2"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.stock_basic_dividends('AAPL'))",
          "go": "res, _, err := finnhubClient.StockBasicDividends(context.Background()).Symbol(\"KO\").Execute()",
          "javascript": "finnhubClient.stockBasicDividends(\"KO\", (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.stock_basic_dividends('KO'))",
          "kotlin": "println(apiClient.stockBasicDividends(\"KO\"))",
          "php": "print_r($client->stockBasicDividends(\"KO\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"data\": [\n  {\n    \"exDate\": \"2019-11-07\",\n    \"amount\": 0.77,\n    \n  },\n  {\n    \"exDate\": \"2019-08-09\",\n    \"amount\": 0.77,\n  },\n  {\n    \"exDate\": \"2019-05-10\",\n    \"amount\": 0.77,\n  }\n],\n  \"symbol\": \"AAPL\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/index/constituents": {
      "get": {
        "summary": "Indices Constituents",
        "description": "Get a list of index's constituents. A list of supported indices for this endpoint can be found <a href=\"https://docs.google.com/spreadsheets/d/1Syr2eLielHWsorxkDEZXyc55d6bNx1M3ZeI4vdn7Qzo/edit?usp=sharing\" target=\"_blank\">here</a>.",
        "operationId": "indices-constituents",
        "navHeader": "Indices Constituents",
        "urlId": "indices-constituents",
        "title": "Indices Constituents API",
        "examples": [
          {
            "url": "/index/constituents?symbol=^GSPC&token=<token>",
            "text": "/index/constituents?symbol=^GSPC"
          },
          {
            "url": "/index/constituents?symbol=^NDX&token=<token>",
            "text": "/index/constituents?symbol=^NDX"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": null,
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "ETFs & Indices",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "symbol",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IndicesConstituents"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.indices_const(symbol = \"^GSPC\"))",
          "go": "res, _, err := finnhubClient.IndicesConstituents(context.Background()).Symbol(\"^GSPC\").Execute()",
          "javascript": "finnhubClient.indicesConstituents(\"^GSPC\", (error, data, response) => {\n  console.log(data);\n});",
          "ruby": "puts(finnhub_client.indices_constituents(\"^GSPC\"))",
          "kotlin": "println(apiClient.indicesConstituents(\"^GSPC\"))",
          "php": "print_r($client->indicesConstituents(\"^GSPC\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"constituents\": [\n    \"REGN\",\n    \"MAR\",\n    \"CERN\",\n    \"LBTYK\",\n    \"FAST\",\n  ],\n  \"symbol\": \"^NDX\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/index/historical-constituents": {
      "get": {
        "summary": "Indices Historical Constituents",
        "description": "Get full history of index's constituents including symbols and dates of joining and leaving the Index. Currently support <code>^GSPC</code>, <code>^NDX</code>, <code>^DJI</code>",
        "operationId": "indices-historical-constituents",
        "navHeader": "Historical Constituents",
        "urlId": "indices-historical-constituents",
        "title": "Indices Historical Constituents API | Join & Leave History",
        "examples": [
          {
            "url": "/index/historical-constituents?symbol=^GSPC&token=<token>",
            "text": "/index/historical-constituents?symbol=^GSPC"
          },
          {
            "url": "/index/historical-constituents?symbol=^NDX&token=<token>",
            "text": "/index/historical-constituents?symbol=^NDX"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium required.",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "ETFs & Indices",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "symbol",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/IndicesHistoricalConstituents"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.indices_hist_const(symbol = \"^GSPC\"))",
          "go": "res, _, err := finnhubClient.IndicesHistoricalConstituents(context.Background()).Symbol(\"^GSPC\").Execute()",
          "javascript": "finnhubClient.indicesHistoricalConstituents(\"^GSPC\", (error, data, response) => {\n  console.log(data);\n});",
          "ruby": "puts(finnhub_client.indices_historical_constituents(\"^GSPC\"))",
          "kotlin": "println(apiClient.indicesHistoricalConstituents(\"^GSPC\"))",
          "php": "print_r($client->indicesHistoricalConstituents(\"^GSPC\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"historicalConstituents\": [\n    {\n      \"action\": \"add\",\n      \"symbol\": \"TYL\",\n      \"date\": \"2020-06-22\"\n    },\n    {\n      \"action\": \"add\",\n      \"symbol\": \"TDY\",\n      \"date\": \"2020-06-22\"\n    },\n    {\n      \"action\": \"remove\",\n      \"symbol\": \"JWN\",\n      \"date\": \"2020-06-22\"\n    }\n  ],\n  \"symbol\": \"^GSPC\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/etf/profile": {
      "get": {
        "summary": "ETFs Profile",
        "description": "Get ETF profile information. This endpoint has global coverage.",
        "operationId": "etfs-profile",
        "navHeader": "ETFs Profile",
        "urlId": "etfs-profile",
        "title": "Global ETFs profile",
        "examples": [
          {
            "url": "/etf/profile?symbol=ARKK&token=<token>",
            "text": "/etf/profile?symbol=ARKK"
          },
          {
            "url": "/etf/profile?isin=US78462F1030&token=<token>",
            "text": "/etf/profile?isin=US78462F1030"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium required.",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "ETFs & Indices",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "ETF symbol.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "isin",
            "description": "ETF isin.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ETFsProfile"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.etfs_profile('SPY'))",
          "go": "res, _, err := finnhubClient.EtfsProfile(context.Background()).Symbol(\"SPY\").Execute()",
          "javascript": "finnhubClient.etfsProfile({'symbol': 'SPY'}, (error, data, response) => {\n  console.log(data);\n});",
          "ruby": "puts(finnhub_client.etfs_profile({symbol:'SPY'}))",
          "kotlin": "println(apiClient.etfsProfile(\"SPY\", \"\"))",
          "php": "print_r($client->etfsProfile(\"SPY\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"profile\": {\n    \"assetClass\": \"Equity\",\n    \"aum\": 318374000000,\n    \"avgVolume\": 63794600,\n    \"cusip\": \"\",\n    \"description\": \"SPY was created on 1993-01-22 by SPDR. The fund's investment portfolio concentrates primarily on large cap equity. The ETF currently has 318374.0m in AUM and 504 holdings. SPY tracks a market-cap-weighted index of US large- and midcap stocks selected by the S\\u0026P Committee.\",\n    \"domicile\": \"US\",\n    \"etfCompany\": \"SPDR\",\n    \"expenseRatio\": 0.0945,\n    \"inceptionDate\": \"1993-01-22\",\n    \"investmentSegment\": \"Large Cap\",\n    \"isin\": \"\",\n    \"name\": \"SPDR S\\u0026P 500 ETF Trust\",\n    \"nav\": 366.2784,\n    \"navCurrency\": \"USD\",\n    \"priceToBook\": 3.943968,\n    \"priceToEarnings\": 26.82968,\n    \"trackingIndex\": \"S\\u0026P 500\",\n    \"website\": \"https://us.spdrs.com/en/etf/spdr-sp-500-etf-SPY\"\n  },\n  \"symbol\": \"SPY\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/etf/holdings": {
      "get": {
        "summary": "ETFs Holdings",
        "description": "Get full ETF holdings/constituents. This endpoint has global coverage. Widget only shows top 10 holdings.",
        "operationId": "etfs-holdings",
        "navHeader": "ETFs Holdings",
        "urlId": "etfs-holdings",
        "title": "Global ETFs Holdings & Constituents API",
        "examples": [
          {
            "url": "/etf/holdings?symbol=ARKK&token=<token>",
            "text": "/etf/holdings?symbol=ARKK"
          },
          {
            "url": "/etf/holdings?symbol=SPY&skip=1&token=<token>",
            "text": "/etf/holdings?symbol=SPY&skip=1"
          },
          {
            "url": "/etf/holdings?symbol=IPO&date=2022-03-10&token=<token>",
            "text": "/etf/holdings?symbol=IPO&date=2022-03-10"
          }
        ],
        "widget": {
          "url": "https://widget.finnhub.io/widgets/etf-holdings?symbol=ARKK&theme=dark",
          "height": 600
        },
        "freeTier": null,
        "premium": "Premium required.",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "ETFs & Indices",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "ETF symbol.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "isin",
            "description": "ETF isin.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Skip the first n results. You can use this parameter to query historical constituents data. The latest result is returned if skip=0 or not set.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "date",
            "description": "Query holdings by date. You can use either this param or <code>skip</code> param, not both.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ETFsHoldings"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.etfs_holdings('SPY'))",
          "go": "res, _, err := finnhubClient.EtfsHoldings(context.Background()).Symbol(\"SPY\").Execute()",
          "javascript": "finnhubClient.etfsHoldings({'symbol': 'ARKK'}, (error, data, response) => {\n  console.log(data);\n});",
          "ruby": "puts(finnhub_client.etfs_holdings({symbol:'SPY'}))",
          "kotlin": "println(apiClient.etfsHoldings(\"SPY\", \"\", 0, \"\"))",
          "php": "print_r($client->etfsHoldings(\"SPY\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"atDate\": \"2020-12-11\",\n  \"holdings\": [\n    {\n      \"cusip\": \"037833100\",\n      \"isin\": \"US0378331005\",\n      \"name\": \"Apple Inc\",\n      \"percent\": 6.4617,\n      \"share\": 167692709,\n      \"symbol\": \"AAPL\",\n      \"value\": 20527264509\n    },\n    {\n      \"cusip\": \"594918104\",\n      \"isin\": \"US5949181045\",\n      \"name\": \"Microsoft Corp\",\n      \"percent\": 5.299,\n      \"share\": 78934886,\n      \"symbol\": \"MSFT\",\n      \"value\": 16833653788\n    }\n  ],\n  \"symbol\": \"SPY\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/etf/sector": {
      "get": {
        "summary": "ETFs Sector Exposure",
        "description": "Get ETF sector exposure data.",
        "operationId": "etfs-sector-exposure",
        "navHeader": "ETFs Sector",
        "urlId": "etfs-sector-exposure",
        "title": "Global ETFs Sector Breakdown",
        "examples": [
          {
            "url": "/etf/sector?symbol=SPY&token=<token>",
            "text": "/etf/sector?symbol=SPY"
          },
          {
            "url": "/etf/sector?symbol=VOO&token=<token>",
            "text": "/etf/sector?symbol=VOO"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "ETFs & Indices",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "ETF symbol.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ETFsSectorExposure"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.etfs_sector_exp('SPY'))",
          "go": "res, _, err := finnhubClient.EtfsSectorExposure(context.Background()).Symbol(\"SPY\").Execute()",
          "javascript": "finnhubClient.etfsSectorExposure('SPY', (error, data, response) => {\n  console.log(data);\n});",
          "ruby": "puts(finnhub_client.etfs_sector_exposure('SPY'))",
          "kotlin": "println(apiClient.etfsSectorExposure(\"SPY\"))",
          "php": "print_r($client->etfsSectorExposure(\"SPY\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"sectorExposure\": [\n    {\n      \"exposure\": 31.96,\n      \"industry\": \"Technology\"\n    },\n    {\n      \"exposure\": 14.79,\n      \"industry\": \"Healthcare\"\n    },\n    {\n      \"exposure\": 13.46,\n      \"industry\": \"Consumer Cyclicals\"\n    }\n  ],\n  \"symbol\": \"SPY\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/etf/country": {
      "get": {
        "summary": "ETFs Country Exposure",
        "description": "Get ETF country exposure data.",
        "operationId": "etfs-country-exposure",
        "navHeader": "ETFs Country",
        "urlId": "etfs-country-exposure",
        "title": "Global ETFs Country Exposure Breakdown",
        "examples": [
          {
            "url": "/etf/country?symbol=SPY&token=<token>",
            "text": "/etf/country?symbol=SPY"
          },
          {
            "url": "/etf/country?symbol=VOO&token=<token>",
            "text": "/etf/country?symbol=VOO"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "ETFs & Indices",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "ETF symbol.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ETFsCountryExposure"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.etfs_country_exp('SPY'))",
          "go": "res, _, err := finnhubClient.EtfsCountryExposure(context.Background()).Symbol(\"SPY\").Execute()",
          "javascript": "finnhubClient.etfsCountryExposure('SPY', (error, data, response) => {\n  console.log(data);\n});",
          "ruby": "puts(finnhub_client.etfs_country_exposure('SPY'))",
          "kotlin": "println(apiClient.etfsCountryExposure(\"SPY\"))",
          "php": "print_r($client->etfsCountryExposure(\"SPY\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"countryExposure\": [\n    {\n      \"country\": \"United States of America (the)\",\n      \"exposure\": 97.02\n    },\n    {\n      \"country\": \"Ireland\",\n      \"exposure\": 1.65\n    },\n    {\n      \"country\": \"United Kingdom of Great Britain and Northern Ireland (the)\",\n      \"exposure\": 0.88\n    },\n    {\n      \"country\": \"Switzerland\",\n      \"exposure\": 0.41\n    },\n    {\n      \"country\": \"Bermuda\",\n      \"exposure\": 0.03\n    }\n  ],\n  \"symbol\": \"SPY\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/mutual-fund/profile": {
      "get": {
        "summary": "Mutual Funds Profile",
        "description": "Get mutual funds profile information. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN.",
        "operationId": "mutual-fund-profile",
        "navHeader": "Mutual Funds Profile",
        "urlId": "mutual-fund-profile",
        "title": "Mutual Funds profile",
        "examples": [
          {
            "url": "/mutual-fund/profile?symbol=VTSAX&token=<token>",
            "text": "/mutual-fund/profile?symbol=VTSAX"
          },
          {
            "url": "/mutual-fund/profile?isin=US9229087286&token=<token>",
            "text": "/mutual-fund/profile?isin=US9229087286"
          },
          {
            "url": "/mutual-fund/profile?isin=LU1748855837&token=<token>",
            "text": "/mutual-fund/profile?isin=LU1748855837"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium required.",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Mutual Funds",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Fund's symbol.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "isin",
            "description": "Fund's isin.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/MutualFundProfile"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.mutual_fund_profile(\"VTSAX\"))",
          "go": "res, _, err := finnhubClient.MutualFundProfile(context.Background()).Symbol(\"VTSAX\").Execute()",
          "javascript": "finnhubClient.mutualFundProfile({'symbol': 'VTSAX'}, (error, data, response) => {\n  console.log(data);\n});",
          "ruby": "puts(finnhub_client.mutual_fund_profile({symbol:'VTSAX'}))",
          "kotlin": "println(apiClient.mutualFundProfile(\"VTSAX\", \"\"))",
          "php": "print_r($client->mutualFundProfile(\"VTSAX\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"profile\": {\n    \"benchmark\": \"CRSP US Total Stock Market TR\",\n    \"beta\": 1.05,\n    \"category\": \"Multi-Cap Core\",\n    \"cusip\": \"\",\n    \"deferredLoad\": 0,\n    \"description\": \"Created in 1992, Vanguard Total Stock Market Index Fund is designed to provide investors with exposure to the entire U.S. equity market, including small-, mid-, and large-cap growth and value stocks. The fund\u2019s key attributes are its low costs, broad diversification, and the potential for tax efficiency. Investors looking for a low-cost way to gain broad exposure to the U.S. stock market who are willing to accept the volatility that comes with stock market investing may wish to consider this fund as either a core equity holding or your only domestic stock fund.\",\n    \"expenseRatio\": 0.04,\n    \"fee12b1\": 0,\n    \"frontLoad\": 0,\n    \"fundFamily\": \"VANGUARD ADMIRAL\",\n    \"inceptionDate\": \"2000-11-13\",\n    \"investmentSegment\": \"Growth & Income\",\n    \"iraMinInvestment\": 0,\n    \"isin\": \"\",\n    \"manager\": \"O'Reilly,Nejman\",\n    \"maxRedemptionFee\": 0,\n    \"name\": \"Vanguard Index Funds: Vanguard Total Stock Market Index Fund; Admiral Class Shares\",\n    \"standardMinInvestment\": 3000,\n    \"status\": \"Open\",\n    \"totalNav\": 280758000000,\n    \"turnover\": 8\n  },\n  \"symbol\": \"VTSAX\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/mutual-fund/holdings": {
      "get": {
        "summary": "Mutual Funds Holdings",
        "description": "Get full Mutual Funds holdings/constituents. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN.",
        "operationId": "mutual-fund-holdings",
        "navHeader": "Mutual Funds Holdings",
        "urlId": "mutual-fund-holdings",
        "title": "Global Mutual Funds Holdings & Constituents API",
        "examples": [
          {
            "url": "/mutual-fund/holdings?symbol=VTSAX&token=<token>",
            "text": "/mutual-fund/holdings?symbol=VTSAX"
          },
          {
            "url": "/mutual-fund/holdings?isin=US9229087286&skip=1&token=<token>",
            "text": "/mutual-fund/holdings?isin=US9229087286&skip=1"
          },
          {
            "url": "/mutual-fund/holdings?isin=LU1748855837&token=<token>",
            "text": "/mutual-fund/holdings?isin=LU1748855837"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium required.",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Mutual Funds",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Fund's symbol.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "isin",
            "description": "Fund's isin.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Skip the first n results. You can use this parameter to query historical constituents data. The latest result is returned if skip=0 or not set.",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/MutualFundHoldings"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.mutual_fund_holdings(\"VTSAX\"))",
          "go": "res, _, err := finnhubClient.MutualFundHoldings(context.Background()).Symbol(\"VTSAX\").Execute()",
          "javascript": "finnhubClient.mutualFundHoldings({'symbol': 'VTSAX'}, (error, data, response) => {\n  console.log(data);\n});",
          "ruby": "puts(finnhub_client.mutual_fund_holdings({symbol:'VTSAX'}))",
          "kotlin": "println(apiClient.mutualFundHoldings(\"VTSAX\", \"\", 0))",
          "php": "print_r($client->mutualFundHoldings(\"VTSAX\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"atDate\": \"2020-12-31\",\n  \"holdings\": [\n    {\n      \"cusip\": \"778669200\",\n      \"isin\": \"US7786692001\",\n      \"name\": \"Rotech Healthcare\",\n      \"percent\": 0.75651,\n      \"share\": 1916276,\n      \"symbol\": null,\n      \"value\": 136055596\n    },\n    {\n      \"cusip\": \"24790A101\",\n      \"isin\": \"US24790A1016\",\n      \"name\": \"Denbury Inc Ordinary Shares - New\",\n      \"percent\": 0.34308,\n      \"share\": 2401805,\n      \"symbol\": \"DEN\",\n      \"value\": 61702370\n    },\n    ...\n  ],\n  \"numberOfHoldings\": 960,\n  \"symbol\": \"CITEX\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/mutual-fund/sector": {
      "get": {
        "summary": "Mutual Funds Sector Exposure",
        "description": "Get Mutual Funds sector exposure data.",
        "operationId": "mutual-fund-sector-exposure",
        "navHeader": "Mutual Funds Sector",
        "urlId": "mutual-fund-sector-exposure",
        "title": "Mutual Funds Sector Breakdown",
        "examples": [
          {
            "url": "/mutual-fund/sector?symbol=VTSAX&token=<token>",
            "text": "/mutual-fund/sector?symbol=VTSAX"
          },
          {
            "url": "/mutual-fund/sector?symbol=FNILX&token=<token>",
            "text": "/mutual-fund/sector?symbol=FNILX"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium required.",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Mutual Funds",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Mutual Fund symbol.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/MutualFundSectorExposure"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.mutual_fund_sector_exp(\"VTSAX\"))",
          "go": "res, _, err := finnhubClient.MutualFundSectorExposure(context.Background()).Symbol(\"VTSAX\").Execute()",
          "javascript": "finnhubClient.mutualFundSectorExposure('VTSAX', (error, data, response) => {\n  console.log(data);\n});",
          "ruby": "puts(finnhub_client.mutual_fund_sector_exposure('VTSAX'))",
          "kotlin": "println(apiClient.mutualFundSectorExposure(\"VTSAX\"))",
          "php": "print_r($client->mutualFundSectorExposure(\"VTSAX\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"sectorExposure\": [\n    {\n      \"exposure\": 26.2,\n      \"sector\": \"Information Technology\"\n    },\n    {\n      \"exposure\": 13.84,\n      \"sector\": \"Health Care\"\n    },\n    {\n      \"exposure\": 12.29,\n      \"sector\": \"Consumer Discretionary\"\n    },\n    {\n      \"exposure\": 10.46,\n      \"sector\": \"Financials\"\n    }\n  ],\n  \"symbol\": \"VTSAX\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/mutual-fund/country": {
      "get": {
        "summary": "Mutual Funds Country Exposure",
        "description": "Get Mutual Funds country exposure data.",
        "operationId": "mutual-fund-country-exposure",
        "navHeader": "Mutual Funds Country",
        "urlId": "mutual-fund-country-exposure",
        "title": "Mutual Funds Country Exposure Breakdown",
        "examples": [
          {
            "url": "/mutual-fund/country?symbol=FNILX&token=<token>",
            "text": "/mutual-fund/country?symbol=FNILX"
          },
          {
            "url": "/mutual-fund/country?symbol=VFIAX&token=<token>",
            "text": "/mutual-fund/country?symbol=VFIAX"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium required.",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Mutual Funds",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/MutualFundCountryExposure"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.mutual_fund_country_exp(\"VTSAX\"))",
          "go": "res, _, err := finnhubClient.MutualFundCountryExposure(context.Background()).Symbol(\"VTSAX\").Execute()",
          "javascript": "finnhubClient.mutualFundCountryExposure('VTSAX', (error, data, response) => {\n  console.log(data);\n});",
          "ruby": "puts(finnhub_client.mutual_fund_country_exposure('VTSAX'))",
          "kotlin": "println(apiClient.mutualFundCountryExposure(\"VTSAX\"))",
          "php": "print_r($client->mutualFundCountryExposure(\"VTSAX\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"countryExposure\": [\n    {\n      \"country\": \"United States of America (the)\",\n      \"exposure\": 96.87\n    },\n    {\n      \"country\": \"Ireland\",\n      \"exposure\": 1.58\n    },\n    {\n      \"country\": \"United Kingdom of Great Britain and Northern Ireland (the)\",\n      \"exposure\": 0.62\n    },\n    {\n      \"country\": \"Switzerland\",\n      \"exposure\": 0.32\n    },\n    {\n      \"country\": \"Bermuda\",\n      \"exposure\": 0.29\n    },\n    {\n      \"country\": \"Canada\",\n      \"exposure\": 0.2\n    }\n  ],\n  \"symbol\": \"VTSAX\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/forex/exchange": {
      "get": {
        "summary": "Forex Exchanges",
        "description": "List supported forex exchanges",
        "operationId": "forex-exchanges",
        "navHeader": "Exchanges",
        "urlId": "forex-exchanges",
        "title": "List Forex Exchanges",
        "examples": [
          {
            "url": "/forex/exchange?token=<token>",
            "text": "/forex/exchange"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": null,
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Forex",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.forex_exchanges())",
          "go": "res, _, err := finnhubClient.ForexExchanges(context.Background()).Execute()",
          "javascript": "finnhubClient.forexExchanges((error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.forex_exchanges())",
          "kotlin": "println(apiClient.forexExchanges())",
          "php": "print_r($client->forexExchanges());",
          "useTemplate": true
        },
        "sampleResponse": "[\n  \"oanda\",\n  \"fxcm\",\n  \"forex.com\",\n  \"ic markets\",\n  \"fxpro\"\n]",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/forex/symbol": {
      "get": {
        "summary": "Forex Symbol",
        "description": "List supported forex symbols.",
        "operationId": "forex-symbols",
        "navHeader": "Symbols",
        "urlId": "forex-symbols",
        "title": "Forex Symbols By Exchange",
        "examples": [
          {
            "url": "/forex/symbol?exchange=oanda&token=<token>",
            "text": "/forex/symbol?exchange=oanda"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": null,
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Forex",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "exchange",
            "description": "Exchange you want to get the list of symbols from.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ForexSymbol"
              }
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.forex_symbols('OANDA'))",
          "go": "res, _, err := finnhubClient.ForexSymbols(context.Background()).Exchange(\"OANDA\").Execute()",
          "javascript": "finnhubClient.forexSymbols(\"OANDA\", (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.forex_symbols('OANDA'))",
          "kotlin": "println(apiClient.forexSymbols(\"OANDA\"))",
          "php": "print_r($client->forexSymbols(\"OANDA\"));",
          "useTemplate": true
        },
        "sampleResponse": "[\n  {\n    \"description\": \"IC MARKETS Euro vs US Dollar EURUSD\",\n    \"displaySymbol\": \"EUR/USD\",\n    \"symbol\": \"IC MARKETS:1\"\n  },\n  {\n    \"description\": \"IC MARKETS Australian vs US Dollar AUDUSD\",\n    \"displaySymbol\": \"AUD/USD\",\n    \"symbol\": \"IC MARKETS:5\"\n  },\n  {\n    \"description\": \"IC MARKETS British Pound vs US Dollar GBPUSD\",\n    \"displaySymbol\": \"GBP/USD\",\n    \"symbol\": \"IC MARKETS:2\"\n  }]",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/forex/candle": {
      "get": {
        "summary": "Forex Candles",
        "description": "Get candlestick data for forex symbols.",
        "operationId": "forex-candles",
        "navHeader": "Candles",
        "urlId": "forex-candles",
        "title": "Forex OHLCV API",
        "examples": [
          {
            "url": "/forex/candle?symbol=OANDA:EUR_USD&resolution=D&from=1572651390&to=1575243390&token=<token>",
            "text": "/forex/candle?symbol=OANDA:EUR_USD&resolution=D&from=1572651390&to=1575243390"
          }
        ],
        "widget": {
          "url": "https://widget.finnhub.io/widgets/stocks/chart?symbol=OANDA:EUR_USD&watermarkColor=%231db954&backgroundColor=%23222222&textColor=white"
        },
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Forex",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Use symbol returned in <code>/forex/symbol</code> endpoint for this field.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "resolution",
            "description": "Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "from",
            "description": "UNIX timestamp. Interval initial value.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "to",
            "description": "UNIX timestamp. Interval end value.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/ForexCandles"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.forex_candles('OANDA:EUR_USD', 'D', 1590988249, 1591852249))",
          "go": "res, _, err := finnhubClient.ForexCandles(context.Background()).Symbol(\"OANDA:EUR_USD\").Resolution(\"D\").From(1590988249).To(1591852249).Execute()",
          "javascript": "finnhubClient.forexCandles(\"OANDA:EUR_USD\", \"D\", 1590988249, 1591852249, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.forex_candles('OANDA:EUR_USD', 'D', 1590988249, 1591852249))",
          "kotlin": "println(apiClient.forexCandles(\"OANDA:EUR_USD\", \"D\", 1590988249, 1591852249))",
          "php": "print_r($client->forexCandles(\"OANDA:EUR_USD\", \"D\", 1590988249, 1591852249));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"c\": [\n    1.10713,\n    1.10288,\n    1.10397,\n    1.10182\n  ],\n  \"h\": [\n    1.1074,\n    1.10751,\n    1.10729,\n    1.10595\n  ],\n  \"l\": [\n    1.09897,\n    1.1013,\n    1.10223,\n    1.10101\n  ],\n  \"o\": [\n    1.0996,\n    1.107,\n    1.10269,\n    1.10398\n  ],\n  \"s\": \"ok\",\n  \"t\": [\n    1568667600,\n    1568754000,\n    1568840400,\n    1568926800\n  ],\n  \"v\": [\n    75789,\n    75883,\n    73485,\n    5138\n  ]\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/forex/rates": {
      "get": {
        "summary": "Forex rates",
        "description": "Get rates for all forex pairs. Ideal for currency conversion",
        "operationId": "forex-rates",
        "navHeader": "All Rates",
        "urlId": "forex-rates",
        "title": "Forex All Rates",
        "examples": [
          {
            "url": "/forex/rates?base=USD&token=<token>",
            "text": "/forex/rates?base=USD"
          },
          {
            "url": "/forex/rates?base=EUR&date=2022-02-10&token=<token>",
            "text": "/forex/rates?base=EUR&date=2022-02-10"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Forex",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "base",
            "description": "Base currency. Default to EUR.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "date",
            "description": "Date. Leave blank to get the latest data.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/Forexrates"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.forex_rates(base='USD'))",
          "go": "res, _, err := finnhubClient.ForexRates(context.Background()).Base(\"USD\").Execute()",
          "javascript": "finnhubClient.forexRates({\"base\": \"USD\"}, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.forex_rates({base: 'USD'}))",
          "kotlin": "println(apiClient.forexRates(base = \"USD\"))",
          "php": "print_r($client->forexRates(\"USD\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"base\": \"USD\",\n  \"quote\": {\n    \"AED\": 3.968012,\n    \"AFN\": 82.373308,\n    \"ALL\": 124.235408,\n    \"AMD\": 520.674275,\n    \"CAD\": 1.525368,\n    \"CDF\": 1904.576741,\n    \"CHF\": 1.053259,\n    \"CNY\": 7.675235,\n    \"COP\": 4282.32676,\n    \"CRC\": 614.796995,\n    \"CUC\": 1.080304,\n    \"CUP\": 28.628067,\n    \"CVE\": 110.517004,\n    \"CZK\": 27.096737,\n    \"DJF\": 191.991344,\n    \"DKK\": 7.461229,\n    \"DOP\": 59.195018,\n    \"DZD\": 139.384021,\n    \"EGP\": 17.018597,\n    \"ERN\": 16.204913,\n    \"ETB\": 36.296767,\n    \"EUR\": 0.91,\n    \"GBP\": 0.874841,\n    \"JPY\": 114.583548,\n    \"MDL\": 19.120251,\n    \"MGA\": 4105.156776,\n    \"USD\": 1,\n  }\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/crypto/exchange": {
      "get": {
        "summary": "Crypto Exchanges",
        "description": "List supported crypto exchanges",
        "operationId": "crypto-exchanges",
        "navHeader": "Exchanges",
        "urlId": "crypto-exchanges",
        "title": "Crypto Exchanges",
        "examples": [
          {
            "url": "/crypto/exchange?token=<token>",
            "text": "/crypto/exchange"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": null,
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Crypto",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.crypto_exchanges())",
          "go": "res, _, err := finnhubClient.CryptoExchanges(context.Background()).Execute()",
          "javascript": "finnhubClient.cryptoExchanges((error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.crypto_exchanges())",
          "kotlin": "println(apiClient.cryptoExchanges())",
          "php": "print_r($client->cryptoExchanges());",
          "useTemplate": true
        },
        "sampleResponse": "[\n  \"KRAKEN\",\n  \"HITBTC\",\n  \"COINBASE\",\n  \"GEMINI\",\n  \"POLONIEX\",\n  \"Binance\",\n  \"ZB\",\n  \"BITTREX\",\n  \"KUCOIN\",\n  \"OKEX\",\n  \"BITFINEX\",\n  \"HUOBI\"\n]",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/crypto/symbol": {
      "get": {
        "summary": "Crypto Symbol",
        "description": "List supported crypto symbols by exchange",
        "operationId": "crypto-symbols",
        "navHeader": "Symbols",
        "urlId": "crypto-symbols",
        "title": "Crypto Symbols By Exchange",
        "examples": [
          {
            "url": "/crypto/symbol?exchange=binance&token=<token>",
            "text": "/crypto/symbol?exchange=binance"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": null,
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Crypto",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "exchange",
            "description": "Exchange you want to get the list of symbols from.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CryptoSymbol"
              }
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.crypto_symbols('BINANCE'))",
          "go": "res, _, err := finnhubClient.CryptoSymbols(context.Background()).Exchange(\"BINANCE\").Execute()",
          "javascript": "finnhubClient.cryptoSymbols(\"BINANCE\", (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.crypto_symbols('BINANCE'))",
          "kotlin": "println(apiClient.cryptoSymbols(\"BINANCE\"))",
          "php": "print_r($client->cryptoSymbols(\"BINANCE\"));",
          "useTemplate": true
        },
        "sampleResponse": "[\n  {\n    \"description\": \"Binance ETHBTC\",\n    \"displaySymbol\": \"ETH/BTC\",\n    \"symbol\": \"ETHBTC\"\n  },\n  {\n    \"description\": \"Binance LTCBTC\",\n    \"displaySymbol\": \"LTC/BTC\",\n    \"symbol\": \"BINANCE:LTCBTC\"\n  },\n  {\n    \"description\": \"Binance BNBBTC\",\n    \"displaySymbol\": \"BNB/BTC\",\n    \"symbol\": \"BINANCE:BNBBTC\"\n  }]",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/crypto/profile": {
      "get": {
        "summary": "Crypto Profile",
        "description": "Get crypto's profile.",
        "operationId": "crypto-profile",
        "navHeader": "Profile",
        "urlId": "crypto-profile",
        "title": "Crypto Profile API",
        "examples": [
          {
            "url": "/crypto/profile?symbol=BTC&token=<token>",
            "text": "/crypto/profile?symbol=BTC"
          },
          {
            "url": "/crypto/profile?symbol=ETH&token=<token>",
            "text": "/crypto/profile?symbol=ETH"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Crypto",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Crypto symbol such as BTC or ETH.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CryptoProfile"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.crypto_profile('BTC'))",
          "go": "res, _, err := finnhubClient.CryptoProfile(context.Background()).Symbol(\"BTC\").Execute()",
          "javascript": "finnhubClient.cryptoProfile(\"BTC\", (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.crypto_profile('BTC'))",
          "kotlin": "println(apiClient.cryptoProfile(\"BTC\"))",
          "php": "print_r($client->cryptoProfile(\"BTC\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"name\": \"Bitcoin\",\n  \"longName\": \"Bitcoin (BTC)\",\n  \"description\": \"Bitcoin uses peer-to-peer technology to operate with no central authority or banks; managing transactions and the issuing of bitcoins is carried out collectively by the network. Although other cryptocurrencies have come before, Bitcoin is the first decentralized cryptocurrency - Its reputation has spawned copies and evolution in the space.With the largest variety of markets and the biggest value - having reached a peak of 318 billion USD - Bitcoin is here to stay. As with any new invention, there can be improvements or flaws in the initial model however the community and a team of dedicated developers are pushing to overcome any obstacle they come across. It is also the most traded cryptocurrency and one of the main entry points for all the other cryptocurrencies. The price is as unstable as always and it can go up or down by 10%-20% in a single day.Bitcoin is an SHA-256 POW coin with almost 21,000,000 total minable coins. The block time is 10 minutes. See below for a full range of Bitcoin markets where you can trade US Dollars for Bitcoin, crypto to Bitcoin and many other fiat currencies too.Bitcoin Whitepaper PDF - A Peer-to-Peer Electronic Cash SystemBlockchain data provided by: Blockchain (main source), Blockchair (backup)\",\n  \"marketCap\": 1119891535870.4905,\n  \"totalSupply\": 18876550,\n  \"maxSupply\": 21000000,\n  \"circulatingSupply\": 18876550,\n  \"logo\": \"\",\n  \"launchDate\": \"2009-01-03\",\n  \"website\": \"https://bitcoin.org/en/\",\n  \"proofType\": \"PoW\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/crypto/candle": {
      "get": {
        "summary": "Crypto Candles",
        "description": "Get candlestick data for crypto symbols.",
        "operationId": "crypto-candles",
        "navHeader": "Candles",
        "urlId": "crypto-candles",
        "title": "Crypto OHLCV API",
        "examples": [
          {
            "url": "/crypto/candle?symbol=BINANCE:BTCUSDT&resolution=D&from=1572651390&to=1575243390&token=<token>",
            "text": "/crypto/candle?symbol=BINANCE:BTCUSDT&resolution=D&from=1572651390&to=1575243390"
          }
        ],
        "widget": {
          "url": "https://widget.finnhub.io/widgets/stocks/chart?symbol=BINANCE:BTCUSDT&watermarkColor=%231db954&backgroundColor=%23222222&textColor=white"
        },
        "freeTier": null,
        "premium": null,
        "newEndpoint": null,
        "highUsage": "High Usage",
        "tags": [
          "Default"
        ],
        "section": "Crypto",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Use symbol returned in <code>/crypto/symbol</code> endpoint for this field.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "resolution",
            "description": "Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "from",
            "description": "UNIX timestamp. Interval initial value.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "to",
            "description": "UNIX timestamp. Interval end value.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CryptoCandles"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.crypto_candles('BINANCE:BTCUSDT', 'D', 1590988249, 1591852249))",
          "go": "res, _, err := finnhubClient.CryptoCandles(context.Background()).Symbol(\"BINANCE:BTCUSDT\").Resolution(\"D\").From(1590988249).To(1591852249).Execute()",
          "javascript": "finnhubClient.cryptoCandles(\"BINANCE:BTCUSDT\", \"D\", 1590988249, 1591852249, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.crypto_candles('BINANCE:BTCUSDT', 'D', 1590988249, 1591852249))",
          "kotlin": "println(apiClient.cryptoCandles(\"BINANCE:BTCUSDT\", \"D\", 1590988249, 1591852249))",
          "php": "print_r($client->cryptoCandles(\"BINANCE:BTCUSDT\", \"D\", 1590988249, 1591852249));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"c\": [\n    1.10713,\n    1.10288,\n    1.10397,\n    1.10182\n  ],\n  \"h\": [\n    1.1074,\n    1.10751,\n    1.10729,\n    1.10595\n  ],\n  \"l\": [\n    1.09897,\n    1.1013,\n    1.10223,\n    1.10101\n  ],\n  \"o\": [\n    1.0996,\n    1.107,\n    1.10269,\n    1.10398\n  ],\n  \"s\": \"ok\",\n  \"t\": [\n    1568667600,\n    1568754000,\n    1568840400,\n    1568926800\n  ],\n  \"v\": [\n    75789,\n    75883,\n    73485,\n    5138\n  ]\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/scan/pattern": {
      "get": {
        "summary": "Pattern Recognition",
        "description": "Run pattern recognition algorithm on a symbol. Support double top/bottom, triple top/bottom, head and shoulders, triangle, wedge, channel, flag, and candlestick patterns.",
        "operationId": "pattern-recognition",
        "navHeader": "Pattern Recognition",
        "urlId": "pattern-recognition",
        "title": "Pattern Recognition API for Stocks, Forex, Crypto",
        "examples": [
          {
            "url": "/scan/pattern?symbol=AAPL&resolution=D&token=<token>",
            "text": "/scan/pattern?symbol=AAPL&resolution=D"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Technical Analysis",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "resolution",
            "description": "Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/PatternRecognition"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.pattern_recognition('AAPL', 'D'))",
          "go": "res, _, err := finnhubClient.PatternRecognition(context.Background()).Symbol(\"AAPL\").Resolution(\"D\").Execute()",
          "javascript": "finnhubClient.patternRecognition(\"AAPL\", \"D\", (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.pattern_recognition('AAPL', 'D'))",
          "kotlin": "println(apiClient.patternRecognition(\"AAPL\", \"D\"))",
          "php": "print_r($client->patternRecognition(\"AAPL\", \"D\"));",
          "useTemplate": true
        },
        "sampleResponse": "\"points\": [\n    {\n      \"aprice\": 1.09236,\n      \"atime\": 1567458000,\n      \"bprice\": 1.1109,\n      \"btime\": 1568322000,\n      \"cprice\": 1.09897,\n      \"ctime\": 1568667600,\n      \"dprice\": 0,\n      \"dtime\": 0,\n      \"end_price\": 1.1109,\n      \"end_time\": 1568926800,\n      \"entry\": 1.1109,\n      \"eprice\": 0,\n      \"etime\": 0,\n      \"mature\": 0,\n      \"patternname\": \"Double Bottom\",\n      \"patterntype\": \"bullish\",\n      \"profit1\": 1.1294,\n      \"profit2\": 0,\n      \"sortTime\": 1568926800,\n      \"start_price\": 1.1109,\n      \"start_time\": 1566853200,\n      \"status\": \"incomplete\",\n      \"stoploss\": 1.0905,\n      \"symbol\": \"EUR_USD\",\n      \"terminal\": 0\n    },\n    {\n      \"aprice\": 1.09236,\n      \"atime\": 1567458000,\n      \"bprice\": 1.1109,\n      \"btime\": 1568322000,\n      \"cprice\": 1.09897,\n      \"ctime\": 1568667600,\n      \"dprice\": 1.13394884,\n      \"dtime\": 1568926800,\n      \"entry\": 1.1339,\n      \"mature\": 0,\n      \"patternname\": \"Bat\",\n      \"patterntype\": \"bearish\",\n      \"profit1\": 1.1181,\n      \"profit2\": 1.1082,\n      \"przmax\": 1.1339,\n      \"przmin\": 1.129,\n      \"rrratio\": 3.34,\n      \"sortTime\": 1568667600,\n      \"status\": \"incomplete\",\n      \"stoploss\": 1.1416,\n      \"symbol\": \"EUR_USD\",\n      \"terminal\": 0,\n      \"xprice\": 1.1393,\n      \"xtime\": 1561669200\n    }\n]",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/scan/support-resistance": {
      "get": {
        "summary": "Support/Resistance",
        "description": "Get support and resistance levels for a symbol.",
        "operationId": "support-resistance",
        "navHeader": "Support/Resistance",
        "urlId": "support-resistance",
        "title": "Support/Resistance Levels API for Stocks, Forex, Crypto",
        "examples": [
          {
            "url": "/scan/support-resistance?symbol=IBM&resolution=D&token=<token>",
            "text": "/scan/support-resistance?symbol=IBM&resolution=D"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Technical Analysis",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "resolution",
            "description": "Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SupportResistance"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.support_resistance('AAPL', 'D'))",
          "go": "res, _, err := finnhubClient.SupportResistance(context.Background()).Symbol(\"AAPL\").Resolution(\"D\").Execute()",
          "javascript": "finnhubClient.supportResistance(\"AAPL\", \"D\", (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.support_resistance('AAPL', 'D'))",
          "kotlin": "println(apiClient.supportResistance(\"AAPL\", \"D\"))",
          "php": "print_r($client->supportResistance(\"AAPL\", \"D\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"levels\": [\n    1.092360019683838,\n    1.1026300191879272,\n    1.113450050354004,\n    1.1233500242233276,\n    1.134719967842102,\n    1.1513700485229492\n  ]\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/scan/technical-indicator": {
      "get": {
        "summary": "Aggregate Indicators",
        "description": "Get aggregate signal of multiple technical indicators such as MACD, RSI, Moving Average v.v.",
        "operationId": "aggregate-indicator",
        "navHeader": "Aggregate Indicators",
        "urlId": "aggregate-indicator",
        "title": "Aggregate Indicators/Technical Signal API for Stocks, Forex, Crypto",
        "examples": [
          {
            "url": "/scan/technical-indicator?symbol=AAPL&resolution=D&token=<token>",
            "text": "/scan/technical-indicator?symbol=AAPL&resolution=D"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Technical Analysis",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "symbol",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "resolution",
            "description": "Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/AggregateIndicators"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.aggregate_indicator('AAPL', 'D'))",
          "go": "res, _, err := finnhubClient.AggregateIndicator(context.Background()).Symbol(\"AAPL\").Resolution(\"D\").Execute()",
          "javascript": "finnhubClient.aggregateIndicator(\"AAPL\", \"D\", (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.aggregate_indicator('AAPL', 'D'))",
          "kotlin": "println(apiClient.aggregateIndicator(\"AAPL\", \"D\"))",
          "php": "print_r($client->aggregateIndicator(\"AAPL\", \"D\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"technicalAnalysis\": {\n    \"count\": {\n      \"buy\": 6,\n      \"neutral\": 7,\n      \"sell\": 4\n    },\n    \"signal\": \"neutral\"\n  },\n  \"trend\": {\n    \"adx\": 24.46020733373421,\n    \"trending\": false\n  }\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/indicator": {
      "post": {
        "summary": "Technical Indicators",
        "description": "Return technical indicator with price data. List of supported indicators can be found <a href=\"https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing\" target=\"_blank\">here</a>.",
        "operationId": "technical-indicator",
        "navHeader": "Technical Indicators",
        "urlId": "technical-indicator",
        "title": "Technical Indicators API for Stocks, Forex, Crypto",
        "examples": [
          {
            "url": "/indicator?symbol=AAPL&resolution=D&from=1583098857&to=1584308457&indicator=sma&timeperiod=3&token=<token>",
            "text": "/indicator?symbol=symbol=AAPL&resolution=D&from=1583098857&to=1584308457&indicator=sma&timeperiod=3"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": null,
        "newEndpoint": "New Endpoint",
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Technical Analysis",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "symbol",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "resolution",
            "description": "Supported resolution includes <code>1, 5, 15, 30, 60, D, W, M </code>.Some timeframes might not be available depending on the exchange.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "from",
            "description": "UNIX timestamp. Interval initial value.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "to",
            "description": "UNIX timestamp. Interval end value.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "indicator",
            "description": "Indicator name. Full list can be found <a href=\"https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing\" target=\"_blank\">here</a>.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "indicator_fields",
            "description": "Check out <a href=\"https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing\" target=\"_blank\">this page</a> to see which indicators and params are supported.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/IndicatorFields"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/TechnicalIndicator"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.technical_indicator(symbol=\"AAPL\", resolution='D', _from=1583098857, to=1584308457, indicator='rsi', indicator_fields={\"timeperiod\": 3}))",
          "go": "res, _, err := finnhubClient.TechnicalIndicator(context.Background()).Symbol(\"AAPL\").Resolution(\"D\").From(1583098857).To(1584308457).Indicator(\"sma\").IndicatorFields(map[string]interface{}{\"timeperiod\": 3}).Execute()",
          "javascript": "finnhubClient.technicalIndicator(\"AAPL\", \"D\", 1580988249, 1591852249, \"macd\", {}, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.technical_indicator(\"AAPL\", 'D', 1583098857, 1584308457, 'rsi', {indicator_fields:{'timeperiod': 3}}))\n",
          "kotlin": "println(\n            apiClient.technicalIndicator(\n                symbol = \"AAPL\",\n                resolution = \"D\",\n                from = 1583098857L,\n                to = 1584308457L,\n                indicator = \"sma\",\n                indicatorFields = mapOf<String, Any>(\"timeperiod\" to 3)\n            )\n        )",
          "php": "$indicatorFields = new stdClass();\n$indicatorFields->timeperiod = 3;\nprint_r($client->technicalIndicator(\"AAPL\", \"D\", 1583098857, 1584308457, \"rsi\", $indicatorFields));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"c\": [\n    298.81,\n    289.32,\n    302.74,\n    292.92,\n    289.03,\n    266.17,\n    285.34,\n    275.43,\n    248.23,\n    277.97\n  ],\n  \"h\": [\n    301.44,\n    304,\n    303.4,\n    299.55,\n    290.82,\n    278.09,\n    286.44,\n    281.22,\n    270,\n    279.92\n  ],\n  \"l\": [\n    277.72,\n    285.8,\n    293.13,\n    291.41,\n    281.23,\n    263,\n    269.37,\n    271.86,\n    248,\n    252.95\n  ],\n  \"o\": [\n    282.28,\n    303.67,\n    296.44,\n    295.52,\n    282,\n    263.75,\n    277.14,\n    277.39,\n    255.94,\n    264.89\n  ],\n  \"s\": \"ok\",\n  \"sma\": [\n    0,\n    0,\n    296.95666666666665,\n    294.99333333333334,\n    294.8966666666667,\n    282.7066666666667,\n    280.18,\n    275.6466666666667,\n    269.6666666666667,\n    267.21000000000004\n  ],\n  \"t\": [\n    1583159400,\n    1583245800,\n    1583332200,\n    1583418600,\n    1583505000,\n    1583760600,\n    1583847000,\n    1583933400,\n    1584019800,\n    1584106200\n  ],\n  \"v\": [\n    85349300,\n    79868900,\n    54794600,\n    46893200,\n    56544200,\n    71686200,\n    71322500,\n    63899700,\n    104618500,\n    92481100\n  ]\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/transcripts/list": {
      "get": {
        "summary": "Earnings Call Transcripts List",
        "description": "List earnings call transcripts' metadata. This endpoint is available for US, UK, European, Australian and Canadian companies.",
        "operationId": "transcripts-list",
        "navHeader": "Transcripts List",
        "urlId": "transcripts-list",
        "title": "List Earnings Call Transcripts",
        "examples": [
          {
            "url": "/stock/transcripts/list?symbol=AAPL&token=<token>",
            "text": "/stock/transcripts/list?symbol=AAPL"
          },
          {
            "url": "/stock/transcripts/list?symbol=AC.TO&token=<token>",
            "text": "/stock/transcripts/list?symbol=AC.TO"
          },
          {
            "url": "/stock/transcripts/list?symbol=BARC.L&token=<token>",
            "text": "/stock/transcripts/list?symbol=BARC.L"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium required.",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Alternative Data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Company symbol: AAPL. Leave empty to list the latest transcripts",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/EarningsCallTranscriptsList"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.transcripts_list('AAPL'))",
          "go": "res, _, err := finnhubClient.TranscriptsList(context.Background()).Symbol(\"AAPL\").Execute()",
          "javascript": "finnhubClient.transcriptsList(\"AAPL\", (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.transcripts_list('AAPL'))",
          "kotlin": "println(apiClient.transcriptsList(\"AAPL\"))",
          "php": "print_r($client->transcriptsList(\"AAPL\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"symbol\": \"AAPL\",\n  \"transcripts\": [\n    {\n      \"id\": \"AAPL_326091\",\n      \"quarter\": 1,\n      \"symbol\": \"AAPL\",\n      \"time\": \"2020-01-28 21:35:45\",\n      \"title\": \"AAPL - Earnings Call Transcript Q1 2020\",\n      \"year\": 2020\n    },\n    {\n      \"id\": \"AAPL_322579\",\n      \"quarter\": 4,\n      \"symbol\": \"AAPL\",\n      \"time\": \"2019-10-30 22:27:15\",\n      \"title\": \"AAPL - Earnings Call Transcript Q4 2019\",\n      \"year\": 2019\n    },\n    {\n      \"id\": \"AAPL_318112\",\n      \"quarter\": 3,\n      \"symbol\": \"AAPL\",\n      \"time\": \"2019-07-30 22:26:28\",\n      \"title\": \"AAPL - Earnings Call Transcript Q3 2019\",\n      \"year\": 2019\n    },\n    {\n      \"id\": \"AAPL_313737\",\n      \"quarter\": 2,\n      \"symbol\": \"AAPL\",\n      \"time\": \"2019-04-30 19:55:19\",\n      \"title\": \"AAPL - Earnings Call Transcript Q2 2019\",\n      \"year\": 2019\n    },\n    {\n      \"id\": \"AAPL_308757\",\n      \"quarter\": 1,\n      \"symbol\": \"AAPL\",\n      \"time\": \"2019-01-29 21:06:06\",\n      \"title\": \"AAPL - Earnings Call Transcript Q1 2019\",\n      \"year\": 2019\n    }\n  ]\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/transcripts": {
      "get": {
        "summary": "Earnings Call Transcripts",
        "description": "<p>Get earnings call transcripts, audio and participants' list. Data is available for US, UK, European, Australian and Canadian companies.<p>15+ years of data is available with 220,000+ audio which add up to 7TB in size.</p>",
        "operationId": "transcripts",
        "navHeader": "Transcripts",
        "urlId": "earnings-call-transcripts-api",
        "title": "Earnings Call Transcripts API | Finnhub Stock API",
        "examples": [
          {
            "url": "/stock/transcripts?id=AAPL_162777&token=<token>",
            "text": "/stock/transcripts?id=AAPL_162777"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium required.",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Alternative Data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "Transcript's id obtained with <a href=\"#transcripts-list\">Transcripts List endpoint</a>.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/EarningsCallTranscripts"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.transcripts('AAPL_162777'))",
          "go": "res, _, err := finnhubClient.Transcripts(context.Background()).Id(\"AAPL_162777\").Execute()",
          "javascript": "finnhubClient.transcripts(\"AAPL_162777\", (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.transcripts('AAPL_162777'))",
          "kotlin": "println(apiClient.transcripts(\"AAPL_162777\"))",
          "php": "print_r($client->transcripts(\"AAPL_162777\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"audio\": \"https://static.finnhub.io/transcripts_audio/4319666.mp3\",\n  \"id\": \"AAPL_326091\",\n  \"participant\": [\n    {\n      \"name\": \"Tejas Gala\",\n      \"description\": \"Senior Analyst at Corporate Finance and IR\"\n    },\n    {\n      \"name\": \"Tim Cook\",\n      \"description\": \"CEO\"\n    }\n  ],\n  \"quarter\": 1,\n  \"symbol\": \"AAPL\",\n  \"time\": \"2020-01-28 21:35:45\",\n  \"title\": \"AAPL - Earnings call transcripts Q1 2020\",\n  \"transcript\": [\n    {\n      \"name\": \"Operator\",\n      \"speech\": [\n        \"Good day, everyone. Welcome to the Apple Incorporated First Quarter Fiscal Year 2020 Earnings Conference Call. Today's conference is being recorded. At this time for opening remarks and introductions, I would like to turn the call over to Tejas Gala, Senior Analyst, Corporate Finance and Investor Relations. Please go ahead.\"\n      ]\n    },\n    {\n      \"name\": \"Tejas Gala\",\n      \"speech\": [\n        \"Thank you. Good afternoon, and thank you for joining us. Speaking first today is Apple's CEO, Tim Cook, and he'll be followed by CFO, Luca Maestri. After that, we'll open the call to questions from analysts. Please note that some of the information you'll hear during our discussion today will consist of forward-looking statements, including without limitation, those regarding revenue, gross margin, operating expenses, other income and expenses, taxes, capital allocation and future business outlook. Actual results or trends could differ materially from our forecast. For more information, please refer to the risk factors discussed in Apple's most recently filed periodic reports on Form 10-K and Form 10-Q and the Form 8-K filed with the SEC today, along with the associated press release. Apple assumes no obligation to update any forward-looking statements or information, which speaks as of their respective dates. I'd now like to turn the call over to Tim for introductory remarks.\"\n      ]\n    }\n  ],\n  \"year\": 2020\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/social-sentiment": {
      "get": {
        "summary": "Social Sentiment",
        "description": "<p>Get social sentiment for stocks on Reddit and Twitter. This endpoint is currently in Beta.</p>",
        "operationId": "social-sentiment",
        "navHeader": "Social Sentiment",
        "urlId": "social-sentiment",
        "title": "Stocks Social Media Sentiment",
        "examples": [
          {
            "url": "/stock/social-sentiment?symbol=GME&token=<token>",
            "text": "/stock/social-sentiment?symbol=GME"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": null,
        "newEndpoint": "New Endpoint",
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Alternative Data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Company symbol.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "from",
            "description": "From date <code>YYYY-MM-DD</code>.",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "to",
            "description": "To date <code>YYYY-MM-DD</code>.",
            "required": false,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SocialSentiment"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.stock_social_sentiment('GME'))",
          "go": "res, _, err := finnhubClient.SocialSentiment(context.Background()).Symbol(\"GME\").Execute()",
          "javascript": "finnhubClient.socialSentiment('GME', (error, data, response) => {\n  console.log(data);\n});",
          "ruby": "puts(finnhub_client.social_sentiment('GME'))",
          "kotlin": "println(apiClient.socialSentiment(\"GME\", \"\", \"\"))",
          "php": "print_r($client->socialSentiment(\"GME\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"reddit\": [\n    {\n      \"atTime\": \"2021-05-23 03:00:00\",\n      \"mention\": 28,\n      \"positiveScore\": 0.96703655,\n      \"negativeScore\": 0.9858103333333333,\n      \"positiveMention\": 2,\n      \"negativeMention\": 6,\n      \"score\": -0.49759861250000004\n    }\n  ],\n  \"symbol\": \"GME\",\n  \"twitter\": [\n    {\n      \"atTime\": \"2021-05-23 03:00:00\",\n      \"mention\": 46,\n      \"positiveScore\": 0.9227231538461538,\n      \"negativeScore\": 0.9673288148148148,\n      \"positiveMention\": 13,\n      \"negativeMention\": 27,\n      \"score\": -0.35306192500000005\n    }\n  ]\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/investment-theme": {
      "get": {
        "summary": "Investment Themes (Thematic Investing)",
        "description": "<p>Thematic investing involves creating a portfolio (or portion of a portfolio) by gathering together a collection of companies involved in certain areas that you predict will generate above-market returns over the long term. Themes can be based on a concept such as ageing populations or a sub-sector such as robotics, and drones. Thematic investing focuses on predicted long-term trends rather than specific companies or sectors, enabling investors to access structural, one-off shifts that can change an entire industry.</p><p>This endpoint will help you get portfolios of different investment themes that are changing our life and are the way of the future.</p><p>A full list of themes supported can be found <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp=sharing\">here</a>. The theme coverage and portfolios are updated bi-weekly by our analysts. Our approach excludes penny, super-small cap and illiquid stocks.</p>",
        "operationId": "investment-themes",
        "navHeader": "Investment Themes",
        "urlId": "investment-themes-thematic-investing",
        "title": "Investment Themes (Thematic Investing)",
        "examples": [
          {
            "url": "/stock/investment-theme?theme=financialExchangesData&token=<token>",
            "text": "/stock/investment-theme?theme=financialExchangesData"
          },
          {
            "url": "/stock/investment-theme?theme=futureFood&token=<token>",
            "text": "/stock/investment-theme?theme=futureFood"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Alternative Data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "theme",
            "description": "Investment theme. A full list of themes supported can be found <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp=sharing\">here</a>.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/InvestmentThemes"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.stock_investment_theme('financialExchangesData'))",
          "go": "res, _, err := finnhubClient.InvestmentThemes(context.Background()).Theme(\"financialExchangesData\").Execute()",
          "javascript": "finnhubClient.investmentThemes('financialExchangesData', (error, data, response) => {\n  console.log(data);\n});",
          "ruby": "puts(finnhub_client.investment_themes('financialExchangesData'))",
          "kotlin": "println(apiClient.investmentThemes(\"financialExchangesData\"))",
          "php": "print_r($client->investmentThemes(\"financialExchangesData\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"data\": [\n    {\n      \"symbol\": \"ICE\"\n    },\n    {\n      \"symbol\": \"NDAQ\"\n    },\n    {\n      \"symbol\": \"CBOE\"\n    },\n    {\n      \"symbol\": \"FDS\"\n    },\n    {\n      \"symbol\": \"SPGI\"\n    },\n    {\n      \"symbol\": \"TW\"\n    }\n  ],\n  \"theme\": \"financialExchangesData\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/supply-chain": {
      "get": {
        "summary": "Supply Chain Relationships",
        "description": "<p>This endpoint provides an overall map of public companies' key customers and suppliers. The data offers a deeper look into a company's supply chain and how products are created. The data will help investors manage risk, limit exposure or generate alpha-generating ideas and trading insights.</p>",
        "operationId": "supply-chain-relationships",
        "navHeader": "Supply Chain",
        "urlId": "supply-chain-relationships",
        "title": "Supply Chain Relationships",
        "examples": [
          {
            "url": "/stock/supply-chain?symbol=AAPL&token=<token>",
            "text": "/stock/supply-chain?symbol=AAPL"
          },
          {
            "url": "/stock/supply-chain?symbol=WMT&token=<token>",
            "text": "/stock/supply-chain?symbol=WMT"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Alternative Data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/SupplyChainRelationships"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.stock_supply_chain('AAPL'))",
          "go": "res, _, err := finnhubClient.SupplyChainRelationships(context.Background()).Symbol(\"AAPL\").Execute()",
          "javascript": "finnhubClient.supplyChainRelationships('AAPL', (error, data, response) => {\n  console.log(data);\n});",
          "ruby": "puts(finnhub_client.supply_chain_relationships('AAPL'))",
          "kotlin": "println(apiClient.supplyChainRelationships(\"AAPL\"))",
          "php": "print_r($client->supplyChainRelationships(\"AAPL\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"data\": [\n    {\n      \"customer\": true,\n      \"name\": \"Costco Wholesale Corporation\",\n      \"oneMonthCorrelation\": 0.26,\n      \"oneYearCorrelation\": 0.63,\n      \"sixMonthCorrelation\": 0.87,\n      \"supplier\": false,\n      \"symbol\": \"COST\",\n      \"threeMonthCorrelation\": 0.89,\n      \"twoWeekCorrelation\": 0.35,\n      \"twoYearCorrelation\": 0.91\n    },\n    {\n      \"customer\": true,\n      \"name\": \"Qualcomm\",\n      \"oneMonthCorrelation\": 0.06,\n      \"oneYearCorrelation\": 0.58,\n      \"sixMonthCorrelation\": 0.87,\n      \"supplier\": true,\n      \"symbol\": \"QCOM\",\n      \"threeMonthCorrelation\": 0.88,\n      \"twoWeekCorrelation\": 0.71,\n      \"twoYearCorrelation\": 0.94\n    },\n    {\n      \"customer\": false,\n      \"name\": \"Foxconn Industrial Internet Co., Ltd.\",\n      \"oneMonthCorrelation\": 0.25,\n      \"oneYearCorrelation\": -0.48,\n      \"sixMonthCorrelation\": -0.65,\n      \"supplier\": true,\n      \"symbol\": \"601138.SS\",\n      \"threeMonthCorrelation\": -0.79,\n      \"twoWeekCorrelation\": -0.55,\n      \"twoYearCorrelation\": -0.6\n    }\n  ],\n  \"symbol\": \"AAPL\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/esg": {
      "get": {
        "summary": "Company ESG Scores",
        "description": "<p>This endpoint provides ESG scores and important indicators for 1000+ global companies. The data is collected through company's public ESG disclosure and public sources.</p><p>Our ESG scoring models takes into account more than 150 different inputs to calculate the level of ESG risks and how well a company is managing them. A higher score means lower ESG risk or better ESG management. ESG scores are in the the range of 0-100. Some key indicators might contain letter-grade score from C- to A+ with C- is the lowest score and A+ is the highest score.</p>",
        "operationId": "company-esg-score",
        "navHeader": "Company ESG",
        "urlId": "company-esg-score-api",
        "title": "Company ESG Scores API",
        "examples": [
          {
            "url": "/stock/esg?symbol=AAPL&token=<token>",
            "text": "/stock/esg?symbol=AAPL"
          },
          {
            "url": "/stock/esg?symbol=WMT&token=<token>",
            "text": "/stock/esg?symbol=WMT"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Alternative Data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CompanyESG"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.company_esg_score(\"AAPL\"))",
          "go": "res, _, err := finnhubClient.CompanyEsgScore(context.Background()).Symbol(\"AAPL\").Execute()",
          "javascript": "finnhubClient.companyEsgScore('AAPL', (error, data, response) => {\n    console.log(data);\n});",
          "ruby": "puts(finnhub_client.company_esg_score('AAPL'))",
          "kotlin": "println(apiClient.companyEsgScore(\"AAPL\"))",
          "php": "print_r($client->companyEsgScore(\"AAPL\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"data\": {\n    \"womenManagementPercentage\": 17.02,\n    \"adultContent\": false,\n    \"alcoholic\": false,\n    \"animalTesting\": false,\n    \"antitrust\": \"C+\",\n    \"asianEmployeePercentage\": 27,\n    \"asianManagementPercentage\": 27,\n    \"blackEmployeePercentage\": 9,\n    \"blackManagementPercentage\": 4,\n    \"carbonReductionPolicy\": null,\n    \"catholic\": false,\n    \"climateStrategy\": \"A+\",\n    \"co2EmissionScope1\": 47430,\n    \"co2EmissionScope2\": 890189,\n    \"co2EmissionScope3\": 22648000,\n    \"co2EmissionTotal\": 937619,\n    \"coalEnergy\": false,\n    \"ecofriendlyPackaging\": null,\n    \"environmentalReporting\": true,\n    \"firearms\": false,\n    \"fuelEfficiencyConsumption\": null,\n    \"furLeather\": false,\n    \"gambling\": false,\n    \"gmo\": false,\n    \"hazardousSubstances\": null,\n    \"hispanicLatinoEmployeePercentage\": 14,\n    \"hispanicLatinoManagementPercentage\": 8,\n    \"humanRightsPolicy\": \"C-\",\n    \"militaryContract\": false,\n    \"nuclear\": false,\n    \"palmOil\": false,\n    \"pesticides\": false,\n    \"privacyPolicy\": \"B-\",\n    \"recallPolicySafety\": null,\n    \"recyclingPolicy\": null,\n    \"stakeholderEngagement\": null,\n    \"sustainableForestryPolicy\": null,\n    \"tobacco\": false,\n    \"totalWomenPercentage\": 34,\n    \"waterEfficiencyConsumption\": null,\n    \"weapons\": false,\n    \"whiteEmployeePercentage\": 47,\n    \"whiteManagementPercentage\": 59,\n    \"workplaceHealthSafety\": null\n  },\n  \"environmentScore\": 73.21,\n  \"governanceScore\": 56.06,\n  \"socialScore\": 45.81,\n  \"symbol\": \"AAPL\",\n  \"totalESGScore\": 56.04\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/earnings-quality-score": {
      "get": {
        "summary": "Company Earnings Quality Score",
        "description": "<p>This endpoint provides Earnings Quality Score for global companies.</p><p> Earnings quality refers to the extent to which current earnings predict future earnings. \"High-quality\" earnings are expected to persist, while \"low-quality\" earnings do not. A higher score means a higher earnings quality</p><p>Finnhub uses a proprietary model which takes into consideration 4 criteria:</p> <ul style=\"list-style-type: unset; margin-left: 30px;\"><li>Profitability</li><li>Growth</li><li>Cash Generation & Capital Allocation</li><li>Leverage</li></ul><br/><p>We then compare the metrics of each company in each category against its peers in the same industry to gauge how quality its earnings is.</p>",
        "operationId": "company-earnings-quality-score",
        "navHeader": "Earnings Quality Score",
        "urlId": "company-earnings-quality-score-api",
        "title": "Company Earnings Quality Score API",
        "examples": [
          {
            "url": "/stock/earnings-quality-score?symbol=AAPL&freq=quarterly&token=<token>",
            "text": "/stock/earnings-quality-score?symbol=AAPL&freq=quarterly"
          },
          {
            "url": "/stock/earnings-quality-score?symbol=WMT&freq=quarterly&token=<token>",
            "text": "/stock/earnings-quality-score?symbol=WMT&freq=quarterly"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Alternative Data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "freq",
            "description": "Frequency. Currently support <code>annual</code> and <code>quarterly</code>",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/CompanyEarningsQualityScore"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.company_earnings_quality_score('AAPL', 'quarterly'))",
          "go": "res, _, err := finnhubClient.CompanyEarningsQualityScore(context.Background()).Symbol(\"AAPL\").Freq(\"quarterly\").Execute()",
          "javascript": "finnhubClient.companyEarningsQualityScore('AAPL', 'quarterly', (error, data, response) => {\n    console.log(data);\n});",
          "ruby": "puts(finnhub_client.company_earnings_quality_score('AAPL', 'quarterly'))",
          "kotlin": "println(apiClient.companyEarningsQualityScore(\"AAPL\", \"quarterly\"))",
          "php": "print_r($client->companyEarningsQualityScore(\"AAPL\", \"quarterly\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"data\": [\n    {\n      \"capitalAllocation\": 67.6878,\n      \"growth\": 55.8022,\n      \"letterScore\": \"B+\",\n      \"leverage\": 24.5122,\n      \"period\": \"2021-06-01\",\n      \"profitability\": 82.3843,\n      \"score\": 57.5966\n    },\n    {\n      \"capitalAllocation\": 75.1464,\n      \"growth\": 70.2461,\n      \"letterScore\": \"A-\",\n      \"leverage\": 39.5682,\n      \"period\": \"2021-03-01\",\n      \"profitability\": 88.4613,\n      \"score\": 68.3555\n    },\n    {\n      \"capitalAllocation\": 43.8708,\n      \"growth\": 68.1803,\n      \"letterScore\": \"A-\",\n      \"leverage\": 56.1926,\n      \"period\": \"2020-12-01\",\n      \"profitability\": 92.6311,\n      \"score\": 65.2187\n    },\n  ],\n  \"freq\": \"quarterly\",\n  \"symbol\": \"AAPL\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/covid19/us": {
      "get": {
        "summary": "COVID-19",
        "description": "Get real-time updates on the number of COVID-19 (Corona virus) cases in the US with a state-by-state breakdown. Data is sourced from CDC and reputable sources. You can also access this API <a href=\"https://rapidapi.com/Finnhub/api/finnhub-real-time-covid-19\" target=\"_blank\" rel=\"nofollow\">here</a>",
        "operationId": "covid-19",
        "navHeader": "COVID-19",
        "urlId": "covid-19",
        "title": "Real-time COVID-19 data API",
        "examples": [
          {
            "url": "/covid19/us?token=<token>",
            "text": "/covid19/us"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": null,
        "newEndpoint": null,
        "highUsage": "High Usage",
        "tags": [
          "Default"
        ],
        "section": "Alternative Data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CovidInfo"
              }
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.covid19())",
          "go": "res, _, err := finnhubClient.Covid19(context.Background()).Execute()",
          "javascript": "finnhubClient.covid19((error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.covid19())",
          "kotlin": "println(apiClient.covid19())",
          "php": "print_r($client->covid19());",
          "useTemplate": true
        },
        "sampleResponse": "[\n  {\n    \"state\": \"New York\",\n    \"case\": 8403,\n    \"death\": 46,\n    \"updated\": \"2020-03-20 21:38:50\"\n  },\n  {\n    \"state\": \"Washington\",\n    \"case\": 1524,\n    \"death\": 83,\n    \"updated\": \"2020-03-20 21:38:50\"\n  }\n]",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/fda-advisory-committee-calendar": {
      "get": {
        "summary": "FDA Committee Meeting Calendar",
        "description": "FDA's advisory committees are established to provide functions which support the agency's mission of protecting and promoting the public health, while meeting the requirements set forth in the Federal Advisory Committee Act. Committees are either mandated by statute or established at the discretion of the Department of Health and Human Services. Each committee is subject to renewal at two-year intervals unless the committee charter states otherwise.",
        "operationId": "fda-committee-meeting-calendar",
        "navHeader": "FDA Calendar",
        "urlId": "fda-committee-meeting-calendar",
        "title": "FDA Calendar | Finnhub",
        "examples": [
          {
            "url": "/fda-advisory-committee-calendar?token=<token>",
            "text": "/fda-advisory-committee-calendar"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": null,
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Alternative Data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FDAComitteeMeeting"
              }
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.fda_calendar())",
          "go": "res, _, err := finnhubClient.FdaCommitteeMeetingCalendar(context.Background()).Execute()",
          "javascript": "finnhubClient.fdaCommitteeMeetingCalendar((error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.fda_committee_meeting_calendar())",
          "kotlin": "println(apiClient.fdaCommitteeMeetingCalendar())",
          "php": "print_r($client->fdaCommitteeMeetingCalendar());",
          "useTemplate": true
        },
        "sampleResponse": "[\n  {\n    \"fromDate\": \"2016-01-11 19:00:00\",\n    \"toDate\": \"2016-01-11 19:00:00\",\n    \"eventDescription\": \"January 12, 2016: Meeting of the Psychopharmacologic Drugs Advisory Committee Meeting Announcement - 01/11/2016 - 01/11/2016\",\n    \"url\": \"https://www.fda.gov/advisory-committees/advisory-committee-calendar/january-12-2016-meeting-psychopharmacologic-drugs-advisory-committee-meeting-announcement-01112016\"\n  },\n  {\n    \"fromDate\": \"2016-01-14 13:00:00\",\n    \"toDate\": \"2016-01-14 17:00:00\",\n    \"eventDescription\": \"January 14, 2016: Vaccines and Related Biological Products Advisory Committee Meeting Announcement - 01/14/2016 - 01/14/2016\",\n    \"url\": \"https://www.fda.gov/advisory-committees/advisory-committee-calendar/january-14-2016-vaccines-and-related-biological-products-advisory-committee-meeting-announcement\"\n  }\n]",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/uspto-patent": {
      "get": {
        "summary": "USPTO Patents",
        "description": "List USPTO patents for companies. Limit to 250 records per API call.",
        "operationId": "stock-uspto-patent",
        "navHeader": "USPTO Patents",
        "urlId": "stock-uspto-patent",
        "title": "USPTO Patents",
        "examples": [
          {
            "url": "/stock/uspto-patent?symbol=NVDA&from=2021-01-01&to=2021-12-31&token=<token>",
            "text": "/stock/uspto-patent?symbol=NVDA&from=2021-01-01&to=2021-12-31"
          }
        ],
        "widget": null,
        "premium": null,
        "newEndpoint": "New",
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Alternative Data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "from",
            "description": "From date <code>YYYY-MM-DD</code>.",
            "required": true,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "to",
            "description": "To date <code>YYYY-MM-DD</code>.",
            "required": true,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UsptoPatentResult"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.stock_uspto_patent('NVDA', _from=\"2020-06-01\", to=\"2021-06-10\"))",
          "go": "res, _, err := finnhubClient.StockUsptoPatent(context.Background()).Symbol(\"NVDA\").From(\"2020-05-01\").To(\"2021-05-01\").Execute()",
          "javascript": "finnhubClient.stockUsptoPatent(\"NVDA\", \"2020-01-01\", \"2021-05-01\", (error, data, response) => {\n\tconsole.log(data)\n});",
          "ruby": "puts(finnhub_client.stock_uspto_patent('NVDA', \"2020-06-01\", \"2021-06-10\"))",
          "kotlin": "println(apiClient.stockUsptoPatent(\"NVDA\", from = \"2020-06-01\", to = \"2021-06-10\"))",
          "php": "print_r($client->stockUsptoPatent(\"NVDA\", \"2020-06-01\", \"2021-06-10\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n   \"data\":[\n      {\n         \"applicationNumber\":\"17163855\",\n         \"companyFilingName\":[\n            \"NVIDIA CORPORATION\"\n         ],\n         \"description\":\"DYNAMIC DIRECTIONAL ROUNDING\",\n         \"filingDate\":\"2021-02-01 00:00:00\",\n         \"filingStatus\":\"Application\",\n         \"patentNumber\":\"US20210232366A1\",\n         \"publicationDate\":\"2021-07-29 00:00:00\",\n         \"type\":\"Utility\",\n         \"url\":\"https://patentimages.storage.googleapis.com/33/ed/0c/0b6b6f87e55fea/US20210232366A1.pdf\"\n      },\n      {\n         \"applicationNumber\":\"17162550\",\n         \"companyFilingName\":[\n            \"NVIDIA CORPORATION\"\n         ],\n         \"description\":\"REAL-TIME HARDWARE-ASSISTED GPU TUNING USING MACHINE LEARNING\",\n         \"filingDate\":\"2021-01-29 00:00:00\",\n         \"filingStatus\":\"Application\",\n         \"patentNumber\":\"US20210174569A1\",\n         \"publicationDate\":\"2021-06-10 00:00:00\",\n         \"type\":\"Utility\",\n         \"url\":\"https://patentimages.storage.googleapis.com/23/40/45/98b27a921d657c/US20210174569A1.pdf\"\n      }\n   ],\n   \"symbol\":\"NVDA\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/visa-application": {
      "get": {
        "summary": "H1-B Visa Application",
        "description": "Get a list of H1-B and Permanent visa applications for companies from the DOL. The data is updated quarterly.",
        "operationId": "stock-visa-application",
        "navHeader": "Visa Application",
        "urlId": "stock-visa-application",
        "title": "H1-B Visa Application API for public companies",
        "examples": [
          {
            "url": "/stock/visa-application?symbol=AAPL&from=2021-01-01&to=2021-12-31&token=<token>",
            "text": "/stock/visa-application?symbol=AAPL&from=2021-01-01&to=2021-12-31"
          }
        ],
        "widget": null,
        "premium": null,
        "newEndpoint": "New",
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Alternative Data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "from",
            "description": "From date <code>YYYY-MM-DD</code>. Filter on the <code>beginDate</code> column.",
            "required": true,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "to",
            "description": "To date <code>YYYY-MM-DD</code>. Filter on the <code>beginDate</code> column.",
            "required": true,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/VisaApplicationResult"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.stock_visa_application(\"AAPL\", \"2021-01-01\", \"2022-06-15\"))",
          "go": "res, _, err := finnhubClient.StockVisaApplication(context.Background()).Symbol(\"AAPL\").From(\"2020-05-01\").To(\"2021-05-01\").Execute()",
          "javascript": "finnhubClient.stockVisaApplication(\"AAPL\", \"2020-01-01\", \"2021-05-01\", (error, data, response) => {\n\tconsole.log(data)\n});",
          "ruby": "puts(finnhub_client.stock_visa_application('AAPL', \"2020-06-01\", \"2021-06-10\"))",
          "kotlin": "println(apiClient.stockVisaApplication(\"AAPL\", from = \"2020-06-01\", to = \"2021-06-10\"))",
          "php": "print_r($client->stockVisaApplication(\"AAPL\", \"2020-06-01\", \"2021-06-10\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"data\": [\n    {\n      \"year\": 2020,\n      \"quarter\": 1,\n      \"symbol\": \"AAPL\",\n      \"caseNumber\": \"I-200-19268-472068\",\n      \"caseStatus\": \"Certified\",\n      \"receivedDate\": \"2019-09-25\",\n      \"visaClass\": \"H-1B\",\n      \"jobTitle\": \"ASIC DESIGN VERIFICATION ENGINEER\",\n      \"socCode\": \"17-2072\",\n      \"fullTimePosition\": \"Y\",\n      \"beginDate\": \"2019-10-14\",\n      \"endDate\": \"2022-10-13\",\n      \"employerName\": \"APPLE INC.\",\n      \"worksiteAddress\": \"320 S Capital of Texas Highway\",\n      \"worksiteCity\": \"West Lake Hills\",\n      \"worksiteCounty\": \"Travis\",\n      \"worksiteState\": \"TX\",\n      \"worksitePostalCode\": \"78746\",\n      \"wageRangeFrom\": 120000,\n      \"wageRangeTo\": null,\n      \"wageUnitOfPay\": \"Year\",\n      \"wageLevel\": \"II\",\n      \"h1bDependent\": \"N\"\n    },\n    ...\n  ],\n  \"symbol\": \"AAPL\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/lobbying": {
      "get": {
        "summary": "Senate Lobbying",
        "description": "Get a list of reported lobbying activities in the Senate and the House.",
        "operationId": "stock-lobbying",
        "navHeader": "Senate Lobbying",
        "urlId": "stock-lobbying",
        "title": "Senate and House lobbying data from public companies",
        "examples": [
          {
            "url": "/stock/lobbying?symbol=AAPL&from=2021-01-01&to=2022-12-31&token=<token>",
            "text": "/stock/lobbying?symbol=AAPL&from=2021-01-01&to=2022-12-31"
          }
        ],
        "widget": null,
        "premium": null,
        "newEndpoint": "New",
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Alternative Data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "from",
            "description": "From date <code>YYYY-MM-DD</code>.",
            "required": true,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "to",
            "description": "To date <code>YYYY-MM-DD</code>.",
            "required": true,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/LobbyingResult"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.stock_lobbying(\"AAPL\", \"2021-01-01\", \"2022-06-15\"))",
          "go": "res, _, err := finnhubClient.StockLobbying(context.Background()).Symbol(\"AAPL\").From(\"2020-05-01\").To(\"2022-05-01\").Execute()",
          "javascript": "finnhubClient.stockLobbying(\"AAPL\", \"2020-01-01\", \"2022-05-01\", (error, data, response) => {\n\tconsole.log(data)\n});",
          "ruby": "puts(finnhub_client.stock_lobbying('AAPL', \"2020-06-01\", \"2022-06-10\"))",
          "kotlin": "println(apiClient.stockLobbying(\"AAPL\", from = \"2020-06-01\", to = \"2022-06-10\"))",
          "php": "print_r($client->stockLobbying(\"AAPL\", \"2020-06-01\", \"2022-06-10\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"data\":[\n    {\n      \"symbol\":\"AAPL\",\n      \"name\":\"APPLE, INC.\",\n      \"description\":\"Hardware and software maunfacturer\",\n      \"country\":\"US\",\n      \"uuid\":\"db75bb6f-162a-433a-a997-a679eb4c6af6\",\n      \"year\":2020,\n      \"period\":\"fourth_quarter\",\n      \"type\":\"Q4\",\n      \"documentUrl\":\"https://lda.senate.gov/filings/public/filing/db75bb6f-162a-433a-a997-a679eb4c6af6/print/\",\n      \"income\":40000,\n      \"expenses\":null,\n      \"postedName\":\"\",\n      \"dtPosted\":\"\",\n      \"clientId\":\"173094\",\n      \"registrantId\":\"86196\",\n      \"senateId\":\"86196-173094\",\n      \"houseRegistrantId\":\"36548\"\n    },\n    {\n      \"symbol\":\"AAPL\",\n      \"name\":\"APPLE INC\",\n      \"description\":\"\",\n      \"country\":\"US\",\n      \"uuid\":\"cad6db2f-c3ca-4b9d-bc24-4c56fc7eaadb\",\n      \"year\":2020,\n      \"period\":\"fourth_quarter\",\n      \"type\":\"Q4\",\n      \"documentUrl\":\"https://lda.senate.gov/filings/public/filing/cad6db2f-c3ca-4b9d-bc24-4c56fc7eaadb/print/\",\n      \"income\":null,\n      \"expenses\":1450000,\n      \"postedName\":\"\",\n      \"dtPosted\":\"\",\n      \"clientId\":\"103979\",\n      \"registrantId\":\"4152\",\n      \"senateId\":\"4152-103979\",\n      \"houseRegistrantId\":\"31450\"\n    }\n  ],\n  \"symbol\":\"AAPL\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/stock/usa-spending": {
      "get": {
        "summary": "USA Spending",
        "description": "Get a list of government's spending activities from USASpending dataset for public companies. This dataset can help you identify companies that win big government contracts which is extremely important for industries such as Defense, Aerospace, and Education.",
        "operationId": "stock-usa-spending",
        "navHeader": "USA Spending",
        "urlId": "stock-usa-spending",
        "title": "USA Spending | Government contracts API",
        "examples": [
          {
            "url": "/stock/usa-spending?symbol=LMT&from=2021-01-01&to=2022-12-31&token=<token>",
            "text": "/stock/usa-spending?symbol=LMT&from=2021-01-01&to=2022-12-31"
          },
          {
            "url": "/stock/usa-spending?symbol=BA&from=2021-01-01&to=2022-12-31&token=<token>",
            "text": "/stock/usa-spending?symbol=BA&from=2021-01-01&to=2022-12-31"
          }
        ],
        "widget": null,
        "premium": null,
        "newEndpoint": "New",
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Alternative Data",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "symbol",
            "description": "Symbol.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "from",
            "description": "From date <code>YYYY-MM-DD</code>. Filter for <code>actionDate</code>",
            "required": true,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "to",
            "description": "To date <code>YYYY-MM-DD</code>. Filter for <code>actionDate</code>",
            "required": true,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/UsaSpendingResult"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.stock_usa_spending(\"AAPL\", \"2021-01-01\", \"2022-06-15\"))",
          "go": "res, _, err := finnhubClient.StockUsaSpending(context.Background()).Symbol(\"AAPL\").From(\"2020-05-01\").To(\"2022-05-01\").Execute()",
          "javascript": "finnhubClient.stockUsaSpending(\"AAPL\", \"2020-01-01\", \"2022-05-01\", (error, data, response) => {\n\tconsole.log(data)\n});",
          "ruby": "puts(finnhub_client.stock_usa_spending('AAPL', \"2020-06-01\", \"2022-06-10\"))",
          "kotlin": "println(apiClient.stockUsaSpending(\"AAPL\", from = \"2020-06-01\", to = \"2022-06-10\"))",
          "php": "print_r($client->stockUsaSpending(\"AAPL\", \"2020-06-01\", \"2022-06-10\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"data\":[\n    {\n      \"symbol\":\"AAPL\",\n      \"recipientName\":\"APPLE INC.\",\n      \"recipientParentName\":\"APPLE INC.\",\n      \"country\":\"USA\",\n      \"totalValue\":4238,\n      \"actionDate\":\"2021-11-12\",\n      \"performanceStartDate\":\"2021-11-12\",\n      \"performanceEndDate\":\"2021-12-10\",\n      \"awardingAgencyName\":\"SMITHSONIAN INSTITUTION (SI)\",\n      \"awardingSubAgencyName\":\"SMITHSONIAN INSTITUTION\",\n      \"awardingOfficeName\":\"SMITHSONIAN ASTROPHYSICAL OBSERVATORY\",\n      \"performanceCountry\":\"USA\",\n      \"performanceCity\":\"CUPERTINO\",\n      \"performanceCounty\":\"SANTA CLARA\",\n      \"performanceState\":\"CALIFORNIA\",\n      \"performanceZipCode\":\"950140642\",\n      \"performanceCongressionalDistrict\":\"17\",\n      \"awardDescription\":\"MACBOOK PRO\",\n      \"naicsCode\":\"334111\",\n      \"permalink\":\"https://www.usaspending.gov/award/CONT_AWD_33131222P00465925_3300_-NONE-_-NONE-/\"\n    }\n  ],\n  \"symbol\":\"AAPL\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/bond/profile": {
      "get": {
        "summary": "Bond Profile",
        "description": "Get general information of a bond. You can query by FIGI, ISIN or CUSIP",
        "operationId": "bond-profile",
        "navHeader": "Bond Profile",
        "urlId": "bond-profile",
        "title": "Bond Profile & Fundamental Data",
        "examples": [
          {
            "url": "/bond/profile?figi=BBG0152KFHS6&token=<token>",
            "text": "/bond/profile?figi=BBG0152KFHS6"
          },
          {
            "url": "/bond/profile?isin=US912810TD00&token=<token>",
            "text": "/bond/profile?isin=US912810TD00"
          },
          {
            "url": "/bond/profile?cusip=912810TD0&token=<token>",
            "text": "/bond/profile?cusip=912810TD0"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Bonds",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "isin",
            "description": "ISIN",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "cusip",
            "description": "CUSIP",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "figi",
            "description": "FIGI",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BondProfile"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.bond_profile(isin='US912810TD00'))",
          "go": "res, _, err := finnhubClient.BondProfile(context.Background()).Isin(\"US912810TD00\").Execute()",
          "javascript": "finnhubClient.bondProfile({'isin': 'US912810TD00'}, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.bond_profile({isin: 'US912810TD00'}))",
          "kotlin": "println(apiClient.bondProfile(isin = \"US912810TD00\", cusip = null, figi = null))",
          "php": "print_r($client->bondProfile(\"US912810TD00\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"isin\":\"US912810TD00\",\n  \"cusip\":\"\",\n  \"figi\":\"BBG0152KFHS6\",\n  \"coupon\":2.25,\n  \"maturityDate\":\"2052-02-15\",\n  \"offeringPrice\":100,\n  \"issueDate\":\"2022-03-15\",\n  \"bondType\":\"US Government\",\n  \"debtType\":\"\",\n  \"industryGroup\":\"Government\",\n  \"industrySubGroup\":\"U.S. Treasuries\",\n  \"asset\":\"\",\n  \"assetType\":\"\",\n  \"datedDate\":\"2022-02-15\",\n  \"firstCouponDate\":\"2022-08-15\",\n  \"originalOffering\":20000000000,\n  \"amountOutstanding\":36914000000,\n  \"paymentFrequency\":\"Semi-Annual\",\n  \"securityLevel\":\"\",\n  \"callable\":null,\n  \"couponType\":\"\",\n  \"dayCount\":\"\"\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/bond/price": {
      "get": {
        "summary": "Bond price data",
        "description": "<p>Get bond's price data. The following datasets are supported:</p><table class=\"table table-hover\">\n  <thead>\n    <tr>\n      <th>Exchange</th>\n      <th>Segment</th>\n      <th>Delay</th>\n    </tr>\n  </thead>\n  <tbody>\n  <tr>\n      <td class=\"text-blue\">US Government Bonds</th>\n      <td>Government Bonds</td>\n      <td>End-of-day</td>\n    </tr>\n    <tr>\n      <td class=\"text-blue\">FINRA Trace</th>\n      <td>BTDS: US Corporate Bonds</td>\n      <td>Delayed 4h</td>\n    </tr>\n    <tr>\n      <td class=\"text-blue\">FINRA Trace</th>\n      <td>144A Bonds</td>\n      <td>Delayed 4h</td>\n    </tr>\n  </tbody>\n</table>",
        "operationId": "bond-price",
        "navHeader": "Bond Price",
        "urlId": "bond-price",
        "title": "Bond price API | Corporate bonds API",
        "examples": [
          {
            "url": "/bond/price?isin=US912810TD00&from=1590988249&to=1649099548&token=<token>",
            "text": "/bond/price?isin=US912810TD00&from=1590988249&to=1649099548"
          }
        ],
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Bonds",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "isin",
            "description": "ISIN.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "from",
            "description": "UNIX timestamp. Interval initial value.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "to",
            "description": "UNIX timestamp. Interval end value.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BondCandles"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.bond_price('US912810TD00', 1590988249, 1649099548))",
          "go": "res, _, err := finnhubClient.BondPrice(context.Background()).Isin(\"US912810TD00\").From(1590988249).To(1649099548).Execute()",
          "javascript": "finnhubClient.bondPrice(\"US912810TD00\", 1590988249, 1649099548, (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.bond_price('US912810TD00', 1590988249, 1649099548))",
          "kotlin": "println(apiClient.bondPrice(\"US912810TD00\", 1590988249, 1649099548))",
          "php": "print_r($client->bondPrice(\"US912810TD00\", 1590988249, 1649099548));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"c\":[\n    97.5,\n    97.96875,\n    98.78125,\n  ],\n  \"s\":\"ok\",\n  \"t\":[\n    1644883200,\n    1644969600,\n    1645056000,\n  ]\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/bond/tick": {
      "get": {
        "summary": "Bond Tick Data",
        "description": "<p>Get trade-level data for bonds. The following datasets are supported:</p><table class=\"table table-hover\">\n  <thead>\n    <tr>\n      <th>Exchange</th>\n      <th>Segment</th>\n      <th>Delay</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td class=\"text-blue\">FINRA Trace</th>\n      <td>BTDS: US Corporate Bonds</td>\n      <td>Delayed 4h</td>\n    </tr>\n    <tr>\n      <td class=\"text-blue\">FINRA Trace</th>\n      <td>144A Bonds</td>\n      <td>Delayed 4h</td>\n    </tr>\n  </tbody>\n</table>",
        "operationId": "bond-tick",
        "navHeader": "Tick/Trade Data",
        "urlId": "bond-tick",
        "title": "Bond Tick data | FINRA TRACE API | Corporate bonds API",
        "examples": [
          {
            "url": "/bond/tick?isin=US693475BF18&date=2022-08-19&limit=50&skip=6&format=json&exchange=trace&token=<token>",
            "text": "/bond/tick?isin=US693475BF18&date=2022-08-19&limit=50&skip=6&format=json&exchange=trace"
          }
        ],
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Bonds",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "isin",
            "description": "ISIN.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "date",
            "description": "Date: 2020-04-02.",
            "required": true,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Limit number of ticks returned. Maximum value: <code>25000</code>",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of ticks to skip. Use this parameter to loop through the entire data.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "exchange",
            "description": "Currently support the following values: <code>trace</code>.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BondTickData"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.bond_tick('US693475BF18', '2022-08-19', 500, 0, 'trace'))",
          "go": "res, _, err := finnhubClient.BondTick(context.Background()).Isin(\"US693475BF18\").Date(\"2022-08-19\").Limit(50).Skip(0).Exchange(\"trace\").Execute()",
          "javascript": "finnhubClient.bondTick(\"US693475BF18\", \"2022-08-19\", 500, 0, 'trace', (error, data, response) => {\n  console.log(data);\n});",
          "ruby": "puts(finnhub_client.bond_tick('US693475BF18', '2022-08-19', 500, 0, 'trace'))",
          "kotlin": "println(apiClient.bondTick(\"US693475BF18\", \"2022-08-19\", 500, 0, 'trace'))",
          "php": "print_r($client->bondTick(\"US693475BF18\", \"2022-08-19\", 500, 0, \"trace\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n   \"c\":[[],[],[]],\n   \"count\":3,\n   \"cp\":[\n      \"3\",\n      \"1\",\n      \"1\"\n   ],\n   \"p\":[\n      100.592,\n      100.492,\n      100.234\n   ],\n   \"si\":[\n      \"2\",\n      \"2\",\n      \"2\"\n   ],\n   \"skip\":6,\n   \"t\":[\n      1660929161000,\n      1660929161000,\n      1660929778000\n   ],\n   \"total\":211,\n   \"v\":[\n      3000,\n      3000,\n      50000\n   ]\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/bond/yield-curve": {
      "get": {
        "summary": "Bond Yield Curve",
        "description": "Get yield curve data for Treasury bonds.",
        "operationId": "bond-yield-curve",
        "navHeader": "Yield Curve",
        "urlId": "bond-yield-curve",
        "title": "Treasury Bonds Yield Curve",
        "examples": [
          {
            "url": "/bond/yield-curve?code=10y&token=<token>",
            "text": "/bond/yield-curve?code=10y"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Bonds",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "description": "Bond's code. You can find the list of supported code <a href=\"https://docs.google.com/spreadsheets/d/1iA-lM0Kht7lsQZ7Uu_s6r2i1BbQNUNO9eGkO5-zglHg/edit?usp=sharing\" target=\"_blank\" rel=\"noopener\">here</a>.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/BondYieldCurve"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.bond_yield_curve('10y'))",
          "go": "res, _, err := finnhubClient.BondYieldCurve(context.Background()).Code(\"10y\").Execute()",
          "javascript": "finnhubClient.bondYieldCurve(\"10y\", (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.bond_yield_curve('10y'))",
          "kotlin": "println(apiClient.bondYieldCurve(\"10y\"))",
          "php": "print_r($client->bondYieldCurve(\"10y\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"code\": \"10y\",\n  \"data\": [\n    {\n      \"d\": \"2022-10-31\",\n      \"v\": 4.1\n    },\n    {\n      \"d\": \"2022-11-01\",\n      \"v\": 4.07\n    }\n  ]\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/country": {
      "get": {
        "summary": "Country Metadata",
        "description": "List all countries and metadata.",
        "operationId": "country",
        "navHeader": "Country List",
        "urlId": "country",
        "title": "Country List",
        "examples": [
          {
            "url": "/country?token=<token>",
            "text": "/country"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": null,
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Economic",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CountryMetadata"
              }
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.country())",
          "go": "res, _, err := finnhubClient.Country(context.Background()).Execute()",
          "javascript": "finnhubClient.country((error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.country())",
          "kotlin": "println(apiClient.country())",
          "php": "print_r($client->country());",
          "useTemplate": true
        },
        "sampleResponse": "[\n  {\n    \"code2\": \"US\",\n    \"code3\": \"USA\",\n    \"codeNo\": \"840\",\n    \"country\": \"United States of America (the)\",\n    \"currency\": \"US Dollar\",\n    \"currencyCode\": \"USD\",\n    \"region\": \"Americas\",\n    \"subRegion\": \"Northern America\"\n  },\n  {\n    \"code2\": \"GB\",\n    \"code3\": \"GBR\",\n    \"codeNo\": \"826\",\n    \"country\": \"United Kingdom of Great Britain and Northern Ireland (the)\",\n    \"currency\": \"Sterling\",\n    \"currencyCode\": \"GBP\",\n    \"region\": \"Europe\",\n    \"subRegion\": \"Northern Europe\"\n  }\n]",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/calendar/economic": {
      "get": {
        "summary": "Economic Calendar",
        "description": "<p>Get recent and upcoming economic releases.</p><p>Historical events and surprises are available for Enterprise clients.</p>",
        "operationId": "economic-calendar",
        "navHeader": "Economic Calendar",
        "urlId": "economic-calendar",
        "title": "Economic Calendar API | Finnhub",
        "examples": [
          {
            "url": "/calendar/economic?token=<token>",
            "text": "/calendar/economic"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Premium Access Required",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Economic",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "description": "From date <code>YYYY-MM-DD</code>.",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "name": "to",
            "description": "To date <code>YYYY-MM-DD</code>.",
            "required": false,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/EconomicCalendar"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.calendar_economic())",
          "go": "res, _, err := finnhubClient.EconomicCalendar(context.Background()).Execute()",
          "javascript": "finnhubClient.economicCalendar((error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.economic_calendar())",
          "kotlin": "println(apiClient.economicCalendar())",
          "php": "print_r($client->economicCalendar());",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"economicCalendar\": [\n    {\n      \"actual\": 8.4,\n      \"country\": \"AU\",\n      \"estimate\": 6.9,\n      \"event\": \"Australia - Current Account Balance\",\n      \"impact\": \"low\",\n      \"prev\": 1,\n      \"time\": \"2020-06-02 01:30:00\",\n      \"unit\": \"AUD\"\n    },\n    {\n      \"actual\": 0.5,\n      \"country\": \"AU\",\n      \"estimate\": 0.4,\n      \"event\": \"Australia- Net Exports\",\n      \"impact\": \"low\",\n      \"prev\": -0.1,\n      \"time\": \"2020-06-02 01:30:00\",\n      \"unit\": \"%\"\n    }\n  ]\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/economic/code": {
      "get": {
        "summary": "Economic Code",
        "description": "List codes of supported economic data.",
        "operationId": "economic-code",
        "navHeader": "Economic Codes",
        "urlId": "economic-code",
        "title": "Economic Codes",
        "examples": [
          {
            "url": "/economic/code?token=<token>",
            "text": "/economic/code"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Accessible with Fundamental data or All in One subscription.",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Economic",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EconomicCode"
              }
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.economic_code())",
          "go": "res, _, err := finnhubClient.EconomicCode(context.Background()).Execute()",
          "javascript": "finnhubClient.economicCode((error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.economic_code())",
          "kotlin": "println(apiClient.economicCode())",
          "php": "print_r($client->economicCode());",
          "useTemplate": true
        },
        "sampleResponse": "[\n  {\n    \"code\": \"MA-USA-656880\",\n    \"country\": \"USA\",\n    \"name\": \"1-Day Repo Rate\",\n    \"unit\": \"%\"\n  },\n  {\n    \"code\": \"MA-USA-6667797870\",\n    \"country\": \"USA\",\n    \"name\": \"ISM Purchasing Managers Index\",\n    \"unit\": \"unit\"\n  }\n]",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/economic": {
      "get": {
        "summary": "Economic Data",
        "description": "Get economic data.",
        "operationId": "economic-data",
        "navHeader": "Economic",
        "urlId": "economic-data",
        "title": "Global Economic Data API",
        "examples": [
          {
            "url": "/economic?code=MA-USA-656880&token=<token>",
            "text": "/economic?code=MA-USA-656880"
          }
        ],
        "widget": null,
        "freeTier": null,
        "premium": "Accessible with Fundamental data or All in One subscription.",
        "newEndpoint": null,
        "highUsage": null,
        "tags": [
          "Default"
        ],
        "section": "Economic",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "description": "Economic code.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/EconomicData"
            }
          }
        },
        "sampleCode": {
          "curl": "autoGenerated",
          "python": "print(finnhub_client.economic_data('MA-USA-656880'))",
          "go": "res, _, err := finnhubClient.EconomicData(context.Background()).Code(\"MA-USA-656880\").Execute()",
          "javascript": "finnhubClient.economicData(\"MA-USA-656880\", (error, data, response) => {\n  console.log(data)\n});",
          "ruby": "puts(finnhub_client.economic_data('MA-USA-656880'))",
          "kotlin": "println(apiClient.economicData(\"MA-USA-656880\"))",
          "php": "print_r($client->economicData(\"MA-USA-656880\"));",
          "useTemplate": true
        },
        "sampleResponse": "{\n  \"code\": \"MA-USA-656880\",\n  \"data\": [\n    {\n      \"date\": \"2020-05-31\",\n      \"value\": -2760\n    },\n    {\n      \"date\": \"2020-04-30\",\n      \"value\": -19557\n    }\n  ]\n}",
        "security": [
          {
            "api_key": []
          }
        ]
      }
    }
  },
  "definitions": {
    "StockSymbol": {
      "type": "object",
      "properties": {
        "description": {
          "description": "Symbol description",
          "type": "string"
        },
        "displaySymbol": {
          "description": "Display symbol name.",
          "type": "string"
        },
        "symbol": {
          "description": "Unique symbol used to identify this symbol used in <code>/stock/candle</code> endpoint.",
          "type": "string"
        },
        "type": {
          "description": "Security type.",
          "type": "string"
        },
        "mic": {
          "description": "Primary exchange's MIC.",
          "type": "string"
        },
        "figi": {
          "description": "FIGI identifier.",
          "type": "string"
        },
        "shareClassFIGI": {
          "description": "Global Share Class FIGI.",
          "type": "string"
        },
        "currency": {
          "description": "Price's currency. This might be different from the reporting currency of fundamental data.",
          "type": "string"
        },
        "symbol2": {
          "description": "Alternative ticker for exchanges with multiple tickers for 1 stock such as BSE.",
          "type": "string"
        },
        "isin": {
          "description": "ISIN. This field is only available for EU stocks and selected Asian markets. Entitlement from Finnhub is required to access this field.",
          "type": "string"
        }
      }
    },
    "SymbolLookup": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SymbolLookupInfo"
          },
          "description": "Array of search results."
        },
        "count": {
          "description": "Number of results.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "SymbolLookupInfo": {
      "type": "object",
      "properties": {
        "description": {
          "description": "Symbol description",
          "type": "string"
        },
        "displaySymbol": {
          "description": "Display symbol name.",
          "type": "string"
        },
        "symbol": {
          "description": "Unique symbol used to identify this symbol used in <code>/stock/candle</code> endpoint.",
          "type": "string"
        },
        "type": {
          "description": "Security type.",
          "type": "string"
        }
      }
    },
    "CompanyProfile": {
      "type": "object",
      "properties": {
        "address": {
          "description": "Address of company's headquarter.",
          "type": "string"
        },
        "city": {
          "description": "City of company's headquarter.",
          "type": "string"
        },
        "country": {
          "description": "Country of company's headquarter.",
          "type": "string"
        },
        "currency": {
          "description": "Currency used in company filings and financials.",
          "type": "string"
        },
        "estimateCurrency": {
          "description": "Currency used in Estimates data.",
          "type": "string"
        },
        "marketCapCurrency": {
          "description": "Currency used in market capitalization.",
          "type": "string"
        },
        "cusip": {
          "description": "CUSIP number.",
          "type": "string"
        },
        "sedol": {
          "description": "Sedol number.",
          "type": "string"
        },
        "description": {
          "description": "Company business summary.",
          "type": "string"
        },
        "exchange": {
          "description": "Listed exchange.",
          "type": "string"
        },
        "ggroup": {
          "description": "Industry group.",
          "type": "string"
        },
        "gind": {
          "description": "Industry.",
          "type": "string"
        },
        "gsector": {
          "description": "Sector.",
          "type": "string"
        },
        "gsubind": {
          "description": "Sub-industry.",
          "type": "string"
        },
        "isin": {
          "description": "ISIN number.",
          "type": "string"
        },
        "naicsNationalIndustry": {
          "description": "NAICS national industry.",
          "type": "string"
        },
        "naics": {
          "description": "NAICS industry.",
          "type": "string"
        },
        "naicsSector": {
          "description": "NAICS sector.",
          "type": "string"
        },
        "naicsSubsector": {
          "description": "NAICS subsector.",
          "type": "string"
        },
        "name": {
          "description": "Company name.",
          "type": "string"
        },
        "phone": {
          "description": "Company phone number.",
          "type": "string"
        },
        "state": {
          "description": "State of company's headquarter.",
          "type": "string"
        },
        "ticker": {
          "description": "Company symbol/ticker as used on the listed exchange.",
          "type": "string"
        },
        "weburl": {
          "description": "Company website.",
          "type": "string"
        },
        "ipo": {
          "description": "IPO date.",
          "type": "string",
          "format": "date"
        },
        "marketCapitalization": {
          "description": "Market Capitalization.",
          "type": "number",
          "format": "float"
        },
        "shareOutstanding": {
          "description": "Number of oustanding shares.",
          "type": "number",
          "format": "float"
        },
        "employeeTotal": {
          "description": "Number of employee.",
          "type": "number",
          "format": "float"
        },
        "logo": {
          "description": "Logo image.",
          "type": "string"
        },
        "finnhubIndustry": {
          "description": "Finnhub industry classification.",
          "type": "string"
        }
      }
    },
    "CompanyProfile2": {
      "type": "object",
      "properties": {
        "country": {
          "description": "Country of company's headquarter.",
          "type": "string"
        },
        "currency": {
          "description": "Currency used in company filings.",
          "type": "string"
        },
        "exchange": {
          "description": "Listed exchange.",
          "type": "string"
        },
        "name": {
          "description": "Company name.",
          "type": "string"
        },
        "ticker": {
          "description": "Company symbol/ticker as used on the listed exchange.",
          "type": "string"
        },
        "ipo": {
          "description": "IPO date.",
          "type": "string",
          "format": "date"
        },
        "marketCapitalization": {
          "description": "Market Capitalization.",
          "type": "number",
          "format": "float"
        },
        "shareOutstanding": {
          "description": "Number of oustanding shares.",
          "type": "number",
          "format": "float"
        },
        "logo": {
          "description": "Logo image.",
          "type": "string"
        },
        "phone": {
          "description": "Company phone number.",
          "type": "string"
        },
        "weburl": {
          "description": "Company website.",
          "type": "string"
        },
        "finnhubIndustry": {
          "description": "Finnhub industry classification.",
          "type": "string"
        }
      }
    },
    "Company": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Executive name",
          "type": "string"
        },
        "age": {
          "description": "Age",
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "description": "Title",
          "type": "string"
        },
        "since": {
          "description": "Year first appointed as executive/director of the company",
          "type": "string"
        },
        "sex": {
          "description": "Sex",
          "type": "string"
        },
        "compensation": {
          "description": "Total compensation",
          "type": "integer",
          "format": "int64"
        },
        "currency": {
          "description": "Compensation currency",
          "type": "string"
        }
      }
    },
    "CompanyExecutive": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Company symbol.",
          "type": "string"
        },
        "executive": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Company"
          },
          "description": "Array of company's executives and members of the Board."
        }
      }
    },
    "MarketNews": {
      "type": "object",
      "properties": {
        "category": {
          "description": "News category.",
          "type": "string"
        },
        "datetime": {
          "description": "Published time in UNIX timestamp.",
          "type": "integer",
          "format": "int64"
        },
        "headline": {
          "description": "News headline.",
          "type": "string"
        },
        "id": {
          "description": "News ID. This value can be used for <code>minId</code> params to get the latest news only.",
          "type": "integer",
          "format": "int64"
        },
        "image": {
          "description": "Thumbnail image URL.",
          "type": "string"
        },
        "related": {
          "description": "Related stocks and companies mentioned in the article.",
          "type": "string"
        },
        "source": {
          "description": "News source.",
          "type": "string"
        },
        "summary": {
          "description": "News summary.",
          "type": "string"
        },
        "url": {
          "description": "URL of the original article.",
          "type": "string"
        }
      }
    },
    "CompanyNews": {
      "type": "object",
      "properties": {
        "category": {
          "description": "News category.",
          "type": "string"
        },
        "datetime": {
          "description": "Published time in UNIX timestamp.",
          "type": "integer",
          "format": "int64"
        },
        "headline": {
          "description": "News headline.",
          "type": "string"
        },
        "id": {
          "description": "News ID. This value can be used for <code>minId</code> params to get the latest news only.",
          "type": "integer",
          "format": "int64"
        },
        "image": {
          "description": "Thumbnail image URL.",
          "type": "string"
        },
        "related": {
          "description": "Related stocks and companies mentioned in the article.",
          "type": "string"
        },
        "source": {
          "description": "News source.",
          "type": "string"
        },
        "summary": {
          "description": "News summary.",
          "type": "string"
        },
        "url": {
          "description": "URL of the original article.",
          "type": "string"
        }
      }
    },
    "Development": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Company symbol.",
          "type": "string"
        },
        "datetime": {
          "description": "Published time in <code>YYYY-MM-DD HH:MM:SS</code> format.",
          "type": "string",
          "formatIgnore": "date-time"
        },
        "headline": {
          "description": "Development headline.",
          "type": "string"
        },
        "description": {
          "description": "Development description.",
          "type": "string"
        },
        "url": {
          "description": "URL.",
          "type": "string"
        }
      }
    },
    "PressRelease": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Company symbol.",
          "type": "string"
        },
        "majorDevelopment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Development"
          },
          "description": "Array of major developments."
        }
      }
    },
    "CompanyNewsStatistics": {
      "type": "object",
      "properties": {
        "articlesInLastWeek": {
          "description": "",
          "type": "integer",
          "format": "int64"
        },
        "buzz": {
          "description": "",
          "type": "number",
          "format": "float"
        },
        "weeklyAverage": {
          "description": "",
          "type": "number",
          "format": "float"
        }
      }
    },
    "Sentiment": {
      "type": "object",
      "properties": {
        "bearishPercent": {
          "description": "",
          "type": "number",
          "format": "float"
        },
        "bullishPercent": {
          "description": "",
          "type": "number",
          "format": "float"
        }
      }
    },
    "NewsSentiment": {
      "type": "object",
      "properties": {
        "buzz": {
          "type": "object",
          "$ref": "#/definitions/CompanyNewsStatistics",
          "description": "Statistics of company news in the past week."
        },
        "companyNewsScore": {
          "description": "News score.",
          "type": "number",
          "format": "float"
        },
        "sectorAverageBullishPercent": {
          "description": "Sector average bullish percent.",
          "type": "number",
          "format": "float"
        },
        "sectorAverageNewsScore": {
          "description": "Sectore average score.",
          "type": "number",
          "format": "float"
        },
        "sentiment": {
          "type": "object",
          "$ref": "#/definitions/Sentiment",
          "description": "News sentiment."
        },
        "symbol": {
          "description": "Requested symbol.",
          "type": "string"
        }
      }
    },
    "MetricSeriesMap": {
      "type": "object"
    },
    "MetricMap": {
      "type": "object"
    },
    "PriceMetricMap": {
      "type": "object"
    },
    "BasicFinancials": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol of the company.",
          "type": "string"
        },
        "metricType": {
          "description": "Metric type.",
          "type": "string"
        },
        "series": {
          "type": "object",
          "$ref": "#/definitions/MetricSeriesMap",
          "description": "Map key-value pair of time-series ratios."
        },
        "metric": {
          "type": "object",
          "$ref": "#/definitions/MetricMap",
          "description": "Map key-value pair of key ratios and metrics."
        }
      }
    },
    "PriceMetrics": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol of the company.",
          "type": "string"
        },
        "data": {
          "type": "object",
          "$ref": "#/definitions/PriceMetricMap",
          "description": "Map key-value pair of key ratios and metrics."
        }
      }
    },
    "IsinChangeInfo": {
      "type": "object",
      "properties": {
        "atDate": {
          "description": "Event's date.",
          "type": "string"
        },
        "oldIsin": {
          "description": "Old ISIN.",
          "type": "string"
        },
        "newIsin": {
          "description": "New ISIN.",
          "type": "string"
        }
      }
    },
    "IsinChange": {
      "type": "object",
      "properties": {
        "fromDate": {
          "description": "From date.",
          "type": "string"
        },
        "toDate": {
          "description": "To date.",
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IsinChangeInfo"
          },
          "description": "Array of ISIN change events."
        }
      }
    },
    "SymbolChangeInfo": {
      "type": "object",
      "properties": {
        "atDate": {
          "description": "Event's date.",
          "type": "string"
        },
        "oldSymbol": {
          "description": "Old symbol.",
          "type": "string"
        },
        "newSymbol": {
          "description": "New symbol.",
          "type": "string"
        }
      }
    },
    "SymbolChange": {
      "type": "object",
      "properties": {
        "fromDate": {
          "description": "From date.",
          "type": "string"
        },
        "toDate": {
          "description": "To date.",
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SymbolChangeInfo"
          },
          "description": "Array of symbol change events."
        }
      }
    },
    "InstitutionalPortfolioInfo": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol.",
          "type": "string"
        },
        "cusip": {
          "description": "CUSIP.",
          "type": "string"
        },
        "name": {
          "description": "Position's name.",
          "type": "string"
        },
        "putCall": {
          "description": "<code>put</code> or <code>call</code> for options.",
          "type": "string"
        },
        "change": {
          "description": "Number of shares change.",
          "type": "number",
          "format": "float"
        },
        "noVoting": {
          "description": "Number of shares with no voting rights.",
          "type": "number",
          "format": "float"
        },
        "percentage": {
          "description": "Percentage of portfolio.",
          "type": "number",
          "format": "float"
        },
        "share": {
          "description": "Number of shares.",
          "type": "number",
          "format": "float"
        },
        "sharedVoting": {
          "description": "Number of shares with shared voting rights.",
          "type": "number",
          "format": "float"
        },
        "soleVoting": {
          "description": "Number of shares with sole voting rights.",
          "type": "number",
          "format": "float"
        },
        "value": {
          "description": "Position value.",
          "type": "number",
          "format": "float"
        }
      }
    },
    "InstitutionalPortfolioGroup": {
      "type": "object",
      "properties": {
        "reportDate": {
          "description": "Report date.",
          "type": "string"
        },
        "filingDate": {
          "description": "Filing date.",
          "type": "string"
        },
        "portfolio": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstitutionalPortfolioInfo"
          },
          "description": "Array of positions."
        }
      }
    },
    "InstitutionalPortfolio": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Investor's name.",
          "type": "string"
        },
        "cik": {
          "description": "CIK.",
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstitutionalPortfolioGroup"
          },
          "description": "Array of positions."
        }
      }
    },
    "InstitutionalOwnershipInfo": {
      "type": "object",
      "properties": {
        "cik": {
          "description": "Investor's company CIK.",
          "type": "string"
        },
        "name": {
          "description": "Firm's name.",
          "type": "string"
        },
        "putCall": {
          "description": "<code>put</code> or <code>call</code> for options.",
          "type": "string"
        },
        "change": {
          "description": "Number of shares change.",
          "type": "number",
          "format": "float"
        },
        "noVoting": {
          "description": "Number of shares with no voting rights.",
          "type": "number",
          "format": "float"
        },
        "percentage": {
          "description": "Percentage of portfolio.",
          "type": "number",
          "format": "float"
        },
        "share": {
          "description": "News score.",
          "type": "number",
          "format": "float"
        },
        "sharedVoting": {
          "description": "Number of shares with shared voting rights.",
          "type": "number",
          "format": "float"
        },
        "soleVoting": {
          "description": "Number of shares with sole voting rights.",
          "type": "number",
          "format": "float"
        },
        "value": {
          "description": "Position value.",
          "type": "number",
          "format": "float"
        }
      }
    },
    "InstitutionalOwnershipGroup": {
      "type": "object",
      "properties": {
        "reportDate": {
          "description": "Report date.",
          "type": "string"
        },
        "ownership": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstitutionalOwnershipInfo"
          },
          "description": "Array of institutional investors."
        }
      }
    },
    "InstitutionalOwnership": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol.",
          "type": "string"
        },
        "cusip": {
          "description": "Cusip.",
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstitutionalOwnershipGroup"
          },
          "description": "Array of institutional investors."
        }
      }
    },
    "InstitutionalProfileInfo": {
      "type": "object",
      "properties": {
        "cik": {
          "description": "Investor's company CIK.",
          "type": "string"
        },
        "firmType": {
          "description": "Firm type.",
          "type": "string"
        },
        "manager": {
          "description": "Manager.",
          "type": "string"
        },
        "philosophy": {
          "description": "Investing philosophy.",
          "type": "string"
        },
        "profile": {
          "description": "Profile info.",
          "type": "string"
        },
        "profileImg": {
          "description": "Profile image.",
          "type": "string"
        }
      }
    },
    "InstitutionalProfile": {
      "type": "object",
      "properties": {
        "cik": {
          "description": "CIK.",
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstitutionalProfileInfo"
          },
          "description": "Array of investors."
        }
      }
    },
    "OwnershipInfo": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Investor's name.",
          "type": "string"
        },
        "share": {
          "description": "Number of shares held by the investor.",
          "type": "integer",
          "format": "int64"
        },
        "change": {
          "description": "Number of share changed (net buy or sell) from the last period.",
          "type": "integer",
          "format": "int64"
        },
        "filingDate": {
          "description": "Filing date.",
          "type": "string",
          "format": "date"
        }
      }
    },
    "Ownership": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol of the company.",
          "type": "string"
        },
        "ownership": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OwnershipInfo"
          },
          "description": "Array of investors with detailed information about their holdings."
        }
      }
    },
    "FundOwnershipInfo": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Investor's name.",
          "type": "string"
        },
        "share": {
          "description": "Number of shares held by the investor.",
          "type": "integer",
          "format": "int64"
        },
        "change": {
          "description": "Number of share changed (net buy or sell) from the last period.",
          "type": "integer",
          "format": "int64"
        },
        "filingDate": {
          "description": "Filing date.",
          "type": "string",
          "format": "date"
        },
        "portfolioPercent": {
          "description": "Percent of the fund's portfolio comprised of the company's share.",
          "type": "number",
          "format": "float"
        }
      }
    },
    "FundOwnership": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol of the company.",
          "type": "string"
        },
        "ownership": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FundOwnershipInfo"
          },
          "description": "Array of investors with detailed information about their holdings."
        }
      }
    },
    "Transactions": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol.",
          "type": "string"
        },
        "name": {
          "description": "Insider's name.",
          "type": "string"
        },
        "share": {
          "description": "Number of shares held after the transaction.",
          "type": "integer",
          "format": "int64"
        },
        "change": {
          "description": "Number of share changed from the last period. A positive value suggests a <code>BUY</code> transaction. A negative value suggests a <code>SELL</code> transaction.",
          "type": "integer",
          "format": "int64"
        },
        "filingDate": {
          "description": "Filing date.",
          "type": "string",
          "format": "date"
        },
        "transactionDate": {
          "description": "Transaction date.",
          "type": "string",
          "format": "date"
        },
        "transactionPrice": {
          "description": "Average transaction price.",
          "type": "number",
          "format": "float"
        },
        "transactionCode": {
          "description": "Transaction code. A list of codes and their meanings can be found <a href=\"https://www.sec.gov/about/forms/form4data.pdf\" target=\"_blank\" rel=\"noopener\">here</a>.",
          "type": "string"
        }
      }
    },
    "InsiderTransactions": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol of the company.",
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Transactions"
          },
          "description": "Array of insider transactions."
        }
      }
    },
    "InsiderSentimentsData": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol.",
          "type": "string"
        },
        "year": {
          "description": "Year.",
          "type": "integer",
          "format": "int64"
        },
        "month": {
          "description": "Month.",
          "type": "integer",
          "format": "int64"
        },
        "change": {
          "description": "Net buying/selling from all insiders' transactions.",
          "type": "integer",
          "format": "int64"
        },
        "mspr": {
          "description": "Monthly share purchase ratio.",
          "type": "number",
          "format": "float"
        }
      }
    },
    "InsiderSentiments": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol of the company.",
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InsiderSentimentsData"
          },
          "description": "Array of sentiment data."
        }
      }
    },
    "FinancialMap": {
      "type": "object"
    },
    "FinancialStatements": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol of the company.",
          "type": "string"
        },
        "financials": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FinancialMap"
          },
          "description": "An array of map of key, value pairs containing the data for each period."
        }
      }
    },
    "ReportDataMap": {
      "type": "object"
    },
    "Report": {
      "type": "object",
      "properties": {
        "accessNumber": {
          "description": "Access number.",
          "type": "string"
        },
        "symbol": {
          "description": "Symbol.",
          "type": "string"
        },
        "cik": {
          "description": "CIK.",
          "type": "string"
        },
        "year": {
          "description": "Year.",
          "type": "integer",
          "format": "int64"
        },
        "quarter": {
          "description": "Quarter.",
          "type": "integer",
          "format": "int64"
        },
        "form": {
          "description": "Form type.",
          "type": "string"
        },
        "startDate": {
          "description": "Period start date <code>%Y-%m-%d %H:%M:%S</code>.",
          "type": "string",
          "formatIgnore": "date-time"
        },
        "endDate": {
          "description": "Period end date <code>%Y-%m-%d %H:%M:%S</code>.",
          "type": "string",
          "formatIgnore": "date-time"
        },
        "filedDate": {
          "description": "Filed date <code>%Y-%m-%d %H:%M:%S</code>.",
          "type": "string",
          "formatIgnore": "date-time"
        },
        "acceptedDate": {
          "description": "Accepted date <code>%Y-%m-%d %H:%M:%S</code>.",
          "type": "string",
          "formatIgnore": "date-time"
        },
        "report": {
          "type": "object",
          "$ref": "#/definitions/ReportDataMap",
          "description": "Report data."
        }
      }
    },
    "FinancialsAsReported": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol",
          "type": "string"
        },
        "cik": {
          "description": "CIK",
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Report"
          },
          "description": "Array of filings."
        }
      }
    },
    "BreakdownItemMap": {
      "type": "object"
    },
    "BreakdownItem": {
      "type": "object",
      "properties": {
        "accessNumber": {
          "description": "Access number of the report from which the data is sourced.",
          "type": "string"
        },
        "breakdown": {
          "type": "object",
          "$ref": "#/definitions/BreakdownItemMap",
          "description": "Revenue breakdown."
        }
      }
    },
    "RevenueBreakdown": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol",
          "type": "string"
        },
        "cik": {
          "description": "CIK",
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BreakdownItem"
          },
          "description": "Array of revenue breakdown over multiple periods."
        }
      }
    },
    "Filing": {
      "type": "object",
      "properties": {
        "accessNumber": {
          "description": "Access number.",
          "type": "string"
        },
        "symbol": {
          "description": "Symbol.",
          "type": "string"
        },
        "cik": {
          "description": "CIK.",
          "type": "string"
        },
        "form": {
          "description": "Form type.",
          "type": "string"
        },
        "filedDate": {
          "description": "Filed date <code>%Y-%m-%d %H:%M:%S</code>.",
          "type": "string",
          "formatIgnore": "date-time"
        },
        "acceptedDate": {
          "description": "Accepted date <code>%Y-%m-%d %H:%M:%S</code>.",
          "type": "string",
          "formatIgnore": "date-time"
        },
        "reportUrl": {
          "description": "Report's URL.",
          "type": "string"
        },
        "filingUrl": {
          "description": "Filing's URL.",
          "type": "string"
        }
      }
    },
    "InternationalFiling": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol.",
          "type": "string"
        },
        "companyName": {
          "description": "Company name.",
          "type": "string"
        },
        "filedDate": {
          "description": "Filed date <code>%Y-%m-%d %H:%M:%S</code>.",
          "type": "string",
          "formatIgnore": "date-time"
        },
        "category": {
          "description": "Category.",
          "type": "string"
        },
        "title": {
          "description": "Document's title.",
          "type": "string"
        },
        "description": {
          "description": "Document's description.",
          "type": "string"
        },
        "url": {
          "description": "Url.",
          "type": "string"
        },
        "language": {
          "description": "Language.",
          "type": "string"
        },
        "country": {
          "description": "Country.",
          "type": "string"
        }
      }
    },
    "FilingSentiment": {
      "type": "object",
      "properties": {
        "negative": {
          "description": "% of negative words in the filing.",
          "type": "number",
          "format": "float"
        },
        "positive": {
          "description": "% of positive words in the filing.",
          "type": "number",
          "format": "float"
        },
        "polarity": {
          "description": "% of polarity words in the filing.",
          "type": "number",
          "format": "float"
        },
        "litigious": {
          "description": "% of litigious words in the filing.",
          "type": "number",
          "format": "float"
        },
        "uncertainty": {
          "description": "% of uncertainty words in the filing.",
          "type": "number",
          "format": "float"
        },
        "constraining": {
          "description": "% of constraining words in the filing.",
          "type": "number",
          "format": "float"
        },
        "modal-weak": {
          "description": "% of modal-weak words in the filing.",
          "type": "number",
          "format": "float"
        },
        "modal-strong": {
          "description": "% of modal-strong words in the filing.",
          "type": "number",
          "format": "float"
        },
        "modal-moderate": {
          "description": "% of modal-moderate words in the filing.",
          "type": "number",
          "format": "float"
        }
      }
    },
    "SECSentimentAnalysis": {
      "type": "object",
      "properties": {
        "accessNumber": {
          "description": "Access number.",
          "type": "string"
        },
        "symbol": {
          "description": "Symbol.",
          "type": "string"
        },
        "cik": {
          "description": "CIK.",
          "type": "string"
        },
        "sentiment": {
          "type": "object",
          "$ref": "#/definitions/FilingSentiment",
          "description": "Filing Sentiment"
        }
      }
    },
    "SimilarityIndexInfo": {
      "type": "object",
      "properties": {
        "cik": {
          "description": "CIK.",
          "type": "string"
        },
        "item1": {
          "description": "Cosine similarity of Item 1 (Business). This number is only available for Annual reports.",
          "type": "number",
          "format": "float"
        },
        "item1a": {
          "description": "Cosine similarity of Item 1A (Risk Factors). This number is available for both Annual and Quarterly reports.",
          "type": "number",
          "format": "float"
        },
        "item2": {
          "description": "Cosine similarity of Item 2 (Management\u2019s Discussion and Analysis of Financial Condition and Results of Operations). This number is only available for Quarterly reports.",
          "type": "number",
          "format": "float"
        },
        "item7": {
          "description": "Cosine similarity of Item 7 (Management\u2019s Discussion and Analysis of Financial Condition and Results of Operations). This number is only available for Annual reports.",
          "type": "number",
          "format": "float"
        },
        "item7a": {
          "description": "Cosine similarity of Item 7A (Quantitative and Qualitative Disclosures About Market Risk). This number is only available for Annual reports.",
          "type": "number",
          "format": "float"
        },
        "accessNumber": {
          "description": "Access number.",
          "type": "string"
        },
        "form": {
          "description": "Form type.",
          "type": "string"
        },
        "filedDate": {
          "description": "Filed date <code>%Y-%m-%d %H:%M:%S</code>.",
          "type": "string",
          "formatIgnore": "date-time"
        },
        "acceptedDate": {
          "description": "Accepted date <code>%Y-%m-%d %H:%M:%S</code>.",
          "type": "string",
          "formatIgnore": "date-time"
        },
        "reportUrl": {
          "description": "Report's URL.",
          "type": "string"
        },
        "filingUrl": {
          "description": "Filing's URL.",
          "type": "string"
        }
      }
    },
    "SimilarityIndex": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol.",
          "type": "string"
        },
        "cik": {
          "description": "CIK.",
          "type": "string"
        },
        "similarity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SimilarityIndexInfo"
          },
          "description": "Array of filings with its cosine similarity compared to the same report of the previous year."
        }
      }
    },
    "IPOEvent": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol.",
          "type": "string"
        },
        "date": {
          "description": "IPO date.",
          "type": "string",
          "format": "date"
        },
        "exchange": {
          "description": "Exchange.",
          "type": "string"
        },
        "name": {
          "description": "Company's name.",
          "type": "string"
        },
        "status": {
          "description": "IPO status. Can take 1 of the following values: <code>expected</code>,<code>priced</code>,<code>withdrawn</code>,<code>filed</code>",
          "type": "string"
        },
        "price": {
          "description": "Projected price or price range.",
          "type": "string"
        },
        "numberOfShares": {
          "description": "Number of shares offered during the IPO.",
          "type": "number",
          "format": "float"
        },
        "totalSharesValue": {
          "description": "Total shares value.",
          "type": "number",
          "format": "float"
        }
      }
    },
    "IPOCalendar": {
      "type": "object",
      "properties": {
        "ipoCalendar": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IPOEvent"
          },
          "description": "Array of IPO events."
        }
      }
    },
    "Dividends": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol.",
          "type": "string"
        },
        "date": {
          "description": "Ex-Dividend date.",
          "type": "string",
          "format": "date"
        },
        "amount": {
          "description": "Amount in local currency.",
          "type": "number",
          "format": "float"
        },
        "adjustedAmount": {
          "description": "Adjusted dividend.",
          "type": "number",
          "format": "float"
        },
        "payDate": {
          "description": "Pay date.",
          "type": "string",
          "format": "date"
        },
        "recordDate": {
          "description": "Record date.",
          "type": "string",
          "format": "date"
        },
        "declarationDate": {
          "description": "Declaration date.",
          "type": "string",
          "format": "date"
        },
        "currency": {
          "description": "Currency.",
          "type": "string"
        },
        "freq": {
          "description": "<p>Dividend frequency. Can be 1 of the following values:</p><ul>\n<li><code>0: Annually</code></li>\n<li><code>1: Monthly</code></li>\n<li><code>2: Quarterly</code></li>\n<li><code>3: Semi-annually</code></li>\n<li><code>4: Other/Unknown</code></li>\n<li><code>5: Bimonthly</code></li>\n<li><code>6: Trimesterly</code></li>\n<li><code>7: Weekly</code></li>\n</ul>",
          "type": "string"
        }
      }
    },
    "Dividends2Info": {
      "type": "object",
      "properties": {
        "exDate": {
          "description": "Ex-Dividend date.",
          "type": "string",
          "format": "date"
        },
        "amount": {
          "description": "Amount in local currency.",
          "type": "number",
          "format": "float"
        }
      }
    },
    "RecommendationTrend": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Company symbol.",
          "type": "string"
        },
        "buy": {
          "description": "Number of recommendations that fall into the Buy category",
          "type": "integer",
          "format": "int64"
        },
        "hold": {
          "description": "Number of recommendations that fall into the Hold category",
          "type": "integer",
          "format": "int64"
        },
        "period": {
          "description": "Updated period",
          "type": "string"
        },
        "sell": {
          "description": "Number of recommendations that fall into the Sell category",
          "type": "integer",
          "format": "int64"
        },
        "strongBuy": {
          "description": "Number of recommendations that fall into the Strong Buy category",
          "type": "integer",
          "format": "int64"
        },
        "strongSell": {
          "description": "Number of recommendations that fall into the Strong Sell category",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PriceTarget": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Company symbol.",
          "type": "string"
        },
        "targetHigh": {
          "description": "Highes analysts' target.",
          "type": "number",
          "format": "float"
        },
        "targetLow": {
          "description": "Lowest analysts' target.",
          "type": "number",
          "format": "float"
        },
        "targetMean": {
          "description": "Mean of all analysts' targets.",
          "type": "number",
          "format": "float"
        },
        "targetMedian": {
          "description": "Median of all analysts' targets.",
          "type": "number",
          "format": "float"
        },
        "lastUpdated": {
          "description": "Updated time of the data",
          "type": "string",
          "formatIgnore": "date-time"
        }
      }
    },
    "UpgradeDowngrade": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Company symbol.",
          "type": "string"
        },
        "gradeTime": {
          "description": "Upgrade/downgrade time in UNIX timestamp.",
          "type": "integer",
          "format": "int64"
        },
        "fromGrade": {
          "description": "From grade.",
          "type": "string"
        },
        "toGrade": {
          "description": "To grade.",
          "type": "string"
        },
        "company": {
          "description": "Company/analyst who did the upgrade/downgrade.",
          "type": "string"
        },
        "action": {
          "description": "Action can take any of the following values: <code>up(upgrade), down(downgrade), main(maintains), init(initiate), reit(reiterate)</code>.",
          "type": "string"
        }
      }
    },
    "RevenueEstimatesInfo": {
      "type": "object",
      "properties": {
        "revenueAvg": {
          "description": "Average revenue estimates including Finnhub's proprietary estimates.",
          "type": "number",
          "format": "float"
        },
        "revenueHigh": {
          "description": "Highest estimate.",
          "type": "number",
          "format": "float"
        },
        "revenueLow": {
          "description": "Lowest estimate.",
          "type": "number",
          "format": "float"
        },
        "numberAnalysts": {
          "description": "Number of Analysts.",
          "type": "integer",
          "format": "int64"
        },
        "period": {
          "description": "Period.",
          "type": "string",
          "format": "date"
        }
      }
    },
    "RevenueEstimates": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RevenueEstimatesInfo"
          },
          "description": "List of estimates"
        },
        "freq": {
          "description": "Frequency: annual or quarterly.",
          "type": "string"
        },
        "symbol": {
          "description": "Company symbol.",
          "type": "string"
        }
      }
    },
    "EbitdaEstimatesInfo": {
      "type": "object",
      "properties": {
        "ebitdaAvg": {
          "description": "Average EBITDA estimates including Finnhub's proprietary estimates.",
          "type": "number",
          "format": "float"
        },
        "ebitdaHigh": {
          "description": "Highest estimate.",
          "type": "number",
          "format": "float"
        },
        "ebitdaLow": {
          "description": "Lowest estimate.",
          "type": "number",
          "format": "float"
        },
        "numberAnalysts": {
          "description": "Number of Analysts.",
          "type": "integer",
          "format": "int64"
        },
        "period": {
          "description": "Period.",
          "type": "string",
          "format": "date"
        }
      }
    },
    "EbitdaEstimates": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EbitdaEstimatesInfo"
          },
          "description": "List of estimates"
        },
        "freq": {
          "description": "Frequency: annual or quarterly.",
          "type": "string"
        },
        "symbol": {
          "description": "Company symbol.",
          "type": "string"
        }
      }
    },
    "EbitEstimatesInfo": {
      "type": "object",
      "properties": {
        "ebitAvg": {
          "description": "Average EBIT estimates including Finnhub's proprietary estimates.",
          "type": "number",
          "format": "float"
        },
        "ebitHigh": {
          "description": "Highest estimate.",
          "type": "number",
          "format": "float"
        },
        "ebitLow": {
          "description": "Lowest estimate.",
          "type": "number",
          "format": "float"
        },
        "numberAnalysts": {
          "description": "Number of Analysts.",
          "type": "integer",
          "format": "int64"
        },
        "period": {
          "description": "Period.",
          "type": "string",
          "format": "date"
        }
      }
    },
    "EbitEstimates": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EbitEstimatesInfo"
          },
          "description": "List of estimates"
        },
        "freq": {
          "description": "Frequency: annual or quarterly.",
          "type": "string"
        },
        "symbol": {
          "description": "Company symbol.",
          "type": "string"
        }
      }
    },
    "EarningsEstimatesInfo": {
      "type": "object",
      "properties": {
        "epsAvg": {
          "description": "Average EPS estimates including Finnhub's proprietary estimates.",
          "type": "number",
          "format": "float"
        },
        "epsHigh": {
          "description": "Highest estimate.",
          "type": "number",
          "format": "float"
        },
        "epsLow": {
          "description": "Lowest estimate.",
          "type": "number",
          "format": "float"
        },
        "numberAnalysts": {
          "description": "Number of Analysts.",
          "type": "integer",
          "format": "int64"
        },
        "period": {
          "description": "Period.",
          "type": "string",
          "format": "date"
        }
      }
    },
    "EarningsEstimates": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EarningsEstimatesInfo"
          },
          "description": "List of estimates"
        },
        "freq": {
          "description": "Frequency: annual or quarterly.",
          "type": "string"
        },
        "symbol": {
          "description": "Company symbol.",
          "type": "string"
        }
      }
    },
    "EarningResult": {
      "type": "object",
      "properties": {
        "actual": {
          "description": "Actual earning result.",
          "type": "number",
          "format": "float"
        },
        "estimate": {
          "description": "Estimated earning.",
          "type": "number",
          "format": "float"
        },
        "surprise": {
          "description": "Surprise - The difference between actual and estimate.",
          "type": "number",
          "format": "float"
        },
        "surprisePercent": {
          "description": "Surprise percent.",
          "type": "number",
          "format": "float"
        },
        "period": {
          "description": "Reported period.",
          "type": "string",
          "format": "date"
        },
        "symbol": {
          "description": "Company symbol.",
          "type": "string"
        }
      }
    },
    "EarningRelease": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol.",
          "type": "string"
        },
        "date": {
          "description": "Date.",
          "type": "string",
          "format": "date"
        },
        "hour": {
          "description": "Indicates whether the earnings is announced before market open(<code>bmo</code>), after market close(<code>amc</code>), or during market hour(<code>dmh</code>).",
          "type": "string"
        },
        "year": {
          "description": "Earnings year.",
          "type": "integer",
          "format": "int64"
        },
        "quarter": {
          "description": "Earnings quarter.",
          "type": "integer",
          "format": "int64"
        },
        "epsEstimate": {
          "description": "EPS estimate.",
          "type": "number",
          "format": "float"
        },
        "epsActual": {
          "description": "EPS actual.",
          "type": "number",
          "format": "float"
        },
        "revenueEstimate": {
          "description": "Revenue estimate including Finnhub's proprietary estimates.",
          "type": "number",
          "format": "float"
        },
        "revenueActual": {
          "description": "Revenue actual.",
          "type": "number",
          "format": "float"
        }
      }
    },
    "EarningsCalendar": {
      "type": "object",
      "properties": {
        "earningsCalendar": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EarningRelease"
          },
          "description": "Array of earnings release."
        }
      }
    },
    "Quote": {
      "type": "object",
      "properties": {
        "o": {
          "description": "Open price of the day",
          "type": "number",
          "format": "float"
        },
        "h": {
          "description": "High price of the day",
          "type": "number",
          "format": "float"
        },
        "l": {
          "description": "Low price of the day",
          "type": "number",
          "format": "float"
        },
        "c": {
          "description": "Current price",
          "type": "number",
          "format": "float"
        },
        "pc": {
          "description": "Previous close price",
          "type": "number",
          "format": "float"
        },
        "d": {
          "description": "Change",
          "type": "number",
          "format": "float"
        },
        "dp": {
          "description": "Percent change",
          "type": "number",
          "format": "float"
        }
      }
    },
    "StockCandles": {
      "type": "object",
      "properties": {
        "o": {
          "type": "array",
          "description": "List of open prices for returned candles.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "h": {
          "type": "array",
          "description": "List of high prices for returned candles.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "l": {
          "type": "array",
          "description": "List of low prices for returned candles.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "c": {
          "type": "array",
          "description": "List of close prices for returned candles.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "v": {
          "type": "array",
          "description": "List of volume data for returned candles.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "t": {
          "type": "array",
          "description": "List of timestamp for returned candles.",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "s": {
          "description": "Status of the response. This field can either be ok or no_data.",
          "type": "string"
        }
      }
    },
    "TickData": {
      "type": "object",
      "properties": {
        "s": {
          "description": "Symbol.",
          "type": "string"
        },
        "skip": {
          "description": "Number of ticks skipped.",
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "description": "Number of ticks returned. If <code>count</code> < <code>limit</code>, all data for that date has been returned.",
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "description": "Total number of ticks for that date.",
          "type": "integer",
          "format": "int64"
        },
        "v": {
          "type": "array",
          "description": "List of volume data.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "p": {
          "type": "array",
          "description": "List of price data.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "t": {
          "type": "array",
          "description": "List of timestamp in UNIX ms.",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "x": {
          "type": "array",
          "description": "List of venues/exchanges. A list of exchange codes can be found <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1Tj53M1svmr-hfEtbk6_NpVR1yAyGLMaH6ByYU6CG0ZY/edit?usp=sharing\",>here</a>",
          "items": {
            "type": "string"
          }
        },
        "c": {
          "type": "array",
          "description": "List of trade conditions. A comprehensive list of trade conditions code can be found <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1PUxiSWPHSODbaTaoL2Vef6DgU-yFtlRGZf19oBb9Hp0/edit?usp=sharing\">here</a>",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "BondTickData": {
      "type": "object",
      "properties": {
        "skip": {
          "description": "Number of ticks skipped.",
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "description": "Number of ticks returned. If <code>count</code> < <code>limit</code>, all data for that date has been returned.",
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "description": "Total number of ticks for that date.",
          "type": "integer",
          "format": "int64"
        },
        "v": {
          "type": "array",
          "description": "List of volume data.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "p": {
          "type": "array",
          "description": "List of price data.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "y": {
          "type": "array",
          "description": "List of yield data.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "t": {
          "type": "array",
          "description": "List of timestamp in UNIX ms.",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "si": {
          "type": "array",
          "description": "List of values showing the side (Buy/sell) of each trade. List of supported values: <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1O3aueXSPOqo7Iuyz4PqDG6yZunHsX8BTefZ2kFk5pz4/edit?usp=sharing\",>here</a>",
          "items": {
            "type": "string"
          }
        },
        "cp": {
          "type": "array",
          "description": "List of values showing the counterparty of each trade. List of supported values: <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1O3aueXSPOqo7Iuyz4PqDG6yZunHsX8BTefZ2kFk5pz4/edit?usp=sharing\",>here</a>",
          "items": {
            "type": "string"
          }
        },
        "rp": {
          "type": "array",
          "description": "List of values showing the reporting party of each trade. List of supported values: <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1O3aueXSPOqo7Iuyz4PqDG6yZunHsX8BTefZ2kFk5pz4/edit?usp=sharing\",>here</a>",
          "items": {
            "type": "string"
          }
        },
        "ats": {
          "type": "array",
          "description": "ATS flag. Y or empty",
          "items": {
            "type": "string"
          }
        },
        "c": {
          "type": "array",
          "description": "List of trade conditions. A comprehensive list of trade conditions code can be found <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1O3aueXSPOqo7Iuyz4PqDG6yZunHsX8BTefZ2kFk5pz4/edit?usp=sharing\">here</a>",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "HistoricalNBBO": {
      "type": "object",
      "properties": {
        "s": {
          "description": "Symbol.",
          "type": "string"
        },
        "skip": {
          "description": "Number of ticks skipped.",
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "description": "Number of ticks returned. If <code>count</code> < <code>limit</code>, all data for that date has been returned.",
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "description": "Total number of ticks for that date.",
          "type": "integer",
          "format": "int64"
        },
        "av": {
          "type": "array",
          "description": "List of Ask volume data.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "a": {
          "type": "array",
          "description": "List of Ask price data.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "ax": {
          "type": "array",
          "description": "List of venues/exchanges - Ask price. A list of exchange codes can be found <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1Tj53M1svmr-hfEtbk6_NpVR1yAyGLMaH6ByYU6CG0ZY/edit?usp=sharing\",>here</a>",
          "items": {
            "type": "string"
          }
        },
        "bv": {
          "type": "array",
          "description": "List of Bid volume data.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "b": {
          "type": "array",
          "description": "List of Bid price data.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "bx": {
          "type": "array",
          "description": "List of venues/exchanges - Bid price. A list of exchange codes can be found <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1Tj53M1svmr-hfEtbk6_NpVR1yAyGLMaH6ByYU6CG0ZY/edit?usp=sharing\",>here</a>",
          "items": {
            "type": "string"
          }
        },
        "t": {
          "type": "array",
          "description": "List of timestamp in UNIX ms.",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "c": {
          "type": "array",
          "description": "List of quote conditions. A comprehensive list of quote conditions code can be found <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1iiA6e7Osdtai0oPMOUzgAIKXCsay89dFDmsegz6OpEg/edit?usp=sharing\">here</a>",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "LastBid-Ask": {
      "type": "object",
      "properties": {
        "b": {
          "description": "Bid price.",
          "type": "number",
          "format": "float"
        },
        "a": {
          "description": "Ask price.",
          "type": "number",
          "format": "float"
        },
        "bv": {
          "description": "Bid volume.",
          "type": "number",
          "format": "float"
        },
        "av": {
          "description": "Ask volume.",
          "type": "number",
          "format": "float"
        },
        "t": {
          "description": "Reference UNIX timestamp in ms.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Split": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol.",
          "type": "string"
        },
        "date": {
          "description": "Split date.",
          "type": "string",
          "format": "date"
        },
        "fromFactor": {
          "description": "From factor.",
          "type": "number",
          "format": "float"
        },
        "toFactor": {
          "description": "To factor.",
          "type": "number",
          "format": "float"
        }
      }
    },
    "Dividends2": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol",
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Dividends2Info"
          },
          "description": ""
        }
      }
    },
    "IndicesConstituents": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Index's symbol.",
          "type": "string"
        },
        "constituents": {
          "type": "array",
          "description": "Array of constituents.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "IndexHistoricalConstituent": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol",
          "type": "string"
        },
        "action": {
          "description": "<code>add</code> or <code>remove</code>.",
          "type": "string"
        },
        "date": {
          "description": "Date of joining or leaving the index.",
          "type": "string",
          "format": "date"
        }
      }
    },
    "IndicesHistoricalConstituents": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Index's symbol.",
          "type": "string"
        },
        "historicalConstituents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IndexHistoricalConstituent"
          },
          "description": "Array of historical constituents."
        }
      }
    },
    "ETFProfileData": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Name",
          "type": "string"
        },
        "assetClass": {
          "description": "Asset Class.",
          "type": "string"
        },
        "investmentSegment": {
          "description": "Investment Segment.",
          "type": "string"
        },
        "aum": {
          "description": "AUM.",
          "type": "number",
          "format": "float"
        },
        "nav": {
          "description": "NAV.",
          "type": "number",
          "format": "float"
        },
        "navCurrency": {
          "description": "NAV currency.",
          "type": "string"
        },
        "expenseRatio": {
          "description": "Expense ratio. For non-US funds, this is the <a href=\"https://www.esma.europa.eu/sites/default/files/library/2015/11/09_1028_final_kid_ongoing_charges_methodology_for_publication_u_2_.pdf\" target=\"_blank\">KID ongoing charges<a/>.",
          "type": "number",
          "format": "float"
        },
        "trackingIndex": {
          "description": "Tracking Index.",
          "type": "string"
        },
        "etfCompany": {
          "description": "ETF issuer.",
          "type": "string"
        },
        "domicile": {
          "description": "ETF domicile.",
          "type": "string"
        },
        "inceptionDate": {
          "description": "Inception date.",
          "type": "string",
          "format": "date"
        },
        "website": {
          "description": "ETF's website.",
          "type": "string"
        },
        "isin": {
          "description": "ISIN.",
          "type": "string"
        },
        "cusip": {
          "description": "CUSIP.",
          "type": "string"
        },
        "priceToEarnings": {
          "description": "P/E.",
          "type": "number",
          "format": "float"
        },
        "priceToBook": {
          "description": "P/B.",
          "type": "number",
          "format": "float"
        },
        "avgVolume": {
          "description": "30-day average volume.",
          "type": "number",
          "format": "float"
        },
        "description": {
          "description": "ETF's description.",
          "type": "string"
        },
        "isInverse": {
          "description": "Whether the ETF is inverse",
          "type": "boolean"
        },
        "isLeveraged": {
          "description": "Whether the ETF is leveraged",
          "type": "boolean"
        },
        "leverageFactor": {
          "description": "Leverage factor.",
          "type": "number",
          "format": "float"
        }
      }
    },
    "ETFsProfile": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol.",
          "type": "string"
        },
        "profile": {
          "type": "object",
          "$ref": "#/definitions/ETFProfileData",
          "description": "Profile data."
        }
      }
    },
    "ETFHoldingsData": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol description",
          "type": "string"
        },
        "name": {
          "description": "Security name",
          "type": "string"
        },
        "isin": {
          "description": "ISIN.",
          "type": "string"
        },
        "cusip": {
          "description": "CUSIP.",
          "type": "string"
        },
        "share": {
          "description": "Number of shares owned by the ETF.",
          "type": "number",
          "format": "float"
        },
        "percent": {
          "description": "Portfolio's percent",
          "type": "number",
          "format": "float"
        },
        "value": {
          "description": "Market value",
          "type": "number",
          "format": "float"
        },
        "assetType": {
          "description": "Asset type. Can be 1 of the following values: <code>Equity</code>, <code>ETP</code>, <code>Fund</code>, <code>Bond</code>, <code>Other</code> or empty.",
          "type": "string"
        }
      }
    },
    "ETFsHoldings": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "ETF symbol.",
          "type": "string"
        },
        "atDate": {
          "description": "Holdings update date.",
          "type": "string",
          "format": "date"
        },
        "numberOfHoldings": {
          "description": "Number of holdings.",
          "type": "integer",
          "format": "int64"
        },
        "holdings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ETFHoldingsData"
          },
          "description": "Array of holdings."
        }
      }
    },
    "ETFSectorExposureData": {
      "type": "object",
      "properties": {
        "industry": {
          "description": "Industry",
          "type": "string"
        },
        "exposure": {
          "description": "Percent of exposure.",
          "type": "number",
          "format": "float"
        }
      }
    },
    "ETFsSectorExposure": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "ETF symbol.",
          "type": "string"
        },
        "sectorExposure": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ETFSectorExposureData"
          },
          "description": "Array of industries and exposure levels."
        }
      }
    },
    "ETFCountryExposureData": {
      "type": "object",
      "properties": {
        "country": {
          "description": "Country",
          "type": "string"
        },
        "exposure": {
          "description": "Percent of exposure.",
          "type": "number",
          "format": "float"
        }
      }
    },
    "ETFsCountryExposure": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "ETF symbol.",
          "type": "string"
        },
        "countryExposure": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ETFCountryExposureData"
          },
          "description": "Array of countries and and exposure levels."
        }
      }
    },
    "MutualFundProfileData": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Name",
          "type": "string"
        },
        "category": {
          "description": "Fund's category.",
          "type": "string"
        },
        "investmentSegment": {
          "description": "Investment Segment.",
          "type": "string"
        },
        "totalNav": {
          "description": "NAV.",
          "type": "number",
          "format": "float"
        },
        "expenseRatio": {
          "description": "Expense ratio.",
          "type": "number",
          "format": "float"
        },
        "benchmark": {
          "description": "Index benchmark.",
          "type": "string"
        },
        "inceptionDate": {
          "description": "Inception date.",
          "type": "string",
          "format": "date"
        },
        "description": {
          "description": "Fund's description.",
          "type": "string"
        },
        "fundFamily": {
          "description": "Fund Family.",
          "type": "string"
        },
        "manager": {
          "description": "Fund's managers.",
          "type": "string"
        },
        "status": {
          "description": "Status.",
          "type": "string"
        },
        "beta": {
          "description": "Beta.",
          "type": "number",
          "format": "float"
        },
        "deferredLoad": {
          "description": "Deferred load.",
          "type": "number",
          "format": "float"
        },
        "fee12b1": {
          "description": "12B-1 fee.",
          "type": "number",
          "format": "float"
        },
        "frontLoad": {
          "description": "Front Load.",
          "type": "number",
          "format": "float"
        },
        "iraMinInvestment": {
          "description": "IRA minimum investment.",
          "type": "number",
          "format": "float"
        },
        "isin": {
          "description": "ISIN.",
          "type": "string"
        },
        "cusip": {
          "description": "CUSIP.",
          "type": "string"
        },
        "maxRedemptionFee": {
          "description": "Max redemption fee.",
          "type": "number",
          "format": "float"
        },
        "standardMinInvestment": {
          "description": "Minimum investment for standard accounts.",
          "type": "number",
          "format": "float"
        },
        "turnover": {
          "description": "Turnover.",
          "type": "number",
          "format": "float"
        },
        "seriesId": {
          "description": "Fund's series ID. This field can be used to group multiple share classes into 1 unique fund.",
          "type": "string"
        },
        "seriesName": {
          "description": "Fund's series name.",
          "type": "string"
        },
        "classId": {
          "description": "Class ID.",
          "type": "string"
        },
        "className": {
          "description": "Class name.",
          "type": "string"
        },
        "sfdrClassification": {
          "description": "SFDR classification for EU funds. Under the new classifications, a fund's strategy will labeled under either Article 6, 8 or 9. Article 6 covers funds which do not integrate any kind of sustainability into the investment process. Article 8, also known as ‘environmental and socially promoting’, applies “… where a financial product promotes, among other characteristics, environmental or social characteristics, or a combination of those characteristics, provided that the companies in which the investments are made follow good governance practices.”. Article 9, also known as ‘products targeting sustainable investments’, covers products targeting bespoke sustainable investments and applies “… where a financial product has sustainable investment as its objective and an index has been designated as a reference benchmark.”",
          "type": "string"
        },
        "currency": {
          "description": "Fund's currency",
          "type": "string"
        }
      }
    },
    "MutualFundProfile": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol.",
          "type": "string"
        },
        "profile": {
          "type": "object",
          "$ref": "#/definitions/MutualFundProfileData",
          "description": "Profile data."
        }
      }
    },
    "MutualFundHoldingsData": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol description",
          "type": "string"
        },
        "name": {
          "description": "Security name",
          "type": "string"
        },
        "isin": {
          "description": "ISIN.",
          "type": "string"
        },
        "cusip": {
          "description": "CUSIP.",
          "type": "string"
        },
        "share": {
          "description": "Number of shares.",
          "type": "number",
          "format": "float"
        },
        "percent": {
          "description": "Portfolio's percent",
          "type": "number",
          "format": "float"
        },
        "value": {
          "description": "Market value",
          "type": "number",
          "format": "float"
        }
      }
    },
    "MutualFundHoldings": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol.",
          "type": "string"
        },
        "atDate": {
          "description": "Holdings update date.",
          "type": "string",
          "format": "date"
        },
        "numberOfHoldings": {
          "description": "Number of holdings.",
          "type": "integer",
          "format": "int64"
        },
        "holdings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MutualFundHoldingsData"
          },
          "description": "Array of holdings."
        }
      }
    },
    "MutualFundSectorExposureData": {
      "type": "object",
      "properties": {
        "sector": {
          "description": "Sector",
          "type": "string"
        },
        "exposure": {
          "description": "Percent of exposure.",
          "type": "number",
          "format": "float"
        }
      }
    },
    "MutualFundSectorExposure": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Mutual symbol.",
          "type": "string"
        },
        "sectorExposure": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MutualFundSectorExposureData"
          },
          "description": "Array of sector and exposure levels."
        }
      }
    },
    "MutualFundCountryExposureData": {
      "type": "object",
      "properties": {
        "country": {
          "description": "Country",
          "type": "string"
        },
        "exposure": {
          "description": "Percent of exposure.",
          "type": "number",
          "format": "float"
        }
      }
    },
    "MutualFundCountryExposure": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol.",
          "type": "string"
        },
        "countryExposure": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MutualFundCountryExposureData"
          },
          "description": "Array of countries and and exposure levels."
        }
      }
    },
    "ForexSymbol": {
      "type": "object",
      "properties": {
        "description": {
          "description": "Symbol description",
          "type": "string"
        },
        "displaySymbol": {
          "description": "Display symbol name.",
          "type": "string"
        },
        "symbol": {
          "description": "Unique symbol used to identify this symbol used in <code>/forex/candle</code> endpoint.",
          "type": "string"
        }
      }
    },
    "ForexCandles": {
      "type": "object",
      "properties": {
        "o": {
          "type": "array",
          "description": "List of open prices for returned candles.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "h": {
          "type": "array",
          "description": "List of high prices for returned candles.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "l": {
          "type": "array",
          "description": "List of low prices for returned candles.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "c": {
          "type": "array",
          "description": "List of close prices for returned candles.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "v": {
          "type": "array",
          "description": "List of volume data for returned candles.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "t": {
          "type": "array",
          "description": "List of timestamp for returned candles.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "s": {
          "description": "Status of the response. This field can either be ok or no_data.",
          "type": "string"
        }
      }
    },
    "ForexRate": {
      "type": "object"
    },
    "Forexrates": {
      "type": "object",
      "properties": {
        "base": {
          "description": "Base currency.",
          "type": "string"
        },
        "quote": {
          "type": "object",
          "$ref": "#/definitions/ForexRate",
          "description": "A map of base/quote rates for all currency pair."
        }
      }
    },
    "CryptoSymbol": {
      "type": "object",
      "properties": {
        "description": {
          "description": "Symbol description",
          "type": "string"
        },
        "displaySymbol": {
          "description": "Display symbol name.",
          "type": "string"
        },
        "symbol": {
          "description": "Unique symbol used to identify this symbol used in <code>/crypto/candle</code> endpoint.",
          "type": "string"
        }
      }
    },
    "CryptoProfile": {
      "type": "object",
      "properties": {
        "longName": {
          "description": "Long name.",
          "type": "string"
        },
        "name": {
          "description": "Name.",
          "type": "string"
        },
        "description": {
          "description": "Description.",
          "type": "string"
        },
        "website": {
          "description": "Project's website.",
          "type": "string"
        },
        "marketCap": {
          "description": "Market capitalization.",
          "type": "number",
          "format": "float"
        },
        "totalSupply": {
          "description": "Total supply.",
          "type": "number",
          "format": "float"
        },
        "maxSupply": {
          "description": "Max supply.",
          "type": "number",
          "format": "float"
        },
        "circulatingSupply": {
          "description": "Circulating supply.",
          "type": "number",
          "format": "float"
        },
        "logo": {
          "description": "Logo image.",
          "type": "string"
        },
        "launchDate": {
          "description": "Launch date.",
          "type": "string"
        },
        "proofType": {
          "description": "Proof type.",
          "type": "string"
        }
      }
    },
    "CryptoCandles": {
      "type": "object",
      "properties": {
        "o": {
          "type": "array",
          "description": "List of open prices for returned candles.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "h": {
          "type": "array",
          "description": "List of high prices for returned candles.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "l": {
          "type": "array",
          "description": "List of low prices for returned candles.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "c": {
          "type": "array",
          "description": "List of close prices for returned candles.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "v": {
          "type": "array",
          "description": "List of volume data for returned candles.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "t": {
          "type": "array",
          "description": "List of timestamp for returned candles.",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "s": {
          "description": "Status of the response. This field can either be ok or no_data.",
          "type": "string"
        }
      }
    },
    "ScanPattern": {
      "type": "object"
    },
    "PatternRecognition": {
      "type": "object",
      "properties": {
        "points": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScanPattern"
          },
          "description": "Array of patterns."
        }
      }
    },
    "SupportResistance": {
      "type": "object",
      "properties": {
        "levels": {
          "type": "array",
          "description": "Array of support and resistance levels.",
          "items": {
            "type": "number",
            "format": "float"
          }
        }
      }
    },
    "Indicator": {
      "type": "object",
      "properties": {
        "buy": {
          "description": "Number of buy signals",
          "type": "integer",
          "format": "int64"
        },
        "neutral": {
          "description": "Number of neutral signals",
          "type": "integer",
          "format": "int64"
        },
        "sell": {
          "description": "Number of sell signals",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "TechnicalAnalysis": {
      "type": "object",
      "properties": {
        "count": {
          "type": "object",
          "$ref": "#/definitions/Indicator",
          "description": "Number of indicators for each signal"
        },
        "signal": {
          "description": "Aggregate Signal",
          "type": "string"
        }
      }
    },
    "Trend": {
      "type": "object",
      "properties": {
        "adx": {
          "description": "ADX reading",
          "type": "number",
          "format": "float"
        },
        "trending": {
          "description": "Whether market is trending or going sideway",
          "type": "boolean"
        }
      }
    },
    "AggregateIndicators": {
      "type": "object",
      "properties": {
        "technicalAnalysis": {
          "type": "object",
          "$ref": "#/definitions/TechnicalAnalysis",
          "description": "Number of indicator signals strong buy, buy, neutral, sell, strong sell signals."
        },
        "trend": {
          "type": "object",
          "$ref": "#/definitions/Trend",
          "description": "Whether the market is trending."
        }
      }
    },
    "TechnicalIndicator": {
      "type": "object"
    },
    "IndicatorFields": {
      "type": "object"
    },
    "StockTranscripts": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Transcript's ID used to get the <a href=\"#transcripts\">full transcript</a>.",
          "type": "string"
        },
        "title": {
          "description": "Title.",
          "type": "string"
        },
        "time": {
          "description": "Time of the event.",
          "type": "string",
          "formatIgnore": "date-time"
        },
        "year": {
          "description": "Year of earnings result in the case of earnings call transcript.",
          "type": "integer",
          "format": "int64"
        },
        "quarter": {
          "description": "Quarter of earnings result in the case of earnings call transcript.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "EarningsCallTranscriptsList": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Company symbol.",
          "type": "string"
        },
        "transcripts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StockTranscripts"
          },
          "description": "Array of transcripts' metadata"
        }
      }
    },
    "TranscriptContent": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Speaker's name",
          "type": "string"
        },
        "speech": {
          "type": "array",
          "description": "Speaker's speech",
          "items": {
            "type": "string"
          }
        },
        "session": {
          "description": "Earnings calls section (management discussion or Q&A)",
          "type": "string"
        }
      }
    },
    "TranscriptParticipant": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Participant's name",
          "type": "string"
        },
        "description": {
          "description": "Participant's description",
          "type": "string"
        },
        "role": {
          "description": "Whether the speak is a company's executive or an analyst",
          "type": "string"
        }
      }
    },
    "EarningsCallTranscripts": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Company symbol.",
          "type": "string"
        },
        "transcript": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TranscriptContent"
          },
          "description": "Transcript content."
        },
        "participant": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TranscriptParticipant"
          },
          "description": "Participant list"
        },
        "audio": {
          "description": "Audio link.",
          "type": "string"
        },
        "id": {
          "description": "Transcript's ID.",
          "type": "string"
        },
        "title": {
          "description": "Title.",
          "type": "string"
        },
        "time": {
          "description": "Time of the event.",
          "type": "string",
          "formatIgnore": "date-time"
        },
        "year": {
          "description": "Year of earnings result in the case of earnings call transcript.",
          "type": "integer",
          "format": "int64"
        },
        "quarter": {
          "description": "Quarter of earnings result in the case of earnings call transcript.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "RedditSentimentContent": {
      "type": "object",
      "properties": {
        "mention": {
          "description": "Number of mentions",
          "type": "integer",
          "format": "int64"
        },
        "positiveMention": {
          "description": "Number of positive mentions",
          "type": "integer",
          "format": "int64"
        },
        "negativeMention": {
          "description": "Number of negative mentions",
          "type": "integer",
          "format": "int64"
        },
        "positiveScore": {
          "description": "Positive score. Range 0-1",
          "type": "number",
          "format": "float"
        },
        "negativeScore": {
          "description": "Negative score. Range 0-1",
          "type": "number",
          "format": "float"
        },
        "score": {
          "description": "Final score. Range: -1 to 1 with 1 is very positive and -1 is very negative",
          "type": "number",
          "format": "float"
        },
        "atTime": {
          "description": "Period.",
          "type": "string",
          "formatIgnore": "date-time"
        }
      }
    },
    "TwitterSentimentContent": {
      "type": "object",
      "properties": {
        "mention": {
          "description": "Number of mentions",
          "type": "integer",
          "format": "int64"
        },
        "positiveMention": {
          "description": "Number of positive mentions",
          "type": "integer",
          "format": "int64"
        },
        "negativeMention": {
          "description": "Number of negative mentions",
          "type": "integer",
          "format": "int64"
        },
        "positiveScore": {
          "description": "Positive score. Range 0-1",
          "type": "number",
          "format": "float"
        },
        "negativeScore": {
          "description": "Negative score. Range 0-1",
          "type": "number",
          "format": "float"
        },
        "score": {
          "description": "Final score. Range: -1 to 1 with 1 is very positive and -1 is very negative",
          "type": "number",
          "format": "float"
        },
        "atTime": {
          "description": "Period.",
          "type": "string",
          "formatIgnore": "date-time"
        }
      }
    },
    "SocialSentiment": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Company symbol.",
          "type": "string"
        },
        "reddit": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RedditSentimentContent"
          },
          "description": "Reddit sentiment."
        },
        "twitter": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TwitterSentimentContent"
          },
          "description": "Twitter sentiment."
        }
      }
    },
    "InvestmentThemePortfolio": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol",
          "type": "string"
        }
      }
    },
    "InvestmentThemes": {
      "type": "object",
      "properties": {
        "theme": {
          "description": "Investment theme",
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InvestmentThemePortfolio"
          },
          "description": "Investment theme portfolio."
        }
      }
    },
    "SectorMetric": {
      "type": "object",
      "properties": {
        "region": {
          "description": "Region.",
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SectorMetricData"
          },
          "description": "Metrics for each sector."
        }
      }
    },
    "SectorMetricData": {
      "type": "object",
      "properties": {
        "sector": {
          "description": "Sector",
          "type": "string"
        },
        "metrics": {
          "description": "Metrics data in key-value format. <code>a</code> and <code>m</code> fields are for average and median respectively.",
          "type": "object"
        }
      }
    },
    "KeyCustomersSuppliers": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol",
          "type": "string"
        },
        "name": {
          "description": "Name",
          "type": "string"
        },
        "country": {
          "description": "Country",
          "type": "string"
        },
        "industry": {
          "description": "Industry",
          "type": "string"
        },
        "customer": {
          "description": "Whether the company is a customer.",
          "type": "boolean"
        },
        "supplier": {
          "description": "Whether the company is a supplier",
          "type": "boolean"
        },
        "oneMonthCorrelation": {
          "description": "1-month price correlation",
          "type": "number",
          "format": "float"
        },
        "oneYearCorrelation": {
          "description": "1-year price correlation",
          "type": "number",
          "format": "float"
        },
        "sixMonthCorrelation": {
          "description": "6-month price correlation",
          "type": "number",
          "format": "float"
        },
        "threeMonthCorrelation": {
          "description": "3-month price correlation",
          "type": "number",
          "format": "float"
        },
        "twoWeekCorrelation": {
          "description": "2-week price correlation",
          "type": "number",
          "format": "float"
        },
        "twoYearCorrelation": {
          "description": "2-year price correlation",
          "type": "number",
          "format": "float"
        }
      }
    },
    "SupplyChainRelationships": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "symbol",
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyCustomersSuppliers"
          },
          "description": "Key customers and suppliers."
        }
      }
    },
    "CompanyESG": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "symbol",
          "type": "string"
        },
        "totalESGScore": {
          "description": "Total ESG Score",
          "type": "number",
          "format": "float"
        },
        "environmentScore": {
          "description": "Environment Score",
          "type": "number",
          "format": "float"
        },
        "governanceScore": {
          "description": "Governance Score",
          "type": "number",
          "format": "float"
        },
        "socialScore": {
          "description": "Social Score",
          "type": "number",
          "format": "float"
        },
        "data": {
          "type": "object",
          "$ref": "#/definitions/CompanyESGMap",
          "description": "Map key-value pair of key ESG data points."
        }
      }
    },
    "CompanyESGMap": {
      "type": "object"
    },
    "CompanyEarningsQualityScore": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol",
          "type": "string"
        },
        "freq": {
          "description": "Frequency",
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompanyEarningsQualityScoreData"
          },
          "description": "Array of earnings quality score."
        }
      }
    },
    "CompanyEarningsQualityScoreData": {
      "type": "object",
      "properties": {
        "period": {
          "description": "Period",
          "type": "string"
        },
        "growth": {
          "description": "Growth Score",
          "type": "number",
          "format": "float"
        },
        "profitability": {
          "description": "Profitability Score",
          "type": "number",
          "format": "float"
        },
        "cashGenerationCapitalAllocation": {
          "description": "Cash Generation and Capital Allocation",
          "type": "number",
          "format": "float"
        },
        "leverage": {
          "description": "Leverage Score",
          "type": "number",
          "format": "float"
        },
        "score": {
          "description": "Total Score",
          "type": "number",
          "format": "float"
        },
        "letterScore": {
          "description": "Letter Score",
          "type": "string"
        }
      }
    },
    "CovidInfo": {
      "type": "object",
      "properties": {
        "state": {
          "description": "State.",
          "type": "string"
        },
        "case": {
          "description": "Number of confirmed cases.",
          "type": "number",
          "format": "float"
        },
        "death": {
          "description": "Number of confirmed deaths.",
          "type": "number",
          "format": "float"
        },
        "updated": {
          "description": "Updated time.",
          "type": "string",
          "formatIgnore": "date-time"
        }
      }
    },
    "FDAComitteeMeeting": {
      "type": "object",
      "properties": {
        "fromDate": {
          "description": "Start time of the event in EST.",
          "type": "string",
          "formatIgnore": "date-time"
        },
        "toDate": {
          "description": "End time of the event in EST.",
          "type": "string",
          "formatIgnore": "date-time"
        },
        "eventDescription": {
          "description": "Event's description.",
          "type": "string"
        },
        "url": {
          "description": "URL.",
          "type": "string"
        }
      }
    },
    "CountryMetadata": {
      "type": "object",
      "properties": {
        "country": {
          "description": "Country name",
          "type": "string"
        },
        "code2": {
          "description": "Alpha 2 code",
          "type": "string"
        },
        "code3": {
          "description": "Alpha 3 code",
          "type": "string"
        },
        "codeNo": {
          "description": "UN code",
          "type": "string"
        },
        "currency": {
          "description": "Currency name",
          "type": "string"
        },
        "currencyCode": {
          "description": "Currency code",
          "type": "string"
        },
        "region": {
          "description": "Region",
          "type": "string"
        },
        "subRegion": {
          "description": "Sub-Region",
          "type": "string"
        }
      }
    },
    "Economic event": {
      "type": "object",
      "properties": {
        "actual": {
          "description": "Actual release",
          "type": "number",
          "format": "float"
        },
        "prev": {
          "description": "Previous release",
          "type": "number",
          "format": "float"
        },
        "country": {
          "description": "Country",
          "type": "string"
        },
        "unit": {
          "description": "Unit",
          "type": "string"
        },
        "estimate": {
          "description": "Estimate",
          "type": "number",
          "format": "float"
        },
        "event": {
          "description": "Event",
          "type": "string"
        },
        "impact": {
          "description": "Impact level",
          "type": "string"
        },
        "time": {
          "description": "Release time",
          "type": "string"
        }
      }
    },
    "EconomicCalendar": {
      "type": "object",
      "properties": {
        "economicCalendar": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Economic event"
          },
          "description": "Array of economic events."
        }
      }
    },
    "EconomicCode": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Finnhub economic code used to get historical data",
          "type": "string"
        },
        "country": {
          "description": "Country",
          "type": "string"
        },
        "name": {
          "description": "Indicator name",
          "type": "string"
        },
        "unit": {
          "description": "Unit",
          "type": "string"
        }
      }
    },
    "EconomicDataInfo": {
      "type": "object",
      "properties": {
        "date": {
          "description": "Date of the reading",
          "type": "string"
        },
        "value": {
          "description": "Value",
          "type": "number",
          "format": "float"
        }
      }
    },
    "EconomicData": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EconomicDataInfo"
          },
          "description": "Array of economic data for requested code."
        },
        "code": {
          "description": "Finnhub economic code",
          "type": "string"
        }
      }
    },
    "BondYieldCurveInfo": {
      "type": "object",
      "properties": {
        "d": {
          "description": "Date of the reading",
          "type": "string"
        },
        "v": {
          "description": "Value",
          "type": "number",
          "format": "float"
        }
      }
    },
    "BondYieldCurve": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BondYieldCurveInfo"
          },
          "description": "Array of data."
        },
        "code": {
          "description": "Bond's code",
          "type": "string"
        }
      }
    },
    "UsptoPatentResult": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol.",
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UsptoPatent"
          },
          "description": "Array of patents."
        }
      }
    },
    "UsptoPatent": {
      "type": "object",
      "properties": {
        "applicationNumber": {
          "description": "Application Number.",
          "type": "string"
        },
        "companyFilingName": {
          "type": "array",
          "description": "Array of companies' name on the patent.",
          "items": {
            "type": "string"
          }
        },
        "filingDate": {
          "description": "Filing date.",
          "type": "string"
        },
        "description": {
          "description": "Description.",
          "type": "string"
        },
        "filingStatus": {
          "description": "Filing status.",
          "type": "string"
        },
        "patentNumber": {
          "description": "Patent number.",
          "type": "string"
        },
        "publicationDate": {
          "description": "Publication date.",
          "type": "string"
        },
        "patentType": {
          "description": "Patent's type.",
          "type": "string"
        },
        "url": {
          "description": "URL of the original article.",
          "type": "string"
        }
      }
    },
    "VisaApplicationResult": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol.",
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VisaApplication"
          },
          "description": "Array of H1b and Permanent visa applications."
        }
      }
    },
    "LobbyingResult": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol.",
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LobbyingData"
          },
          "description": "Array of lobbying activities."
        }
      }
    },
    "UsaSpendingResult": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol.",
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UsaSpending"
          },
          "description": "Array of government's spending data points."
        }
      }
    },
    "UsaSpending": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol.",
          "type": "string"
        },
        "recipientName": {
          "description": "Company's name.",
          "type": "string"
        },
        "recipientParentName": {
          "description": "Company's name.",
          "type": "string"
        },
        "awardDescription": {
          "description": "Description.",
          "type": "string"
        },
        "country": {
          "description": "Recipient's country.",
          "type": "string"
        },
        "actionDate": {
          "description": "Period.",
          "type": "string"
        },
        "totalValue": {
          "description": "Income reported by lobbying firms.",
          "type": "number",
          "format": "float"
        },
        "performanceStartDate": {
          "description": "Performance start date.",
          "type": "string"
        },
        "performanceEndDate": {
          "description": "Performance end date.",
          "type": "string"
        },
        "awardingAgencyName": {
          "description": "Award agency.",
          "type": "string"
        },
        "awardingSubAgencyName": {
          "description": "Award sub-agency.",
          "type": "string"
        },
        "awardingOfficeName": {
          "description": "Award office name.",
          "type": "string"
        },
        "performanceCountry": {
          "description": "Performance country.",
          "type": "string"
        },
        "performanceCity": {
          "description": "Performance city.",
          "type": "string"
        },
        "performanceCounty": {
          "description": "Performance county.",
          "type": "string"
        },
        "performanceState": {
          "description": "Performance state.",
          "type": "string"
        },
        "performanceZipCode": {
          "description": "Performance zip code.",
          "type": "string"
        },
        "performanceCongressionalDistrict": {
          "description": "Performance congressional district.",
          "type": "string"
        },
        "naicsCode": {
          "description": "NAICS code.",
          "type": "string"
        },
        "permalink": {
          "description": "Permalink.",
          "type": "string"
        }
      }
    },
    "LobbyingData": {
      "type": "object",
      "properties": {
        "symbol": {
          "description": "Symbol.",
          "type": "string"
        },
        "name": {
          "description": "Company's name.",
          "type": "string"
        },
        "description": {
          "description": "Description.",
          "type": "string"
        },
        "country": {
          "description": "Country.",
          "type": "string"
        },
        "year": {
          "description": "Year.",
          "type": "integer",
          "format": "int64"
        },
        "period": {
          "description": "Period.",
          "type": "string"
        },
        "income": {
          "description": "Income reported by lobbying firms.",
          "type": "number",
          "format": "float"
        },
        "expenses": {
          "description": "Expenses reported by the company.",
          "type": "number",
          "format": "float"
        },
        "documentUrl": {
          "description": "Document's URL.",
          "type": "string"
        },
        "postedName": {
          "description": "Posted name.",
          "type": "string"
        },
        "date": {
          "description": "Date.",
          "type": "string"
        },
        "clientId": {
          "description": "Client ID.",
          "type": "string"
        },
        "registrantId": {
          "description": "Registrant ID.",
          "type": "string"
        },
        "senateId": {
          "description": "Senate ID.",
          "type": "string"
        },
        "houseregistrantId": {
          "description": "House registrant ID.",
          "type": "string"
        }
      }
    },
    "BondProfile": {
      "type": "object",
      "properties": {
        "isin": {
          "description": "ISIN.",
          "type": "string"
        },
        "cusip": {
          "description": "Cusip.",
          "type": "string"
        },
        "figi": {
          "description": "FIGI.",
          "type": "string"
        },
        "coupon": {
          "description": "Coupon.",
          "type": "number",
          "format": "float"
        },
        "maturityDate": {
          "description": "Period.",
          "type": "string"
        },
        "offeringPrice": {
          "description": "Offering price.",
          "type": "number",
          "format": "float"
        },
        "issueDate": {
          "description": "Issue date.",
          "type": "string"
        },
        "bondType": {
          "description": "Bond type.",
          "type": "string"
        },
        "debtType": {
          "description": "Bond type.",
          "type": "string"
        },
        "industryGroup": {
          "description": "Industry.",
          "type": "string"
        },
        "industrySubGroup": {
          "description": "Sub-Industry.",
          "type": "string"
        },
        "asset": {
          "description": "Asset.",
          "type": "string"
        },
        "assetType": {
          "description": "Asset.",
          "type": "string"
        },
        "datedDate": {
          "description": "Dated date.",
          "type": "string"
        },
        "firstCouponDate": {
          "description": "First coupon date.",
          "type": "string"
        },
        "originalOffering": {
          "description": "Offering amount.",
          "type": "number",
          "format": "float"
        },
        "amountOutstanding": {
          "description": "Outstanding amount.",
          "type": "number",
          "format": "float"
        },
        "paymentFrequency": {
          "description": "Payment frequency.",
          "type": "string"
        },
        "securityLevel": {
          "description": "Security level.",
          "type": "string"
        },
        "callable": {
          "description": "Callable.",
          "type": "boolean"
        },
        "couponType": {
          "description": "Coupon type.",
          "type": "string"
        }
      }
    },
    "BondCandles": {
      "type": "object",
      "properties": {
        "c": {
          "type": "array",
          "description": "List of close prices for returned candles.",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "t": {
          "type": "array",
          "description": "List of timestamp for returned candles.",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "s": {
          "description": "Status of the response. This field can either be ok or no_data.",
          "type": "string"
        }
      }
    },
    "VisaApplication": {
      "type": "object",
      "properties": {
        "year": {
          "description": "Year.",
          "type": "integer",
          "format": "int64"
        },
        "quarter": {
          "description": "Quarter.",
          "type": "integer",
          "format": "int64"
        },
        "symbol": {
          "description": "Symbol.",
          "type": "string"
        },
        "caseNumber": {
          "description": "Case number.",
          "type": "string"
        },
        "caseStatus": {
          "description": "Case status.",
          "type": "string"
        },
        "receivedDate": {
          "description": "Received date.",
          "type": "string"
        },
        "visaClass": {
          "description": "Visa class.",
          "type": "string"
        },
        "jobTitle": {
          "description": "Job Title.",
          "type": "string"
        },
        "socCode": {
          "description": "SOC Code. A list of SOC code can be found <a href=\"https://www.bls.gov/oes/current/oes_stru.htm\" target=\"_blank\">here</a>.",
          "type": "string"
        },
        "fullTimePosition": {
          "description": "Full-time position flag.",
          "type": "string"
        },
        "beginDate": {
          "description": "Job's start date.",
          "type": "string"
        },
        "endDate": {
          "description": "Job's end date.",
          "type": "string"
        },
        "employerName": {
          "description": "Company's name.",
          "type": "string"
        },
        "worksiteAddress": {
          "description": "Worksite address.",
          "type": "string"
        },
        "worksiteCity": {
          "description": "Worksite city.",
          "type": "string"
        },
        "worksiteCounty": {
          "description": "Worksite county.",
          "type": "string"
        },
        "worksiteState": {
          "description": "Worksite state.",
          "type": "string"
        },
        "worksitePostalCode": {
          "description": "Worksite postal code.",
          "type": "string"
        },
        "wageRangeFrom": {
          "description": "Wage range from.",
          "type": "number",
          "format": "float"
        },
        "wageRangeTo": {
          "description": "Wage range to.",
          "type": "number",
          "format": "float"
        },
        "wageUnitOfPay": {
          "description": "Wage unit of pay.",
          "type": "string"
        },
        "wageLevel": {
          "description": "Wage level.",
          "type": "string"
        },
        "h1bDependent": {
          "description": "H1B dependent flag.",
          "type": "string"
        }
      }
    }
  }
}