#include"pch.h"

#include"Thread.h"

#include"globedef.h"
#include"ChinaMarket.h"

#include"VirtualWebInquiry.h"

atomic_llong CVirtualWebInquiry::m_lTotalByteReaded = 0;

CVirtualWebInquiry::CVirtualWebInquiry() : CObject() {
	m_pSession = new CInternetSession{ _T("如果此项为空，则测试时会出现断言错误。但不影响测试结果") };
	m_pFile = nullptr;
	m_strHeaders = _T("");

	m_lByteRead = 0;
	m_fWebError = false;
	m_dwWebErrorCode = 0;
	m_strInquire = _T("");
	m_strWebDataInquireMiddle = m_strWebDataInquirePrefix = m_strWebDataInquireSuffix = _T("");
	m_fReadingWebData = false; // 接收实时数据线程是否执行标识
	m_sBuffer.resize(1024 * 1024); // 大多数情况下，1M缓存就足够了，无需再次分配内存。

	m_lShortestInquiringInterval = 1000; // 每1秒查询一次。
	m_lInquiringNumber = 500; // 每次查询数量默认值为500
	m_tCurrentInquiryTime = 0;

	m_fFSonContentType = false;

	m_lContentLength = -1;

#ifdef DEBUG
	m_fReportStatus = false;
#else
	m_fReportStatus = false;
#endif
}

CVirtualWebInquiry::~CVirtualWebInquiry(void) {
	delete m_pSession;
}

void CVirtualWebInquiry::Reset(void) noexcept {
	m_lByteRead = 0;
	m_dwWebErrorCode = 0;
	m_fWebError = false;
}

/// <summary>
/// 当采用此函数读取网易日线历史数据时，偶尔会出现超时（网络错误代码12002）错误，可以采用多读取几次解决之
///
/// </summary>
/// <param name="strInquiring"></param>
/// <returns></returns>
bool CVirtualWebInquiry::OpenFile(CString strInquiring) {
	bool fStatus = true;
	bool fDone = false;
	int iCountNumber = 0;
	CString strMessage, strLeft, strErrorNo;
	char buffer[30];
	long lHeadersLength = m_strHeaders.GetLength();

	ASSERT(m_pSession != nullptr);
	ASSERT(m_pFile == nullptr);
	do {
		try {
			// 使用dynamic_cast时，Address Sanitizer在此处报错
			//m_pFile = dynamic_cast<CHttpFile*>(m_pSession->OpenURL((LPCTSTR)strInquiring));
			// 由于新浪实时数据服务器需要提供头验证数据，故而OpenURL不再使用默认值，调用者需要设置m_strHeaders（默认为空）。
			m_pFile = static_cast<CHttpFile*>(m_pSession->OpenURL((LPCTSTR)strInquiring, 1, INTERNET_FLAG_TRANSFER_ASCII, (LPCTSTR)m_strHeaders, lHeadersLength));
			fDone = true;
		}
		catch (CInternetException* exception) {
			if (m_pFile != nullptr) {
				m_pFile->Close();
				delete m_pFile;
				m_pFile = nullptr;
			}
			Sleep(1); // 等待10毫秒。不等待其实也可以，
			if (iCountNumber++ > 2) { // 重复读取三次皆失败后，则报错。
				SetWebError(true);
				m_dwWebErrorCode = exception->m_dwError;
				TRACE(_T("Net Error No %d,  %s\n"), exception->m_dwError, (LPCTSTR)strLeft);
				sprintf_s(buffer, _T("%d"), exception->m_dwError);
				strErrorNo = buffer;
				strMessage = _T("Net Error No ") + strErrorNo + _T(" : ") + strLeft + _T("\n");
				gl_systemMessage.PushErrorMessage(strMessage);
				fStatus = false;
				fDone = true;
			}
			exception->Delete();
		}
	} while (!fDone);
	if (fStatus) {
		CString str;
		m_pFile->QueryInfo(HTTP_QUERY_CONTENT_LENGTH, str);
		if (str.GetLength() > 0) {
			m_lContentLength = atol(str.GetBuffer());
		}
	}

	return fStatus;
}

///////////////////////////////////////////////////////////////////////////
//
// 从网络读取数据。每次读1KB，直到读不到为止。
// 当采用此函数读取网易日线历史数据时，OpenFile偶尔会出现超时（网络错误代码12002）错误，可以采用多读取几次解决之。
// 现在发现其他网路读取线程也偶尔出现超时错误，多读几次即可解决之。--20211104
//
// 新浪实时数据服务器打开时间为100毫秒左右，网易实时数据服务器打开时间为350毫秒左右。
//
///////////////////////////////////////////////////////////////////////////
bool CVirtualWebInquiry::ReadWebData(void) {
	m_pFile = nullptr;
	bool fReadingSuccess = true;
	long lCurrentByteReaded = 0;
	LARGE_INTEGER liBegin{ 0,0 }, liEnd{ 0,0 };

	ASSERT(IsReadingWebData());
	gl_ThreadStatus.IncreaseWebInquiringThread();
	SetWebError(false);
	SetByteReaded(0);
	QueryPerformanceCounter(&liBegin);
	if (OpenFile(GetInquiringString())) {
		QueryPerformanceCounter(&liEnd);
		do {
			if (gl_fExitingSystem) { // 当系统退出时，要立即中断此进程，以防止内存泄露。
				fReadingSuccess = false;
				break;
			}
			lCurrentByteReaded = ReadWebFileOneTime(); // 每次读取1K数据。

			if (m_sBuffer.size() < (m_lByteRead + 128 * 1024)) { // 数据可存储空间不到128K时
				m_sBuffer.resize(m_sBuffer.size() + 1024 * 1024); // 扩大1M数据范围
			}
		} while (lCurrentByteReaded > 0);
		ASSERT(m_sBuffer.size() > m_lByteRead);
		m_lTotalByteReaded += m_lByteRead;
		if (m_pFile != nullptr) {
			m_pFile->Close();
			delete m_pFile;
			m_pFile = nullptr;
		}
	}
	else fReadingSuccess = false;

	gl_ThreadStatus.DecreaseWebInquiringThread();
	ASSERT(gl_ThreadStatus.GetNumberOfWebInquiringThread() >= 0);

	SetCurrentInquiryTime((liEnd.QuadPart - liBegin.QuadPart) / 1000);

	return fReadingSuccess;
}

/// 每次读取1K数据，然后将读取到的数据存入缓冲区
/// </summary>
/// <param name=""></param>
/// <returns></returns>
UINT CVirtualWebInquiry::ReadWebFileOneTime(void) {
	char buffer[1024];
	const UINT uByteRead = m_pFile->Read(buffer, 1024);
	for (int i = 0; i < uByteRead; i++) {
		m_sBuffer.at(m_lByteRead++) = buffer[i];
	}
	return uByteRead;
}

bool CVirtualWebInquiry::TransferData(CWebDataPtr pWebData) {
	auto byteReaded = GetByteReaded();

	if (m_lContentLength > 0) {
		if (m_lContentLength != byteReaded) gl_systemMessage.PushErrorMessage(_T("网络数据长度不符：") + m_strInquire.Left(120));
	}
	m_sBuffer.resize(byteReaded);
	pWebData->m_sDataBuffer = std::move(m_sBuffer); // 使用std::move以加速执行速度
	pWebData->SetBufferLength(byteReaded);
	pWebData->ResetCurrentPos();

	return true;
}

/////////////////////////////////////////////////////////////////////////////////////
//
// 解析接收到的数据，默认数据格式为JSon
//
////////////////////////////////////////////////////////////////////////////////////
bool CVirtualWebInquiry::ParseData(CWebDataPtr pWebData) {
	pWebData->m_fSucceedCreatePTree = pWebData->CreatePTree(0, 0);
	pWebData->SetJSonContentType(true);
	return pWebData->IsSucceedCreatePTree();
}

/////////////////////////////////////////////////////////////////////////
//
// 这是此类唯一的接口函数
//
//////////////////////////////////////////////////////////////////////////
bool CVirtualWebInquiry::GetWebData(void) {
	if (!IsReadingWebData()) { // 工作线程没有启动？
		if (PrepareNextInquiringStr()) {
			SetReadingWebData(true);  // 在此先设置一次，以防重入（线程延迟导致）
			StartReadingThread();
			return true;
		}
		else return false;
	}
	else return false; // 工作线程已在执行接收数据的任务
}

bool CVirtualWebInquiry::ReportStatus(long lNumberOfData) const {
	TRACE("读入%d个实时数据\n", lNumberOfData);
	return true;
}

void CVirtualWebInquiry::CreateTotalInquiringString(CString strMiddle) {
	m_strInquire = m_strWebDataInquirePrefix + strMiddle + m_strWebDataInquireSuffix;
}

void CVirtualWebInquiry::StartReadingThread(void) {
	thread thread1(ThreadReadVirtualWebData, this);
	thread1.detach();
}

void CVirtualWebInquiry::SetTime(CWebDataPtr pData) {
	pData->SetTime(gl_pChinaMarket->GetUTCTime());
}

void CVirtualWebInquiry::__TESTSetBuffer(char* buffer, INT64 lTotalNumber) {
	m_sBuffer.resize(lTotalNumber);
	for (INT64 i = 0; i < lTotalNumber; i++) {
		m_sBuffer.at(i) = buffer[i];
	}
	m_lByteRead = lTotalNumber;
}

void CVirtualWebInquiry::__TESTSetBuffer(CString str) {
	INT64 lTotalNumber = str.GetLength();
	char* buffer = str.GetBuffer();

	m_sBuffer.resize(lTotalNumber);
	for (INT64 i = 0; i < lTotalNumber; i++) {
		m_sBuffer.at(i) = buffer[i];
	}
	m_lByteRead = lTotalNumber;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 通用网络数据读取线程。
//
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
UINT ThreadReadVirtualWebData(not_null<CVirtualWebInquiry*> pVirtualWebInquiry) {
	ASSERT(pVirtualWebInquiry->IsReadingWebData());
	LARGE_INTEGER liBegin{ 0,0 }, liEnd{ 0,0 };

	QueryPerformanceCounter(&liBegin);

	pVirtualWebInquiry->PrepareReadingWebData();
	if (pVirtualWebInquiry->ReadWebData()) {
		CWebDataPtr pWebData = make_shared<CWebData>();
		pVirtualWebInquiry->TransferData(pWebData);
		pVirtualWebInquiry->ParseData(pWebData);
		pVirtualWebInquiry->ResetBuffer();

		pVirtualWebInquiry->SetTime(pWebData);
		pVirtualWebInquiry->UpdateStatusWhenSecceed(pWebData);
		pVirtualWebInquiry->StoreWebData(pWebData);
	}
	else { // error handling
		pVirtualWebInquiry->ClearUpIfReadingWebDataFailed();
	}
	pVirtualWebInquiry->UpdateAfterReadingWebData();

	pVirtualWebInquiry->SetReadingWebData(false);

	QueryPerformanceCounter(&liEnd);

	//pVirtualWebInquiry->SetCurrentInquiryTime((liEnd.QuadPart - liBegin.QuadPart) / 1000);

	return 1;
}